#!/usr/bin/env python
# -*- coding: latin-1 -*-
"""
    Merge the outlines of the RapidIO standards.

    Takes the "outline" output generated by parse_rapidio_standard.py
    and merges them into a single outline.
    Creates schema based on:
    Part Number (1-13)
    Chapter Number (H2)
    Section Number (H3-H6)
    (list of revisions)

"""

from optparse import OptionParser
from collections import OrderedDict
import operator
import re
import sys
import os
import logging

class RapidIOChecklistMerger(object):
    def _read_checklists(self):
        self.merge = []
        self.headings = None
        for filename in self.checklists:
            curr_file = open(filename)
            lines = [line.strip() for line in curr_file.readlines()]
            curr_file.close()

            if self.headings is None:
                self.headings = lines[1]
            else:
                if not self.headings == lines[1]:
                    raise ValueError("File '%s' inconsistent format: '%s' '%s'"
                                     % (filename, self.headings, lines[1]))
            for line in lines[2:]:
                tokens = [re.sub("'", "", tok.strip()) for tok in line.split("', ")]
                self.merge.append(tokens)
        self.sorted_merge = sorted(self.merge, key=operator.itemgetter(3, 4, 5, 2))

    def __init__(self, checklists):
        self.checklists = checklists

        self._read_checklists()

    def print_checklist(self):
        if self.sorted_merge == []:
            print "Nothing in sorted checklist."

        print "Sentence, Type, Revision, Part, Chapter, Section, FileName, Table_Name, Checklist_ID"
        for item in self.sorted_merge:
            print "'" + "', '".join(item) + "'"

def create_parser():
    parser = OptionParser(description="Merge parsed checklist text files into a single checklist sorted by part, chapter, section, and revision")
    parser.add_option('-f', '--file',
            dest = 'checklist_filenames',
            action = 'append', type = 'string', default = [],
            help = 'Checklist file(s) created by parse_checklist.py',
            metavar = 'FILE')
    return parser

def validate_options(options):
    if not len(options.checklist_filenames):
        print "Must enter at least one checklist filename."
        sys.exit()

    for checklist in options.checklist_filenames:
        if not os.path.isfile(checklist):
            print "File '" + checklist +"' does not exist."
            sys.exit()

def main(argv = None):
    logging.basicConfig(level=logging.DEBUG)
    parser = create_parser()
    if argv is None:
        argv = sys.argv[1:]

    (options, argv) = parser.parse_args(argv)
    if len(argv) != 0:
        print 'Invalid argument!'
        print
        parser.print_help()
        return -1

    validate_options(options)

    merger = RapidIOChecklistMerger(options.checklist_filenames)
    merger.print_checklist()

if __name__ == '__main__':
    sys.exit(main())
