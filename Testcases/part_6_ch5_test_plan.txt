'Test ID', 'Specification Revision', 'Specification Section', 'Specification Feature', 'Requirement References', 'Test Checking Type', 'Test Implementation Details', 'Test Name', 'Test Status', 'Designer Comments'
'FL_1', '3.2', '5.19.2 Frame_Lock State Machine', 'Training status is correct for no training frames\n<more details about section number of spec and specification statements might be useful>', '', 'Directed test check/Functional coverage', 'Initialize the DUT and enable the port for training. Leave the TD inactive. Wait the period specified in the PortnLink Timer Control CSR, DME Training Completion Timer.\nSuccess:\nFor all lanes, LanenStatus1 CSR, bit 21 should be 1 (Training failed).\nFor all lanes, LanenStatus1 CSR, bit 22 should be 0 (Training did not complete).\nRepeat for all lanes, all ports.\nRepeat for all lanes but the one under test inactive.', '', '', ''
'FL_2', '3.2', '5.19.2 Frame_Lock State Machine', 'Training completes for good frames at any bit position\n<more details about section number of spec and specification statements might be useful>', '', 'Directed test check/Functional coverage', 'Reset the TD and the DUT; produce good training frames from the TD to permit training aligned to some bit position (p).  Permit training to  complete.  Wait the period specified in the PortnLink Timer Control CSR, DME Training Completion Timer.\nSuccess:\nFor all lanes, LanenStatus1 CSR, bit 21 should be 0 (Training did not fail).\nFor all lanes, LanenStatus1 CSR, bit 22 should be 1 (Training complete).\nSlip the TD frame alignment by any of 522 *8  1 possible bit positions (TD should be permitted to jump multiple bit positions or slip a single position forward or back, randomly, as long as all positions are tested). Repeat the training. (this could be a new simulation, power cycle the board, reset the device, or forced retraining via a degraded port). Regardless of the bit position chosen and the relation to the previous position, the DUT should be able to realign correctly.\nSuccess :\nFor all lanes, LanenStatus1 CSR, bit 21 should be 0 (Training did not fail).\nFor all lanes, LanenStatus1 CSR, bit 22 should be 1 (Training complete).', '', '', ''
'FL_3', '3.2', '5.19.2 Frame_Lock State Machine', 'Once locked, the frame lock during training is retained for 4 frame errors\n<more details about section number of spec and specification statements might be useful>', '', 'Directed test check/Functional coverage', '1. Reset the TD and the DUT; produce good training frames from the TD to permit training aligned to some bit position (p).\n2. Either poll the CSR to determine training has completed or probe the FSM to determine the bit position is locked (frame_lock = true).\n3. Send exactly 4 frames with corrupted markers. Do not change the starting position of the frames.\n4. Resume sending good frames.\n5. Allow training to complete normally.\nRepeat for all lanes; test the bad frames consecutively, or interspersed with good frames.\nSuccess :\nFor all lanes, LanenStatus1 CSR, bit 21 should be 0 (Training did not fail).\nFor all lanes, LanenStatus1 CSR, bit 22 should be 1 (Training complete).', '', '', ''
'FL_4', '3.2', '5.19.2 Frame_Lock State Machine', 'Once locked, 5 errors will cause the bit position to slip\n<more details about section number of spec and specification statements might be useful>', '', 'Directed test check/Functional coverage', '1. Reset the TD and the DUT; produce good training frames from the TD to permit training aligned to some bit position (p).\n2. Either poll the CSR to determine training has completed or probe the FSM to determine the bit position is locked (frame_lock = true).\n3. Send exactly 5 frames with corrupted markers. Do not change the starting position of the frames.\n4. Resume sending good frames.\n5. Allow training to complete normally.\nRepeat for all lanes; test the bad frames consecutively, or interspersed with good frames.\nSuccess :\nChecking the result here is tricky; for simulation you could simply watch the five bad frames arrive, and the FSM lose and regain lock, at the old bit position since the frame start point was not changed.\nFor a FPGA or ASIC, the only available CSR is for pass of fail for the training, overall. If the TD control is tight enough, you can end the good training sequence with the 5th error to produce a training failure; but if you allow enough good frames to enter after the fifth error, the DUT could finish retraining and report a training success.', '', '', ''
'FL_5a', '3.2', '5.19.2 Frame_Lock State Machine', 'two good markers in a row are needed to lock to a position; show a single good marker followed by bad wont work)\n<more details about section number of spec and specification statements might be useful>', '', 'Directed test check/Functional coverage', '1. Reset the TD and the DUT.\n2. Using a single bit position as the starting point, send one good frame with valid marker.\n3. Send at least one (but could be more) frames with corrupted markers.\n4. Repeat the pattern throughout training.\nSuccess :\nWith this pattern the Frame_Lock FSM should be unable to lock to any good position.\nFor the lane(s) under test , LanenStatus1 CSR, bit 21 should be 1 (Training did fail).\nFor all lanes, LanenStatus1 CSR, bit 22 should be 0 (Training did not complete).', '', '', ''
'FL_5b', '3.2', '5.19.2 Frame_Lock State Machine', 'two good markers in a row are needed to lock to a position; show two good markers followed by bad will complete training\n<more details about section number of spec and specification statements might be useful>', '', 'Directed test check/Functional coverage', '1. Reset the TD and the DUT.\n2. Using a single bit position as the starting point, send two good frames with valid marker. The two good frames must be consecutive.\n3. Send at least one (no more than four) frames with corrupted markers.\n4. Repeat the pattern throughout training.\nThis again is tricky. The Frame_Lock FSM should complete training, assuming that the implementation-dependent slip algorithm eventually starts at the beginning of the first of the two good frames. Certainly some implementations will eventually guarantee this but not all (the slip algorithm must be capable of eventually testing every possible bit position within a frame, but there would be nothing illegal in an implementation that always tested the correct position at the start of the second good frame, or one of the bad frames). In simulation the FSM can be watched and the timing adjusted to find a good starting position. For a FPGA or ASIC an understanding of the FSM implementation could be needed to adjust the input stream.\nSuccess :\nFor the lane(s) under test , LanenStatus1 CSR, bit 21 should be 0 (Training did fail).\nFor all lanes, LanenStatus1 CSR, bit 22 should be 1 (Training did not complete).', '', '', ''
'FL_6', '3.2', '5.19.2 Frame_Lock State Machine', 'After reset, a new frame lock is required.\n<more details about section number of spec and specification statements might be useful>', '', 'Directed test check/Functional coverage', '1. Reset the TD and the DUT; produce good training frames from the TD to permit training aligned to some bit position (p).\n2. Either poll the CSR to determine training has completed or, in simulation, probe the FSM to determine the bit position is locked (frame_lock = true).\n3. End training mode; check the CSR to determine training completed correctly. Send traffic and see it is accepted.\n4. Reset the DUT; allow training to begin, but withhold good training frames (not just a slip, send any frame pattern that should not complete frame lock).\nIn this case training should not complete successfully; the CSR will indicate that the training has failed.\nSuccess :\nFor all lanes, LanenStatus1 CSR, bit 21 should be 1 (Training failed).\nFor all lanes, LanenStatus1 CSR, bit 22 should be 0 (Training did not complete).\n1. To show that the DUT can be retrained after reset, reset the DUT again; send good training frames.\n2. Check the CSR and pass good data to verify that the frame relocked and training completed correctly.\nRepeat for all lanes; test the bad frames consecutively, or interspersed with good frames.\nSuccess :\nFor all lanes, LanenStatus1 CSR, bit 21 should be 0 (Training did not fail).\nFor all lanes, LanenStatus1 CSR, bit 22 should be 1 (Training complete).', '', '', ''
'FL_7', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify that disabled lanes do not indicate successful training', '', 'Directed test check/Functional coverage', 'Disable transmission and reception on lanes not under test.  Verify the following for those lanes: - Lane n Status 0 CSR "Receiver trained", "Receiver lane sync", "receiver ready" should be deasserted\n- Lane n Status 1 CSR "IDLE received", "IDLE Information Current" should be deasserted, "Training Type" is 0b000 (UNTRAINED)\n- Lane n Status 2 CSR "LP Receive lane ready", "LP Lane trained" should be deasserted', '', '', ''
'FL_8', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify correct behavior after reset', '', 'Directed test check/Functional coverage', '- After a port reset, the receivers at both ends of the link indicate loss of signal and loss of lane sync for 120 msec +/- 33%\n- Lane n Status 0 CSR "Receiver Trained", "receiver lane sync", "receiver lane ready" should be deasserted\n- Lane n Status 1 CSR "IDLE received" should be deasserted, "Training Type" is 0b000 (UNTRAINED)\n- Lane n Status 1 CSR "IDLE3 Loss of Signal" should be asserted', '', '', ''
'FL_9', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify short run code word training is attempted', '', 'Directed test check/Functional coverage', '- Once lane sync is achieved, if the DUT indicates that it supports short run code word training, and the BFM is configured to support short run code word training, both ends should execute code word training.\n- Lane n Status 1 CSR "Training Type" is 0b010 "CW_TRAIN"', '', '', ''
'FL_10', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify short run code word training is successful', '', 'Directed test check/Functional coverage', '- Codeword training ends successfully when the training timer has not expired, the lanes transmitter output enable is asserted, lane sync is asserted, lane trained is asserted, and from_sc_lane_trained is asserted.\n- Lane n Status 0 CSR "Receiver Trained", "Receiver lane sync", and "Receiver lane ready" are all asserted\n- Lane n Status 1 CSR "Training Type" is 0b100 "TRAINED"\n- Lane n Status 1 CSR "CW Training Completed" is asserted, "CW Training Failed" is deasserted.\n- Lane n Status 2 CSR "LP Receive Lane Ready", "LP Lane Trained" are asserted.', '', '', ''
'FL_11', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify short run code word timeout, if possible', '', 'Directed test check/Functional coverage', '- If possible, configure the DUT to timeout during code word training.  Verify that the DUT indicates code word training failure.\n- Lane n Status 0 CSR "Receiver Trained", "Receiver lane sync", and "Receiver lane ready" are all deasserted\n- Lane n Status 1 CSR "Training Type" is 0b000 "UNTRAINED"\n- Lane n Status 1 CSR "CW Training Completed" and "CW Training Failed" are asserted.\n- Lane n Status 2 CSR "LP Receive Lane Ready", "LP Lane Trained" are asserted.', '', '', ''
'FL_12', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify short run code word training begins again after reset', '', 'Directed test check/Functional coverage', '- Reset the DUT during code word training.  Verify that the DUT indicates code word training has started again without error..\n- Lane n Status 0 CSR "Receiver Trained", "Receiver lane sync", and "Receiver lane ready" are all deasserted\n- Lane n Status 1 CSR "Training Type" is 0b000 "UNTRAINED"\n- Lane n Status 1 CSR "CW Training Completed" and "CW Training Failed" are deasserted.\n- Lane n Status 2 CSR "LP Receive Lane Ready", "LP Lane Trained" are asserted.', '', '', ''
'FL_13', '3.2', '5.19.6 Lane Alignment State Machine', 'Verify correct behavior after reset', '', 'Directed test check/Functional coverage', 'Once reset is de-asserted, check the following register for the current state of the Lane Alignment state Machine, Port n Initialization Status CSRs - Bit 0-4,Lane Alignment and Lane n Status 2 CSRs - Bit 17-19, LP Receive width.\nFor initial 120 msec +/- 33%, the state machine should be in NOT_ALIGNED state.\nOnce in operating mode, the corresponding alignment state machine should be in ALIGNED state.', '', '', ''
'FL_14', '3.2', '5.19.6 Lane Alignment State Machine', 'Verify port width override operation', '', 'Directed test check/Functional coverage', 'Program the required operating width in Port n Control CSRs - Bit 5-7, Port Width Override.check the following register for the current state of the Lane Alignment state Machine, Port n Initialization Status CSRs - Bit 0-4,Lane Alignment and Lane n Status 2 CSRs - Bit 17-19, LP Receive width', '', '', ''
'FL_15', '3.2', '5.19.6 Lane Alignment State Machine', 'Verify correct reaction to high error rate', '', 'Directed test check/Functional coverage', 'For each of the alignment state machine in the DUT, after achieving lane alignment and N_lanes_aligned = 1, inject error into any active lanes and check state machine movement  to unaligned state.', '', '', ''
'FL_16', '3.2', '5.19.6 Lane Alignment State Machine', 'Verify correct reaction to low error rate', '', 'Directed test check/Functional coverage', 'For each of the alignment state machine in the DUT, after achieving lane alignment and N_lanes_aligned = 1, inject error intermittently into any active lanes and check state machine movement.', '', '', ''
'FL_17', '3.2', '5.19.6 Lane Alignment State Machine', 'Confirm port enable/disable operation.', '', 'Directed test check/Functional coverage', 'Enable the Port. Check the Port n Initialization Status CSRs - Bit 0-4,Lane Alignment  indicating Lane Alignment state.\nDisable the Port. Check the Port n Initialization Status CSRs - Bit 0-4,Lane Alignment indicating Unaligned condition', '', '', ''
'FL_18', '3.2', '5.19.6 Lane Alignment State Machine', 'Verify state machine can be reset at any time', '', 'Directed test check/Functional coverage', 'When Lane Alignment is going on, apply reset and check the state machine movement once reset is de-asserted.', '', '', ''
'FL_19', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm port enable/disable operation.', '', 'Directed test check/Functional coverage', '-          Verify that the lanes not under test do not indicate successful lane synchronization.\no Disable the Port. Check the following register bits.\n lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) are FALSE\n lane[n] Status 2 CSR bit[20-22] (LP Receive Lanes Ready) = 3b000.\n lane[n] Status 2 CSR bit[23] (LP Receive Lane Ready) = 1b0.\n lane[n] Status 2 CSR bit[24] (LP Lane Trained) = 1b0.\no Enable the Port. Check the following register bit is set indicating Lane Synchronization Status.\n lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) is TRUE', '', '', ''
'FL_20', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm reset operation.', '', 'Directed test check/Functional coverage', '-          After a port reset, the receivers at both ends of the link indicate loss of signal and loss of lane sync.\no Enable the lane[n] receiver. Check the following register bit is set indicating Lane Synchronization Status.\n lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) is TRUE', '', '', ''
'FL_21', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm correct state after reset.', '', 'Directed test check/Functional coverage', '-          After the port reset de-assertion, Verify the following signals for lane[n]\no codeword_lock[n], lane_sync[n], force_no_lock, from_sc_port_silence, from_sc_lane_silence, lane[n]_drvr_oe is de-asserted and Port Initialization State Machine is in SLNT state.', '', '', ''
'FL_22', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm correct state after reset.', '', 'Directed test check/Functional coverage', '-          After the port reset re-assertion, Verify the following signals for lane[n]\no The lane[n]_drvr_oe[n] = 1b1, codeword_lock = 1b0, and Lane_Synchronization state machine is in state NO_SYNC.\no DScounter is greater than 7, Lane_Synchronization state machine is in state SYNC and lane_sync[n] is asserted.', '', '', ''
'FL_23', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm lane synchronization success.', '', 'Directed test check/Functional coverage', '- Enable the Port. Check the following register bit is set indicating Lane Synchronization Status.\no lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) are TRUE\n- Disable the Port and check the following register bit\no lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) are FALSE\no lane[n] Status 0 CSR bit[24] (Lane_sync state change) = 1b1.', '', '', ''
'FL_24', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm lane synchronization faiure with high bit error rate.', '', 'Directed test check/Functional coverage', '-          Enable the Port. Check the following register bit is set indicating Lane Synchronization Status.\no lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) are TRUE\n- Inject error into the incoming data stream at the input of 64b/67b decoder.\no lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) are FALSE', '', '', ''
'LR_LTSM_1', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify that disabled lanes do not indicate successful training', '', 'Directed test check/Functional coverage', 'Disable transmission and reception on lanes not under test.  Verify the following for those lanes: - Lane n Status 0 CSR "Receiver trained", "Receiver lane sync", "receiver ready" should be deasserted\n- Lane n Status 1 CSR "IDLE received", "IDLE Information Current" should be deasserted, "Training Type" is 0b000 (UNTRAINED)\n- Lane n Status 2 CSR "LP Receive lane ready", "LP Lane trained" should be deasserted', '', '', ''
'LR_LTSM_2', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify correct behavior after reset', '', 'Directed test check/Functional coverage', '- After a port reset, the receivers at both ends of the link indicate loss of signal and loss of lane sync for 120 msec +/- 33%\n- Lane n Status 0 CSR "Receiver Trained", "receiver lane sync", "receiver lane ready" should be deasserted\n- Lane n Status 1 CSR "IDLE received" should be deasserted, "Training Type" is 0b000 (UNTRAINED)\n- Lane n Status 1 CSR "IDLE3 Loss of Signal" should be asserted', '', '', ''
'LR_LTSM_3', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify DME training support', '', 'Directed test check/Functional coverage', '- Once lane sync is achieved, if the BFM sends DME and the DUT supports DME training,  both ends should execute DME training.\n- Lane n Status 1 CSR "Training Type" is 0b0001 "DME_"', '', '', ''
'LR_LTSM_4', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify DME training timeout', '', 'Directed test check/Functional coverage', '- BFM has Port n Link Timers Control CSR DME Wait_Timer field set to 0 to continuously send DME training frames.\n- BFM never asserts "receive lane ready" (bit 23) in the Status/Control code word.\n- DUT DME training should timeout after the period programmed in the DME Training Completion Timer filed of the Port n Link Timers Control CSR\n- Lane n Status 1 CSR, IDLE 3 DME Training Completed and IDLE 3 DME Training Failed should both be asserted.', '', '', ''
'LR_LTSM_5', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify DME emphasis control timeout', '', 'Directed test check/Functional coverage', '- BFM has Port n Link Timers Control CSR DME Wait_Timer field set to 0 to continuously send DME training frames.\n- BFM never asserts "receive lane ready" (bit 23) in the Status/Control code word.\n- DUT has Port n Link Timers Control CSR Emphasis Command Timeout field set to 1\n- DUT issues a command to the BFM, and the BFM does not acknowledge.\n- DUT DME training should fail\n- Lane n Status 1 CSR, IDLE 3 DME Training Completed and IDLE 3 DME Training Failed should both be asserted.', '', '', ''
'LR_LTSM_6', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify DME framelock loss', '', 'Directed test check/Functional coverage', '- Insert bit errors which cause the DUT to lose frame lock on the lane under test\n- DUT DME training should fail\n- Lane n Status 1 CSR, IDLE 3 DME Training Completed and IDLE 3 DME Training Failed should both be asserted.', '', '', ''
'LR_LTSM_7', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify 2x downgrade', '', 'Directed test check/Functional coverage', '- Set the BFM to operate in 2x mode for a 4x port width, and the DUT to operate in 4x mode\n- Verify that for Lane 2 of the DUT port, Lane n Status 1 CSR, IDLE 3 DME Training Completed and IDLE 3 DME Training Failed should both be asserted.\n- Verify that the DUT trains in 2x mode', '', '', ''
'LR_LTSM_8', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify code word training is attempted', '', 'Directed test check/Functional coverage', '- Once lane sync is achieved, if the DUT indicates that it supports short run code word training, and the BFM is configured to support short run code word training, both ends should execute code word training.\n- Lane n Status 1 CSR "Training Type" is 0b010 "CW_TRAIN"', '', '', ''
'LR_LTSM_9', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify code word training is successful', '', 'Directed test check/Functional coverage', '- Codeword training ends successfully when the training timer has not expired, the lanes transmitter output enable is asserted, lane sync is asserted, lane trained is asserted, and from_sc_lane_trained is asserted.\n- Lane n Status 0 CSR "Receiver Trained", "Receiver lane sync", and "Receiver lane ready" are all asserted\n- Lane n Status 1 CSR "Training Type" is 0b100 "TRAINED"\n- Lane n Status 1 CSR "CW Training Completed" is asserted, "CW Training Failed" is deasserted.\n- Lane n Status 2 CSR "LP Receive Lane Ready", "LP Lane Trained" are asserted.', '', '', ''
'LR_LTSM_10', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify code word timeout, if possible', '', 'Directed test check/Functional coverage', '- If possible, configure the DUT to timeout during code word training.  Verify that the DUT indicates code word training failure.\n- Lane n Status 0 CSR "Receiver Trained", "Receiver lane sync", and "Receiver lane ready" are all deasserted\n- Lane n Status 1 CSR "Training Type" is 0b000 "UNTRAINED"\n- Lane n Status 1 CSR "CW Training Completed" and "CW Training Failed" are asserted.\n- Lane n Status 2 CSR "LP Receive Lane Ready", "LP Lane Trained" are asserted.', '', '', ''
'LR_LTSM_11', '3.2', '5.19.3.1 Long run Lane_Training state machine', 'Verify code word/DME  training begins again after reset', '', 'Directed test check/Functional coverage', '- Reset the DUT during code word/DME training.  Verify that the DUT indicates code word/DME  training has started again without error..\n- Lane n Status 0 CSR "Receiver Trained", "Receiver lane sync", and "Receiver lane ready" are all deasserted\n- Lane n Status 1 CSR "Training Type" is 0b000 "UNTRAINED"\n- Lane n Status 1 CSR "CW Training Completed" and "CW Training Failed" are deasserted.\n- Lane n Status 1 CSR, IDLE 3 DME Training Completed and IDLE 3 DME Training Failed are deasserted.\n- Lane n Status 2 CSR "LP Receive Lane Ready", "LP Lane Trained" are asserted.', '', '', ''
'SR_LTSM_1', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify that disabled lanes do not indicate successful training', '', 'Directed test check/Functional coverage', 'Disable transmission and reception on lanes not under test.  Verify the following for those lanes: - Lane n Status 0 CSR "Receiver trained", "Receiver lane sync", "receiver ready" should be deasserted\n- Lane n Status 1 CSR "IDLE received", "IDLE Information Current" should be deasserted, "Training Type" is 0b000 (UNTRAINED)\n- Lane n Status 2 CSR "LP Receive lane ready", "LP Lane trained" should be deasserted', '', '', ''
'SR_LTSM_2', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify correct behavior after reset', '', 'Directed test check/Functional coverage', '- After a port reset, the receivers at both ends of the link indicate loss of signal and loss of lane sync for 120 msec +/- 33%\n- Lane n Status 0 CSR "Receiver Trained", "receiver lane sync", "receiver lane ready" should be deasserted\n- Lane n Status 1 CSR "IDLE received" should be deasserted, "Training Type" is 0b000 (UNTRAINED)\n- Lane n Status 1 CSR "IDLE3 Loss of Signal" should be asserted', '', '', ''
'SR_LTSM_3', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify short run code word training is attempted', '', 'Directed test check/Functional coverage', '- Once lane sync is achieved, if the DUT indicates that it supports short run code word training, and the BFM is configured to support short run code word training, both ends should execute code word training.\n- Lane n Status 1 CSR "Training Type" is 0b010 "CW_TRAIN"', '', '', ''
'SR_LTSM_4', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify short run code word training is successful', '', 'Directed test check/Functional coverage', '- Codeword training ends successfully when the training timer has not expired, the lanes transmitter output enable is asserted, lane sync is asserted, lane trained is asserted, and from_sc_lane_trained is asserted.\n- Lane n Status 0 CSR "Receiver Trained", "Receiver lane sync", and "Receiver lane ready" are all asserted\n- Lane n Status 1 CSR "Training Type" is 0b100 "TRAINED"\n- Lane n Status 1 CSR "CW Training Completed" is asserted, "CW Training Failed" is deasserted.\n- Lane n Status 2 CSR "LP Receive Lane Ready", "LP Lane Trained" are asserted.', '', '', ''
'SR_LTSM_5', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify short run code word timeout, if possible', '', 'Directed test check/Functional coverage', '- If possible, configure the DUT to timeout during code word training.  Verify that the DUT indicates code word training failure.\n- Lane n Status 0 CSR "Receiver Trained", "Receiver lane sync", and "Receiver lane ready" are all deasserted\n- Lane n Status 1 CSR "Training Type" is 0b000 "UNTRAINED"\n- Lane n Status 1 CSR "CW Training Completed" and "CW Training Failed" are asserted.\n- Lane n Status 2 CSR "LP Receive Lane Ready", "LP Lane Trained" are asserted.', '', '', ''
'SR_LTSM_6', '3.2', '5.19.3.2 Short run Lane_Training state machine', 'Verify short run code word training begins again after reset', '', 'Directed test check/Functional coverage', '- Reset the DUT during code word training.  Verify that the DUT indicates code word training has started again without error..\n- Lane n Status 0 CSR "Receiver Trained", "Receiver lane sync", and "Receiver lane ready" are all deasserted\n- Lane n Status 1 CSR "Training Type" is 0b000 "UNTRAINED"\n- Lane n Status 1 CSR "CW Training Completed" and "CW Training Failed" are deasserted.\n- Lane n Status 2 CSR "LP Receive Lane Ready", "LP Lane Trained" are asserted.', '', '', ''
'CWLOCK_1', '3.2', '5.19.4 Codeword Lock State Machine', 'Verify minimum codeword lock interval', '', 'Directed test check/Functional coverage', '- Configure BFM to insert an error rate such that a maximum of 63 successful bit header transitions occur between errors\n- Confirm that the DUT cannot achieve frame lock by checking that the Lane n Status 0 CSR "Receiver Lane Sync" bit is deasserted.', '', '', ''
'CWLOCK_2', '3.2', '5.19.4 Codeword Lock State Machine', 'Verify frame lock alignment adjustments', '', 'Directed test check/Functional coverage', '- Start the BFM codeword sequence with random alignments.\n- Verify that the DUT does achieve frame lock by checking that the Lane n Status 0 CSR "Receiver Lane Sync" bit is asserted', '', '', ''
'CWLOCK_3', '3.2', '5.19.4 Codeword Lock State Machine', 'Verify frame lock state machine continuous operation', '', 'Directed test check/Functional coverage', '- Start the BFM codeword sequence with random alignments.\n- Verify that the DUT does achieve frame lock by checking that the Lane n Status 0 CSR "Receiver Lane Sync" bit is asserted\n- Insert a bit error rate which causes loss of frame lock. Verify by checking that the Lane n Status 0 CSR "Receiver Lane Sync" bit is deasserted, and the "Lane_sync state change" bit is asserted.\n- Remove the bit error rate, and verify that the DUT regains frame lock by checking that the Lane n Status 0 CSR "Receiver Lane Sync" bit is asserted\n- Use port width override settings to verify all 4 lanes of a 4x port.', '', '', ''
'LSSM_1', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm port enable/disable operation.', '', 'Directed test check/Functional coverage', '-          Verify that the lanes not under test do not indicate successful lane synchronization.\no Disable the Port. Check the following register bits.\n lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) are FALSE\n lane[n] Status 2 CSR bit[20-22] (LP Receive Lanes Ready) = 3b000.\n lane[n] Status 2 CSR bit[23] (LP Receive Lane Ready) = 1b0.\n lane[n] Status 2 CSR bit[24] (LP Lane Trained) = 1b0.\no Enable the Port. Check the following register bit is set indicating Lane Synchronization Status.\n lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) is TRUE', '', '', ''
'LSSM_2', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm reset operation.', '', 'Directed test check/Functional coverage', '-          After a port reset, the receivers at both ends of the link indicate loss of signal and loss of lane sync.\no Enable the lane[n] receiver. Check the following register bit is set indicating Lane Synchronization Status.\n lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) is TRUE', '', '', ''
'LSSM_3', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm correct state after reset.', '', 'Directed test check/Functional coverage', '-          After the port reset de-assertion, Verify the following signals for lane[n]\no codeword_lock[n], lane_sync[n], force_no_lock, from_sc_port_silence, from_sc_lane_silence, lane[n]_drvr_oe is de-asserted and Port Initialization State Machine is in SLNT state.', '', '', ''
'LSSM_4', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm correct state after reset.', '', 'Directed test check/Functional coverage', '-          After the port reset re-assertion, Verify the following signals for lane[n]\no The lane[n]_drvr_oe[n] = 1b1, codeword_lock = 1b0, and Lane_Synchronization state machine is in state NO_SYNC.\no DScounter is greater than 7, Lane_Synchronization state machine is in state SYNC and lane_sync[n] is asserted.', '', '', ''
'LSSM_5', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm lane synchronization success.', '', 'Directed test check/Functional coverage', '- Enable the Port. Check the following register bit is set indicating Lane Synchronization Status.\no lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) are TRUE\n- Disable the Port and check the following register bit\no lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) are FALSE\no lane[n] Status 0 CSR bit[24] (Lane_sync state change) = 1b1.', '', '', ''
'LSSM_6', '3.2', '5.19.5 Lane Synchronization State Machine', 'Confirm lane synchronization faiure with high bit error rate.', '', 'Directed test check/Functional coverage', '-          Enable the Port. Check the following register bit is set indicating Lane Synchronization Status.\no lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) are TRUE\n- Inject error into the incoming data stream at the input of 64b/67b decoder.\no lane[n] Status 0 CSR bit[18] (Receiver lane sync), bit[19] (Receiver lane sync) are FALSE', '', '', ''
'LASM_1', '3.2', '5.19.6 Lane Alignment State Machine', 'Verify correct behavior after reset', '', 'Directed test check/Functional coverage', 'Once reset is de-asserted, check the following register for the current state of the Lane Alignment state Machine, Port n Initialization Status CSRs - Bit 0-4,Lane Alignment and Lane n Status 2 CSRs - Bit 17-19, LP Receive width.\nFor initial 120 msec +/- 33%, the state machine should be in NOT_ALIGNED state.\nOnce in operating mode, the corresponding alignment state machine should be in ALIGNED state.', '', '', ''
'LASM_2', '3.2', '5.19.6 Lane Alignment State Machine', 'Verify port width override operation', '', 'Directed test check/Functional coverage', 'Program the required operating width in Port n Control CSRs - Bit 5-7, Port Width Override.check the following register for the current state of the Lane Alignment state Machine, Port n Initialization Status CSRs - Bit 0-4,Lane Alignment and Lane n Status 2 CSRs - Bit 17-19, LP Receive width', '', '', ''
'LASM_3', '3.2', '5.19.6 Lane Alignment State Machine', 'Verify correct reaction to high error rate', '', 'Directed test check/Functional coverage', 'For each of the alignment state machine in the DUT, after achieving lane alignment and N_lanes_aligned = 1, inject error into any active lanes and check state machine movement  to unaligned state.', '', '', ''
'LASM_4', '3.2', '5.19.6 Lane Alignment State Machine', 'Verify correct reaction to low error rate', '', 'Directed test check/Functional coverage', 'For each of the alignment state machine in the DUT, after achieving lane alignment and N_lanes_aligned = 1, inject error intermittently into any active lanes and check state machine movement.', '', '', ''
'LASM_5', '3.2', '5.19.6 Lane Alignment State Machine', 'Confirm port enable/disable operation.', '', 'Directed test check/Functional coverage', 'Enable the Port. Check the Port n Initialization Status CSRs - Bit 0-4,Lane Alignment  indicating Lane Alignment state.\nDisable the Port. Check the Port n Initialization Status CSRs - Bit 0-4,Lane Alignment indicating Unaligned condition', '', '', ''
'LASM_6', '3.2', '5.19.6 Lane Alignment State Machine', 'Verify state machine can be reset at any time', '', 'Directed test check/Functional coverage', 'When Lane Alignment is going on, apply reset and check the state machine movement once reset is de-asserted.', '', '', ''
'1X2XNX_1', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Verify reset behavior', '', 'Directed test check/Functional coverage', '- After successfully training the DUT port, reset the DUT (port)\n- Verify that the BFM sees all lanes silent for 120 +/- 40 usec\n- the Lane n Status 0 CSR Receiver Lane Sync bit is deasserted\n- Lane n Status 1 CSR "Training Type" is 0b000 "UNTRAINED"', '', '', ''
'1X2XNX_2', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Verify seek behavior, 1x', '', 'Directed test check/Functional coverage', '- Program the 4x/2x/1x DUT port to 1x mode\n- Verify that the BFM never achieves lane sync on lanes 1, 2 and 3\n- Verify that the DUT successfully initializes the port to 1x mode on lane 0\n- Program the 4x/2x/1x DUT port to 1x force lane R\n- Verify that the BFM never achieves lane sync on lane 3\n- Verify that the DUT successfully initializes the port to 1x mode on lane 2\n- Program the 4x/1x DUT port to 1x force lane R\n- Verify that the BFM never achieves lane sync on lanes 1 and 3\n- Verify that the DUT successfully initializes the port to 1x mode on lane 2', '', '', ''
'1X2XNX_3', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Verify seek behavior, 2x', '', 'Directed test check/Functional coverage', '- Program the 4x/2x/1x DUT port to 2x mode (disable 4x mode)\n- Verify that the BFM never achieves lane sync on lanes 2 and 3\n- Verify that the DUT successfully initializes the port to 2x mode', '', '', ''
'1X2XNX_4', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Verify seek behavior, 4x', '', 'Directed test check/Functional coverage', '- Program the 4x/2x/1x DUT port to 4x mode\n- Verify that the BFM achieves lane sync on lane 3 only after achieving lane sync on lanes 0, 1 or 2\n- Verify that the DUT and BFM successfully initialize the port to 4x mode', '', '', ''
'1X2XNX_5', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Discovery behavior, 4x', '', 'Directed test check/Functional coverage', '- Verify that the DUT can train as a 4x port', '', '', ''
'1X2XNX_6', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Discovery behavior, 4x downgrades to 2x', '', 'Directed test check/Functional coverage', '- Insert a high bit error rate on the BFM transmit lane 2\n- Verify that the DUT successfully trains the port to 2x mode\n- Insert a high bit error rate on BFM transmit lane 3\n- Verify that the DUT successfully trains the port to 2x mode\n- For each of the above tests, verify that\nO the link inializes only after the discovery timer must have expired.\nO the BFM does not receive an idle sequence on lane3 after the DUT port has trained', '', '', ''
'1X2XNX_7', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Discovery behavior, 4x downgrades to 1x', '', 'Directed test check/Functional coverage', '- Insert a high bit error rate on the BFM transmit lane 1\n- Verify that the DUT successfully trains the port to 1x mode\n- Disable 2x operation on the DUT\n- Insert a high bit error rate on each BFM transmit lane 1-3\n- Verify that the DUT successfully trains the port to 1x mode\n- Insert a high bit error rate on BFM transmit lane 0\n- Verify that the DUT successfully trains the port to 1x_laneR mode\n- For each of the above tests, verify that\nO the link inializes only after the discovery timer must have expired.\nO the BFM does not receive an idle sequence on lane 3 after the DUT port has trained', '', '', ''
'1X2XNX_8', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Discovery behavior, 1x recovery state in 4x 2x 1x', '', 'Directed test check/Functional coverage', '- Train DUT/BFM ports to operate as a 4x link\n- Insert a high bit error rate on the BFM transmit lane 1\n- Verify that the DUT successfully trains the port to 1x mode\n- Additionally insert a high bit error rate on BFM transmit lane 0\n- Verify that the DUT successfully trains the port to 1x_LaneR mode\n- Additionally insert a high bit error rate on BFM transmit lane 2\n- Verify that the DUT cannot train the port', '', '', ''
'1X2XNX_9', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Discovery behavior, 1x recovery state in 4x  1x', '', 'Directed test check/Functional coverage', '- Disable 2x operation on the DUT\n- Train DUT/BFM ports to operate as a 4x link\n- Insert a high bit error rate on the BFM transmit lane 3\n- Verify that the DUT successfully trains the port to 1x mode\n- Additionally insert a high bit error rate on BFM transmit lane 0\n- Verify that the DUT successfully trains the port to 1x_LaneR mode\n- Additionally insert a high bit error rate on BFM transmit lane 2\n- Verify that the DUT cannot train the port', '', '', ''
'1X2XNX_10', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Discovery behavior, 2x recovery state in 4x 2x 1x', '', 'Directed test check/Functional coverage', '- Train DUT/BFM ports to operate as a 4x link\n- Insert a high bit error rate on the BFM transmit lane 3\n- Verify that the DUT successfully trains the port to 2x mode\n- Additionally insert a high bit error rate on BFM transmit lane 0\n- Verify that the DUT successfully trains the port to 1x_LaneR mode\n- Remove the bit error rate on BFM transmit lane 0\n- Verify that Lane 0 trains successfully\n- Insert a high bit error rate on BFM transmit lane 1\n- Verify that the DUT trains the port that operate in 1x mode\n- Additionally insert a high bit error rate on BFM transmit lane 0\n- Verify that the DUT trains the port to operate in 1x_LaneR mode (lane 2)\n- Additionally insert a high bit error rate on BFM transmit lane 2\n- Verify that the DUT cannot train the port', '', '', ''
'1X2XNX_11', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Discovery behavior, 4x recovery state in 4x 2x 1x', '', 'Directed test check/Functional coverage', '- Train DUT/BFM ports to operate as a 4x link\n- Insert a high bit error rate on BFM transmit lane 3 for less that 62.5 msec\n- Verify that the DUT port remains trained as a 4x port', '', '', ''
'1X2XNX_12', '3.2', '5.19.7.1 1x/2x/Nx Initialization State Machine', 'Discovery behavior, 2x recovery state in 4x 2x 1x', '', 'Directed test check/Functional coverage', '- Train DUT/BFM ports to operate as a 4x link\n- Insert a high bit error rate on the BFM transmit lane 3\n- Verify that the DUT successfully trains the port to 2x mode\n- Configure the BFM to operate as a 1x port\n- Verify that the DUT successfully trains the port to 1x mode', '', '', ''
'RTWCSM_1', '3.2', '5.19.8 Retrain/Transmit_Width_Control State Machine', 'Verify reset behavior', '', 'Directed test check/Functional coverage', '- After successfully training the DUT port, assert a change receiver width command and then immediately reset the DUT (port)\n- Verify that the BFM sees all lanes silent for 120 +/- 40 usec\n- the Lane n Status 2 CSR LP change receiver width command field prior to the reset should have the new width in it.\n- After the reset, the Lane n Status 2 CSR  LP change receiver width command should have hold current receive width.', '', '', ''
'RTWCSM_2', '3.2', '5.19.8 Retrain/Transmit_Width_Control State Machine', 'Verify reset behavior', '', 'Directed test check/Functional coverage', '- After successfully training the DUT port, initiate retraining on one lane and then immediately reset the DUT (port)\n- Verify that the BFM sees all lanes silent for 120 +/- 40 usec\n- the Lane n Status 3 CSR LP retraining field is asserted prior to the reset.\n- the Lane n Status 3 CSR LP retraining field is deasserted after the reset.', '', '', ''
'RTWCSM_3', '3.2', '5.19.8 Retrain/Transmit_Width_Control State Machine', 'Verify grant for transmit width commands', '', 'Directed test check/Functional coverage', '- After successfully training the DUT port, assert a change receiver width command and then assert a retrain request.\n- The Lane n Status 2 CSR LP Change receiver width command field should indicate a port width change in progress.\n- The Lane n Status 3 CSR LP retrain grant field should be deasserted until the port width command is positively or negatively acknowledged.', '', '', ''
'RTWCSM_4', '3.2', '5.19.8 Retrain/Transmit_Width_Control State Machine', 'Verify grant for retrain commands', '', 'Directed test check/Functional coverage', '- After successfully training the DUT port,assert a retrain request and then assert a change receiver width command .\n- The Lane n Status 2 CSR LP Change receiver width command field should indicate a port width change is not in progress until retraining has been completed.\n- The Lane n Status 3 CSR LP retrain grant field should be asserted', '', '', ''
'RTWCSM_5', '3.2', '5.19.8 Retrain/Transmit_Width_Control State Machine', 'Verify timeout for transmit width commands', '', 'Directed test check/Functional coverage', '- After successfully training the DUT port, configure a short timeout for receiver width commands on the DUT.\n- assert a change receiver width command, and allow it to time out.\n- Verify that the receiver width command has timed out.\n- Reconfigure the receiver widht command timeout on the DUT to a longer period.\n- Assert a change receiver width command, and allow it to complete.', '', '', ''
'RTWCSM_6', '3.2', '5.19.8 Retrain/Transmit_Width_Control State Machine', 'Verify timeout for retraining commands', '', 'Directed test check/Functional coverage', '- After successfully training the DUT port, configure a short timeout for retraining requests on the DUT.\n- assert a retraining request, and allow it to time out.\n- Verify that the retraining request has timed out.\n- Reconfigure the retraining request  timeout on the DUT to a longer period.\n- Assert a retraining request, and allow it to complete.', '', '', ''
'TWCMDSM_1', '3.2', '5.19.9 Transmit Width Cmd State Machines', 'Initial command ack/nack status (Figure 5-35, XMT_WIDTH_CMD3 state).', '', 'Directed test check/Functional coverage', 'Initialize the DUT and the test device.  Do not transmit a Transmit Width Command into the link from the test device and do not request a link change from the port.  Wait for the configured command timeout period (without sending any commands..  Check status\nSuccess :\nPortnPower Management CSR bits 19-20 should be 0, indicating neither NACK or ACK status (Table 7-20).\nPortnPower Management CSR bits 24-25 should be 0, indicating no requests outstanding (Table 7-20).\nRepeat for all ports.', '', '', ''
'TWCMDSM_2', '3.2', '5.19.9 Transmit Width Cmd State Machines', 'bad_xmt_width_cmd  Asymmetric mode not supported  Link Partner Request', '', 'Directed test check/Functional coverage', 'This test is only valid for ports which are not supported for asymmetric transmission mode.\nInitialize the device. Request a partner transmit width change from the link partner, by writing to bits 21-23 of the PortNManagement CSR for the link partner. (The link partner must support asymmetric mode, though the device under test does not).\nSuccess:\nPort n Management CSR bits 0-4 should be 0, indicating asymmetric mode is not supported.\nPort n Management CSR bits 19-20 should be 2''b10, indicating that the command was rejected.', '', '', 'Note  Table 7-20 states a command to the DUT CSR to change port width to a disabled or unsupported width is implementation specific (any result is legal).'
'TWCMDSM_3', '3.2', '5.19.9 Transmit Width Cmd State Machines', 'bad_xmt_width_cmd  Asymmetric mode not enabled  Link Partner Request', '', 'Directed test check/Functional coverage', 'This test is only valid for ports which are supported for asymmetric transmission mode.\nInitialize the device. Disable am asymmetric mode by writing to the appropriate bits of bits 5-9 of Port nPowerManagement CSR. Request a partner transmit width change from the link partner to the disabled mode, by writing to bits 21-23 of the PortNManagement CSR for the link partner. (The link partner must support asymmetric mode, though the device under test does not).\nSuccess:\nPort n Management CSR bits 0-4 should be 0, indicating asymmetric mode is not supported.\nPort n Management CSR bits 19-20 should be 2''b10, indicating that the command was rejected.\nRepeat for all ports which support asymmetric mode, and repeat for all legal modes.', '', '', 'Note  Table 7-20 states a command to the DUT CSR to change port width to a disabled or unsupported width is implementation specific (any result is legal).'
'TWCMDSM_4', '3.2', '5.19.9 Transmit Width Cmd State Machines', 'good command  request via software', '', 'Directed test check/Functional coverage', 'This test is only valid for ports which are supported for asymmetric transmission mode.\nInitialize the device. Enable the asymmetric mode to be tested (Port n Power Management CSR), bits 5-9. Write to bits 16-18 of Port n Power Management CSR to request a transmit width change.\nSuccess:\nBits 19-20 of the Port n Power Management CSR should be 2''b01  The command has been ACKed and was considered legal\nBits 10-12 should reflect the change in width.\nThe link partner should show the correct receive width (bits 13-15 of the link partner''s Port N Power Management CSR).\nShow good traffic can pass between the ports following the change.\nRepeat for all legal asymmetric modes.\nRepeat for all ports which support asymmetric modes.', '', '', ''
'TWCMDSM_5', '3.2', '5.19.9 Transmit Width Cmd State Machines', 'good command  request via link partner', '', 'Directed test check/Functional coverage', 'This test is only valid for ports which are supported for asymmetric transmission mode.\nInitialize the device. Enable the asymmetric mode to be tested (Port n Power Management CSR), bits 5-9. Write to bits 21-23 of the link partner Port n Power Management CSR to request a transmit width change for the device under test.\nSuccess:\nBits 24-25 of the Link Partner''s Port n Power Management CSR should be 2''b00  The command has completed.\nBits 10-12of the Port n Power Management CSR for the DUT should reflect the change in width for the transmitter.\nThe link partner should show the correct receive width (bits 13-15 of the link partner''s Port N Power Management CSR).\nShow good traffic can pass between the ports following the change.\nRepeat for all legal asymmetric modes.\nRepeat for all ports which support asymmetric modes.', '', '', ''
'TWCMDSM_6', '3.2', '5.19.9 Transmit Width Cmd State Machines', 'PLSM_state = SILENT  Status is reset.', '', 'Directed test check/Functional coverage', 'Initiate a valid transmit width change command using the procedure in 5 or 6 above.  Before the command completes, reset the link partner port to return the DUT port to the silent state.  Check the Port N Power Management CSR to verify NACK and ACK are not asserted (bits 19-20).  Verify a subsequent legal (and illegal) mode change is handled correctly.\nRepeat for all ports.', '', '', ''
'TWSM_1', '3.2', '5.19.9.2 Transmit Width State Machine', 'Transmit command timeout  Change initiated locally', '', 'Directed test check/Functional coverage', 'Iniitalize the DUT and test device.  Enable matching asymmetric port modes on both devices for the port under test (Port n Power Management CSR, bits 5-9).  Make sure the desired mode is supported by checking Port n Power Management CSR, bits 0-4).\nAdjust the Transmit Width Command Timeout in the device under test for the desired port (Port n Link Timers Control 3 CSR, bits 0-7).\nIssue a legal transmit port width change using Port n Power Management CSR, bits 16-18. Do not permit the link partner to ack the request.\nSuccess :\nAfter waiting for the timeout period, the Status of my Transmit Width Change (bits 19-20) should be 2''b10 (NACK). The Transmit Width Status (bits 10-12) should revert to the symmetric port width and asymmetric mode should be off (AXE transition, figure 5-36).\nRepeat for all asymmetric enabled ports and legal widths\nRepeat for varying values of Transmit Width Command Timeout (from 1 to 250ms).\nBetween the request and the timeout, the rate of sc codeword sequences should not be less than one in every 256 codewords. (See 5.9.2)', '', '', ''
'TWSM_2', '3.2', '5.19.9.2 Transmit Width State Machine', 'Transmit command timeout,  Change initiated locally  Timer disabled.', '', 'Directed test check/Functional coverage', 'Iniitalize the DUT and test device.  Enable matching asymmetric port modes on both devices for the port under test (Port n Power Management CSR, bits 5-9).  Make sure the desired mode is supported by checking Port n Power Management CSR, bits 0-4).\nAdjust the Transmit Width Command Timeout in the device under test for the desired port to 0 (Port n Link Timers Control 3 CSR, bits 0-7). This will disable the timer.\nIssue a legal transmit port width change using Port n Power Management CSR, bits 16-18. Do not permit the link partner to ack the request until > 250ms have passed, which exceeds the normal timer maximum.\nSuccess :\nAfter waiting for the timeout period, the Status of my Transmit Width Change (bits 19-20) should be 2''b01 (ACK), indicating the change was processed and did not timeout. The Transmit Width Status (bits 10-12) should be changed to the new legal value.\nBetween the request and the timeout, the rate of sc codeword sequences should not be less than one in every 256 codewords. (See 5.9.2)\nRepeat for all asymmetric enabled ports and legal widths', '', '', ''
'TWSM_3', '3.2', '5.19.9.2 Transmit Width State Machine', 'Transmit command timeout _ Command initiated by link partner', '', 'Directed test check/Functional coverage', 'Iniitalize the DUT and test device.  Enable matching asymmetric port modes on both devices for the port under test (Port n Power Management CSR, bits 5-9).  Make sure the desired mode is supported by checking Port n Power Management CSR, bits 0-4).\nAdjust the Transmit Width Command Timeout in the device under test for the desired port (Port n Link Timers Control 3 CSR, bits 0-7).\nIssue a legal transmit port width change using Port n Power Management CSR, bits 16-18. Do not permit the link partner to ack the request.\nSuccess :\nAfter waiting for the timeout period, the Status of Link Partner Transmit Width Change in the link partner (bits 19-20) should be 2''b10 (NACK). The Transmit Width Status in the DUT should (bits 10-12) should be unchanged, as should the receiver width status (bit 13-15) in the link partner.\nRepeat for all asymmetric enabled ports and legal widths\nRepeat for varying values of Transmit Width Command Timeout (from 1 to 250ms).\nEnsure user data flows properly following the transition.', '', '', ''
'TWSM_4', '3.2', '5.19.9.2 Transmit Width State Machine', 'Transmit command timeout, Command initiated by link partner  Timer disabled.', '', 'Directed test check/Functional coverage', 'Iniitalize the DUT and test device.  Enable matching asymmetric port modes on both devices for the port under test (Port n Power Management CSR, bits 5-9).  Make sure the desired mode is supported by checking Port n Power Management CSR, bits 0-4).\nAdjust the Transmit Width Command Timeout in the device under test for the desired port to 0 (Port n Link Timers Control 3 CSR, bits 0-7). This will disable the timer.\nIssue a legal transmit port width change using Port n Power Management CSR, bits 21-23. After the DUT transmit cmd width state machine validates the command and begins the switch, do not permit the link partner to ack the request until > 250ms have passed, which exceeds the normal timer maximum.\nSuccess :\nAfter waiting for the timeout period, the Status of Link Partner Transmit Width Change (bits 24-25) should be 2''b01 (ACK), in the link partner, indicating the change was processed and did not timeout. The Transmit Width Status (bits 10-12) in the DUT should be changed to the new legal value.\nRepeat for all asymmetric enabled ports and legal widths', '', '', ''
'TWSM_5', '3.2', '5.19.9.2 Transmit Width State Machine', 'Legal Transition from symmetric mode to asymmetric mode  initiated in CSR', '', 'Directed test check/Functional coverage', 'Iniitalize the DUT and test device.  Enable matching asymmetric port modes on both devices for the port under test (Port n Power Management CSR, bits 5-9).  Make sure the desired mode is supported by checking Port n Power Management CSR, bits 0-4).\nIssue a legal transmit port width change using Port n Power Management CSR, bits16-18. Allow the link partner to process and change its receive width\nSuccess :\nThe Status ofMy Transmit Width Change (bits 19-20) should be 2''b01 (ACK),indicating the change was processed and did not timeout. The Transmit Width Status (bits 10-12) in the DUT should be changed to the new legal value. The other unused transmit lanes should be off.\nRepeat for other permitted widths (return to symmetric mode and then change to 1x/2x/4x/8x/16x, if those modes are legal and non-symmetric).\nBetween the request and the success of the mode switch, the rate of sc codeword sequences should not be less than one in every 256 codewords. (See 5.9.2)', '', '', 'This can cover any transition from a starting 1x/2x/8x/16x state to any other state, if all are legal.'
'TWSM_6', '3.2', '5.19.9.2 Transmit Width State Machine', 'Legal Transition from symmetric mode to asymmetric mode  initiated by link partner', '', 'Directed test check/Functional coverage', 'Initialize the DUT and test device.  Enable matching asymmetric port modes on both devices for the port under test (Port n Power Management CSR, bits 5-9).  Make sure the desired mode is supported by checking Port n Power Management CSR, bits 0-4).\nIssue a legal transmit port width change using Port n Power Management CSR in the link partner, bits 21-23. Allow the link partner to process and change its receive width\nSuccess :\nThe Status of Link PartnerTransmit Width Change (bits 24-25) in the link partner should be 2''b01 (ACK),indicating the change was processed and did not timeout. The Transmit Width Status (bits 10-12) in the DUT should be changed to the new legal value. The other unused transmit lanes should be off.\nRepeat for other permitted widths (return to symmetric mode and then change to 1x/2x/4x/8x/16x, if those modes are legal and non-symmetric).\nEnsure user data flows properly following the transition.', '', '', 'This can cover any transition from a starting 1x/2x/8x/16x state to any other state, if all are legal.'
'TWSM_7', '3.2', '5.19.9.2 Transmit Width State Machine', 'Legal Transition from asymmetric mode to asymmetric or symmetric mode  initiated in CSR', '', 'Directed test check/Functional coverage', 'Initialize the DUT and test device.  Enable matching asymmetric port modes on both devices for the port under test (Port n Power Management CSR, bits 5-9).  Make sure the desired mode is supported by checking Port n Power Management CSR, bits 0-4).\nIssue a legal transmit port width change using Port n Power Management CSR, bits16-18. Allow the link partner to process and change its receive width.\nCheck the status of the change in the Port n Power Management CSR to ensure the transition moved smoothly.\nFrom this asymmetric mode, move to another, legal, width (symmetric or asymmetric) using the procedure above.\nSuccess :\nThe Status of My Transmit Width Change (bits 19-20) should be 2''b01 (ACK),indicating the change was processed and did not timeout. The Transmit Width Status (bits 10-12) in the DUT should be changed to the new legal value. The other unused transmit lanes should be off.\nRepeat for other asymmetric to asymmetric transitions.\nEnsure user data flows properly following the transition.', '', '', 'This can cover any transition from a starting 1x/2x/8x/16x state to any other state, if all are legal.'
'TWSM_8', '3.2', '5.19.9.2 Transmit Width State Machine', 'Legal Transition from asymmetric mode to asymmetric or symmetric mode  initiated by link partner', '', 'Directed test check/Functional coverage', 'Initialize the DUT and test device.  Enable matching asymmetric port modes on both devices for the port under test (Port n Power Management CSR, bits 5-9).  Make sure the desired mode is supported by checking Port n Power Management CSR, bits 0-4).\nIssue a legal transmit port width change using Port n Power Management CSR in the link partner, bits 21-23. Allow the link partner to process and change its receive width\nCheck the status of the transition.\nUsing the procedure above, move to a different asymmetric width.\nSuccess :\nThe Status of Link PartnerTransmit Width Change (bits 24-25) in the link partner should be 2''b01 (ACK),indicating the change was processed and did not timeout. The Transmit Width Status (bits 10-12) in the DUT should be changed to the new legal value. The other unused transmit lanes should be off.\nRepeat for other asymmetric to asymmetric transitions.\nEnsure user data flows properly following the transition.\nBetween the request and the success of the mode switch, the rate of sc codeword sequences should not be less than one in every 256 codewords. (See 5.9.2)', '', '', 'This can cover any transition from a starting 1x/2x/8x/16x state to any other state, if all are legal.'
'TWSM_9', '3.2', '5.19.9.2 Transmit Width State Machine', 'Non-corruption or loss of user data.', '', 'Directed test check/Functional coverage', 'In the above tests 5-8, repeat each test while flowing user data to the transmit port undergoing the width change.\nSuccess:\nThe port width status should show successful transitions as described above. In addition, the user data should arrive after the transition without corruption (the FSM shuts down user data transmission before the width switch, and resumes it after).\nBetween the request and the success of the mode switch, the rate of sc codeword sequences should not be less than one in every 256 codewords. (See 5.9.2)', '', '', ''
'RWCMDSM_1', '3.2', '5.19.10.1 Receive_Width_Cmd State Machine', 'Asymmetric mode not enabled', '', 'Directed test check/Functional coverage', 'Bits 5-9 =0 in Port n Management CSR indicating asymmetric mode is not enabled.\nSuccess:\nBits 13-15 =0 in Port n Management CSR bits indicating Receiver Width Status as none', '', '', ''
'RWCMDSM_2', '3.2', '5.19.10.1 Receive_Width_Cmd State Machine', 'Asymmetric mode succesfully changed', '', 'Directed test check/Functional coverage', 'Repeat the below for all implemented link widths\n In Port n Management CSR program bits 5-9 to enable a particular link width.\nFrom link partner, request to change to the enabled link width is received.\nSuccess:\nBits 13-15 in Port n Management CSR bits indicates change to requested link width\nAll packet transactions between the ports is succesful.', '', '', ''
'RWCMDSM_4', '3.2', '5.19.10.1 Receive_Width_Cmd State Machine', 'Asymmetric mode not  changed', '', 'Directed test check/Functional coverage', 'Repeat the below for all implemented link widths\n In Port n Management CSR program bits 5-9 to enable a particular link width.\nFrom link partner, request to change to  a link width which is not enabled is received.\nSuccess:\nBits 13-15 in Port n Management CSR bits indicates previous working link width\nAll packet transactions between the ports is succesful with the previous working link width.', '', '', ''
'RWCMDSM_5', '3.2', '5.19.10.1 Receive_Width_Cmd State Machine', 'Asymmetric mode not  changed', '', 'Directed test check/Functional coverage', 'Bits 5-9 =0 in Port n Management CSR indicating asymmetric mode is not enabled\nFrom link partner, request to change to  a link width is received\nSuccess:\nBits 13-15 in Port n Management CSR bits indicates previous working link width\nAll packet transactions between the ports is succesful with the previous working link width.', '', '', ''
'RWCMDSM_6', '3.2', '5.19.10.1 Receive_Width_Cmd State Machine', 'Reset during Asymmetric mode change', '', 'Directed test check/Functional coverage', 'In Port n Management CSR program bits 5-9 to enable a particular link width.\nFrom link partner, request to change to the enabled link width is received.\nBefore link width change is completed, reset link partner to move to silent state.\nSubsequent valid link width change request and packet transactions should be succesful .', '', '', ''
