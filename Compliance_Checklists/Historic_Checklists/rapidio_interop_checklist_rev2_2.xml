<?xml version="1.0" encoding="ISO-8859-1" ?>
<!-- Created from PDF via Acrobat SaveAsXML -->
<!-- Mapping Table version: 28-February-2003 -->
<TaggedPDF-doc>
<?xpacket begin='&#65279;' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?xpacket begin="&#65279;" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/">
         <xmp:ModifyDate>2018-01-31T21:24:25-05:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-01-31T21:24:08-05:00</xmp:CreateDate>
         <xmp:MetadataDate>2018-01-31T21:24:25-05:00</xmp:MetadataDate>
         <xmp:CreatorTool>Acrobat PDFMaker 10.1 for Excel</xmp:CreatorTool>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/">
         <xmpMM:DocumentID>uuid:308f6c45-341d-43dd-8c33-f08746176421</xmpMM:DocumentID>
         <xmpMM:InstanceID>uuid:276a9f4e-f92e-4852-9584-8033f38a4dd7</xmpMM:InstanceID>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>xml</dc:format>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Bryan Ramirez</rdf:li>
            </rdf:Seq>
         </dc:creator>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF Library 10.0</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <pdfx:Company>Xilinx Inc,</pdfx:Company>
         <pdfx:_AdHocReviewCycleID>2082451610</pdfx:_AdHocReviewCycleID>
         <pdfx:_NewReviewCycle/>
         <pdfx:_EmailSubject>Updated part 6 checklist</pdfx:_EmailSubject>
         <pdfx:_AuthorEmail>RA8719@freescale.com</pdfx:_AuthorEmail>
         <pdfx:_AuthorEmailDisplayName>Sullivan Marie-RA8719</pdfx:_AuthorEmailDisplayName>
         <pdfx:_ReviewingToolsShownOnce/>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>
<?xpacket end='r'?>
<bookmark-tree>
<bookmark title="Chap. 1">
<destination structID="LinkTarget_7107"/>
</bookmark>
<bookmark title="Chap. 2">
<destination structID="LinkTarget_6792"/>
</bookmark>
<bookmark title="Chap. 3">
<destination structID="LinkTarget_6755"/>
</bookmark>
<bookmark title="Chap. 4">
<destination structID="LinkTarget_6190"/>
</bookmark>
<bookmark title="Chap. 5">
<destination structID="LinkTarget_4158"/>
</bookmark>
<bookmark title="Chap. 6">
<destination structID="LinkTarget_2083"/>
</bookmark>
<bookmark title="Chap. 7">
<destination structID="LinkTarget_864"/>
</bookmark>
<bookmark title="Chap. 8">
<destination structID="LinkTarget_736"/>
</bookmark>
<bookmark title="Chap. 9">
<destination structID="LinkTarget_634"/>
</bookmark>
<bookmark title="Chap. 10">
<destination structID="LinkTarget_618"/>
</bookmark>
</bookmark-tree>

<Workbook>
<Worksheet>
<Table>
<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR>
<TD>RapidIO</TD>
</TR>

<TR>
<TD>Interconnect Specification</TD>
</TR>

<TR>
<TD>Device Compliance Checklists</TD>
</TR>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR>
<TD/>

<TD/>

<TD/>

<TD/>

<TD/>

<TD/>

<TD/>

<TD/>

<TD id="LinkTarget_7107">Rev. X.Y.Z MM/20YY</TD>
</TR>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR>
<TD>Revision History</TD>
</TR>

<TR/>

<TR>
<TD>Revision</TD>

<TD>Description</TD>

<TD>Date</TD>
</TR>

<TR>
<TD>1.0</TD>

<TD>First release</TD>

<TD>MM/DD/YYYY</TD>
</TR>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR>
<TD>Chapter 1 Overview</TD>
</TR>

<TR/>

<TR>
<TD>Introduction</TD>
</TR>

<TR>
<TD>The document contains the device compliance checklists adhering to Part 6: LP-Serial Physical Layer Specification of the RapidIO Interconnect Specification revision 2.2.1. If an inconsistency exists between the specifications and the checklists defined by this document, the specifications take precedence.</TD>
</TR>

<TR/>

<TR/>

<TR/>

<TR/>

<TR/>

<TR>
<TD>References</TD>
</TR>

<TR>
<TD>&#8226;         Part 6: LP-Serial Physical Layer Specification, Revision 2.2.1, MM/YYYY</TD>
</TR>
</Table>

<TextBox>
<P>NO WARRANTY.THE RAPIDIO TRADE ASSOCIATION PUBLISHES THE SPECIFICATION &#8220;AS IS&#8221;. THE RAPIDIO TRADE ASSOCIATION MAKES NO WARRANTY, REPRESENTATION OR COVENANT, EXPRESS OR IMPLIED, OF ANY KIND CONCERNING THE SPECIFICATION, INCLUDING, WITHOUT LIMITATION, NO WARRANTY OF NON INFRINGEMENT, NO WARRANTY OF MERCHANTABILITY AND NO WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE. USER AGREES TO ASSUME ALL OF THE RISKS ASSOCIATED WITH ANY USE WHATSOEVER OF THE SPECIFICATION. WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, USER IS RESPONSIBLE FOR SECURING ANY INTELLECTUAL PROPERTY LICENSES OR RIGHTS WHICH MAY BE NECESSARY TO IMPLEMENT OR BUILD PRODUCTS COMPLYING WITH OR MAKING ANY OTHER SUCH USE OF THE SPECIFICATION. </P>

<P>  </P>

<P>DISCLAIMER OF LIABILITY. THE RAPIDIO TRADE ASSOCIATION SHALL NOT BE LIABLE OR RESPONSIBLE FOR ACTUAL, INDIRECT, SPECIAL, INCIDENTAL, EXEMPLARY OR CONSEQUENTIAL DAMAGES (INCLUDING, WITHOUT LIMITATION,  LOST PROFITS) RESULTING FROM USE OR INABILITY TO USE THE SPECIFICATION, ARISING FROM ANY CAUSE OF ACTION </P>

<P>WHATSOEVER, INCLUDING, WHETHER IN CONTRACT, WARRANTY, STRICT LIABILITY, OR NEGLIGENCE, EVEN IF THE RAPIDIO TRADE ASSOCIATION HAS BEEN NOTIFIED OF THE POSSIBILITY OF SUCH DAMAGES. </P>

<P>  </P>

<P>Questions regarding the RapidIO Trade Association, specifications, or membership should be forwarded to: </P>

<P>Suite 325, 3925 W. Braker Lane </P>

<P>Austin, TX 78759 </P>

<P>512-305-0070 Tel. </P>

<P>512-305-0009 FAX. </P>

<P> </P>

<P>RapidIO and the RapidIO logo are trademarks and service marks of the RapidIO Trade Association. </P>
</TextBox>
</Worksheet>

<Worksheet>
<Table>
<TR>
<TD id="LinkTarget_6792">Item #</TD>

<TD>Compliance Item</TD>

<TD>Specification Reference</TD>

<TD>Optional</TD>

<TD>Interop Item</TD>
</TR>

<TR>
<TD>2</TD>

<TD>Packets</TD>

<TD>Part 6, Chap. 2</TD>
</TR>

<TR>
<TD>2.2</TD>

<TD>Packet Field Definitions</TD>

<TD>Part 6, Sec. 2.2</TD>
</TR>

<TR>
<TD>2.2A</TD>

<TD>A sRIO packet should have all required field as specified in Part 6 sec 2.2 Table 2-1.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>2.2B</TD>

<TD>Acknowledge ID (ackID) is the packet identifier for link level packet acknowledgment. When the short control symbol is being used, the ackID value shall be 5 bits long and shall be left justified in the ackID field (ackID[0-4]) with the right most bit of the field (ackID[5]) set to 0b0. When the long control symbol is being used, the ackID value shall be 6 bits long which fills the ackID field.</TD>
</TR>

<TR>
<TD>2.2C</TD>

<TD>If VC=0 and Critical Request Flow is not supported, the CRF bit is reserved.</TD>
</TR>

<TR>
<TD>2.2D</TD>

<TD>The usage of VC, PRIO and CRF fields in a packet shall follow Part 6, Table 2-2.</TD>
</TR>

<TR>
<TD>2.3</TD>

<TD>Packet Format </TD>

<TD>Part 6, Sec. 2.3</TD>
</TR>

<TR>
<TD>2.3A</TD>

<TD>the physical layer ackID, VC, CRF, and prio fields are prefixed at the beginning of the packet and a 16-bit CRC field is appended to the end of the packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>2.3B</TD>

<TD>Packet format shall follow Part 6, Figure 2-1.</TD>
</TR>

<TR>
<TD>2.3C</TD>

<TD>LP-Serial packets shall have a length that is an integer multiple of 32 bits.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>2.3D</TD>

<TD>If the length of a packet is an odd multiple of 16 bits, a 16-bit pad whose value is 0 (0x0000) shall be appended at the end of the packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>2.4</TD>

<TD>Packet Protection</TD>

<TD>Part 6, Sec. 2.4</TD>
</TR>

<TR>
<TD>2.4A</TD>

<TD>The 16-bit CRC covers the entire packet except for the ackID field, which is considered to be zero for the CRC calculations.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>2.4.1A</TD>

<TD>For a packet whose length, exclusive of CRC, is 80 bytes or less, a single CRC is appended at the end of the logical fields.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>2.4.1B</TD>

<TD>For packets whose length, exclusive of CRC, is greater than 80 bytes, a CRC is added after the first 80 bytes and a second CRC is appended at the end of the logical layer fields.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>2.4.1C</TD>

<TD>The second CRC value is a continuation of the first. The first CRC is included in the running calculation, meaning that the running CRC value is not re-initialized after it is inserted after the first 80 bytes of the packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>2.4.1D</TD>

<TD>If the CRC appended to the end of the logical layer fields does not cause the end of the resulting packet to align to a 32-bit boundary, a two byte pad of all logic 0s is postpended to the packet.</TD>
</TR>

<TR>
<TD>2.4.2</TD>

<TD>CRC-16 Code</TD>

<TD>Part 6, Sec. 2.4.2</TD>
</TR>

<TR>
<TD>2.4.2A</TD>

<TD>The ITU polynomial X16+X12+X5+1 shall be used to generate the 16-bit CRC for packets.</TD>
</TR>

<TR>
<TD>2.4.2B</TD>

<TD>The value of the CRC shall be initialized to 0xFFFF (all logic 1s) at the beginning of each packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>2.5</TD>

<TD>Maximum Packet Size</TD>

<TD>Part 6, Sec. 2.5</TD>
</TR>

<TR>
<TD>2.5A</TD>

<TD>The maximum transmitted packet size permitted by the LP-Serial specification is 276 bytes.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>
</Table>
</Worksheet>

<Worksheet>
<Table>
<TR>
<TD id="LinkTarget_6755">Item #</TD>

<TD>Compliance Item</TD>

<TD>Specification Reference</TD>

<TD>Optional</TD>

<TD>Interop Item</TD>
</TR>

<TR>
<TD>3</TD>

<TD>Control Symbols</TD>

<TD>Part 6, Chap. 3</TD>
</TR>

<TR>
<TD>3.1</TD>

<TD>Introduction</TD>

<TD>Part 6, Sec. 3.1</TD>
</TR>

<TR>
<TD>3.1A</TD>

<TD>For forward compatibility, a control symbol function received by a port with an encoding in one or more of the fields assigned to the function that the port does not understand or support shall be handled as follows. If an encoding that the port does not understand or support occurs in a functional field, the control symbol function shall be ignored. If an encoding that the port does not understand or support occurs only in an informational field, the control symbol function shall be executed. In either case, no error shall be reported.</TD>

<TD>Part 6, Sec. 3.1</TD>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.2</TD>

<TD>Control Symbol Field Definitions</TD>
</TR>

<TR>
<TD>3.2A</TD>

<TD>Control symbol fields shall be implemented as defined in Part 6, Table 3-1.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.3</TD>

<TD>Control Symbol Format</TD>

<TD>Part 6, Sec. 3.3</TD>
</TR>

<TR>
<TD>3.3A</TD>

<TD>Short control symbols shall have the 24 data bit format shown in Part 6, Figure 3-1.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.3B</TD>

<TD>All long control symbols shall have the 48 data bit format shown in Part 6, Figure 3-2.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.3C</TD>

<TD>The receiver shall support control symbols with  two functions so that a packet acknowledgment and a packet delimiter can be carried in the same control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.4</TD>

<TD>Stype0 Control Symbols</TD>

<TD>Part 6, Sec. 3.4</TD>
</TR>

<TR>
<TD>3.4A</TD>

<TD>The encoding and function of stype0 and the information carried in parameter0 and parameter1 for each stype0 encoding shall be as specified in Part 6, Table 3-2.</TD>
</TR>

<TR>
<TD>3.4B</TD>

<TD>&#8220;Status&#8221; (0b100) is the default stype0 encoding and is used when a control symbol does not convey another stype0 function.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.4C</TD>

<TD>Stype0 parameter shall be implemented as defined in Part 6, Table 3-3.</TD>
</TR>

<TR>
<TD>3.4D</TD>

<TD>ackID_status parameter indicates the value of the ackID field expected in the next packet the port receives. This value is 1 greater than the ackID of the last packet accepted by the port exclusive of CT mode packets accepted after the port entered an Input-stopped state.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.4E</TD>

<TD>The value of the buf_status field in a packet-accepted control symbol is inclusive of the receive buffer consumption of the packet being accepted.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.4F</TD>

<TD>For short control symbols, buf_status=0-30 indicates the number of maximum sized packet buffers the port has available for reception on the specified VC. Buf_statuss=31 indicates the port has an undefined number of maximum sized packet buffers available for packet reception, and relies on retry for flow control.</TD>
</TR>

<TR>
<TD>3.4G</TD>

<TD>For long control symbols, buf_status=0-62 indicates the number of maximum sized packet buffers the port has available for reception on the specified VC. Buf_statuss=63 indicates the port has an undefined number of maximum sized packet buffers available for packet reception, and relies on retry for flow control.</TD>
</TR>

<TR>
<TD>3.4.1</TD>

<TD>Packet-Accepted Control Symbol</TD>

<TD>Part 6, Sec. 3.4.1</TD>
</TR>

<TR>
<TD>3.4.1A</TD>

<TD>The packet-accepted control symbol formats shall follow Part 6, Figure 3-3.</TD>
</TR>

<TR>
<TD>3.4.1B</TD>

<TD>The packet-accepted control symbol indicates that the port sending the control symbol has taken responsibility for sending the packet to its final destination and that resources allocated to the packet by the port receiving the control symbol can be released.</TD>
</TR>

<TR>
<TD>3.4.1C</TD>

<TD>The packet-accepted control symbol shall be generated only after the entire packet has been received and found to be free of detectable errors.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.4.1D</TD>

<TD>The port receiving the packet-accepted control symbol must reassociate the ackID in the packet_ackID field with the VC of the accepted packet to determine the VC to which the buf_status applies.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.4.2</TD>

<TD>Packet-Retry Control Symbol</TD>

<TD>Part 6, Sec. 3.4.2</TD>
</TR>

<TR>
<TD>3.4.2A</TD>

<TD>The packet-retry control symbol format shall follow Part 6, Figure 3-4</TD>
</TR>

<TR>
<TD>3.4.2B</TD>

<TD>A packet-retry control symbol indicates that the port sending the control symbol was not able to accept the packet due to some temporary resource conflict such as insufficient buffering and the packet must be retransmitted.</TD>
</TR>

<TR>
<TD>3.4.2C</TD>

<TD>The packet-retry control symbol is only used in singleVC mode for compatibility with Rev. 1.x RapidIO devices. Packet retry is replaced with error recovery when multiple VCs are active.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.4.3</TD>

<TD>Packet-Not-Accepted Control Symbol</TD>

<TD>Part 6, Sec. 3.4.3</TD>
</TR>

<TR>
<TD>3.4.3A</TD>

<TD>The packet-not-accepted control symbol format shall follow Part 6, Figure 3-5.</TD>
</TR>

<TR>
<TD>3.4.3B</TD>

<TD>The packet-not-accepted control symbol indicates that the port sending the control symbol has either detected an error in the received character stream or, when operating in multiple VC mode, has insufficient buffer resources and as a result may have rejected a packet or control symbol.</TD>
</TR>

<TR>
<TD>3.4.3C</TD>

<TD>The packet-not-accepted control symbol cause field shall be encoded as specified in Table 3-4 of Part 6.  If the port issuing the control symbol is not able to specify the fault, or the fault is not one of those listed in the table, the general error encoding shall be used.</TD>
</TR>

<TR>
<TD>3.4.4</TD>

<TD>Status Control Symbol</TD>

<TD>Part 6, Sec. 3.4.4</TD>
</TR>

<TR>
<TD>3.4.4A</TD>

<TD>The status control symbol format shall follow Part 6, Figure 3-6.</TD>
</TR>

<TR>
<TD>3.4.4B</TD>

<TD>The status control symbol indicates receive status information (ackID_status and buf_status)  about the port sending the control symbol.</TD>
</TR>

<TR>
<TD>3.4.5</TD>

<TD>VC-Status Control Symbol</TD>

<TD>Part 6, Sec. 3.4.5</TD>
</TR>

<TR>
<TD>3.4.5A</TD>

<TD>The VC-status control symbol format shall follow Part 6, Figure 3-7.</TD>
</TR>

<TR>
<TD>3.4.5B</TD>

<TD>The VC-status control symbol indicates to the receiving port the available buffer space that the sending port has available for packet reception on the virtual channel (VC) specified in the control symbol.</TD>
</TR>

<TR>
<TD>3.4.5C</TD>

<TD>VCID is 3-bit field that is right justified in the Parameter0 field of the control symbol. The remaining bits of the parameter0 field are reserved, set to 0 on transmission and ignored on reception.</TD>
</TR>

<TR>
<TD>3.4.5D</TD>

<TD>The VCID field shall be implemented as Part 6, Table 3-5.</TD>

<TD/>

<TD>Required in multi-vc mode</TD>
</TR>

<TR>
<TD>3.4.5E</TD>

<TD>The VC-status control symbol is used only for virtual channels 1 through 8 (VC1 through VC8) and may be transmitted only when the specified VC is implemented and enabled.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.4.5F</TD>

<TD>The VC-status control symbol may be transmitted at any time and should be transmitted whenever the number of maximum length packet buffers available for reception on a VC has changed and has not been otherwise communicated to the connected port.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.4.6</TD>

<TD>Link-Response Control Symbol</TD>

<TD>Part 6, Sec. 3.4.6</TD>
</TR>

<TR>
<TD>3.4.6A</TD>

<TD>The link-response control symbol format shall follow Part 6, Figure 3-8.</TD>
</TR>

<TR>
<TD>3.4.6B</TD>

<TD>The link-response control symbol is used by a port to respond to a link-request control symbol as described in the link maintenance protocol described in Section 5.7, &quot;Link Maintenance Protocol&quot;.</TD>
</TR>

<TR>
<TD>3.4.6C</TD>

<TD>The status reported in the link-response control symbol status field is the status of the port at the time the associated input-status link-request control symbol was received and is informational only.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>3.4.6D</TD>

<TD>The encoding of the link-response control symbol port_status field shall follow Part 6, Table 3-6.</TD>
</TR>

<TR>
<TD>3.5</TD>

<TD>Stype1 Control Symbols</TD>

<TD>Part 6, Sec. 3.5</TD>
</TR>

<TR>
<TD>3.5A</TD>

<TD>The encoding of stype1 and the function of the cmd field shall follow Part 6, Table 3-7.</TD>
</TR>

<TR>
<TD>3.5B</TD>

<TD>Restart-from-retry and link-request control symbols may only be packet delimiters if a packet is in progress.</TD>
</TR>

<TR>
<TD>3.5C</TD>

<TD>NOP (Ignore)  is the default value when the control symbol does not convey another stype1 function.</TD>
</TR>

<TR>
<TD>3.5.1</TD>

<TD>Start-of-Packet Control Symbol</TD>

<TD>Part 6, Sec. 3.5.1</TD>
</TR>

<TR>
<TD>3.5.1A</TD>

<TD>The start-of-packet control symbol is used to delimit the beginning of a packet.</TD>
</TR>

<TR>
<TD>3.5.1B</TD>

<TD> The control symbol formats shall follow Part 6, Figure 3-9.</TD>
</TR>

<TR>
<TD>3.5.2</TD>

<TD>Stomp Control Symbol</TD>

<TD>Part 6, Sec. 3.5.2</TD>
</TR>

<TR>
<TD>3.5.2A</TD>

<TD>The stomp control symbol is used to cancel a partially transmitted packet.</TD>
</TR>

<TR>
<TD>3.5.2B</TD>

<TD>The stomp control symbol formats shall follow Part 6, Figure 3-10.</TD>
</TR>

<TR>
<TD>3.5.3</TD>

<TD>End-of-Packet Control Symbol</TD>

<TD>Part 6, Sec. 3.5.3</TD>
</TR>

<TR>
<TD>3.5.3A</TD>

<TD>The end-of-packet control symbol is used to delimit the end of a packet.</TD>
</TR>

<TR>
<TD>3.5.3B</TD>

<TD>The control symbol formats shall follow Part 6, Figure 3-11.</TD>
</TR>

<TR>
<TD>3.5.4</TD>

<TD>Restart-From-Retry Control Symbol</TD>

<TD>Part 6, Sec. 3.5.4</TD>
</TR>

<TR>
<TD>3.5.4A</TD>

<TD>This Restart-From-Retry  control symbol is used to mark the beginning of packet retransmission, so that the receiver knows when to start accepting packets after the receiver has requested a packet to be retried.</TD>
</TR>

<TR>
<TD>3.5.4B</TD>

<TD>The restart-from-retry control symbol cancels a current packet and may also be transmitted on an idle link.</TD>
</TR>

<TR>
<TD>3.5.4C</TD>

<TD>The restart-from-retry control symbol format shall follow Part 6, Figure 3-12.</TD>
</TR>

<TR>
<TD>3.5.5</TD>

<TD>Link-Request Control Symbol</TD>

<TD>Part 6, Sec. 3.5.5</TD>
</TR>

<TR>
<TD>3.5.5A</TD>

<TD>A link-request control symbol is used by a port to either issue a command to the connected port or request its input port status.</TD>
</TR>

<TR>
<TD>3.5.5B</TD>

<TD>A link-request control symbol always cancels a packet whose transmission is in progress and can also be sent between packets.</TD>
</TR>

<TR>
<TD>3.5.5C</TD>

<TD>The link-request control symbol formats shall follow Part 6, Figure 3-13.</TD>
</TR>

<TR>
<TD>3.5.5D</TD>

<TD>The link-request control symbol cmd field shall be implemented as defined in Part 6, Table 3-8.</TD>
</TR>

<TR>
<TD>3.5.5.1</TD>

<TD>Reset-Device Command</TD>

<TD>Part 6, Sec. 3.5.5.1</TD>
</TR>

<TR>
<TD>3.5.5.1A</TD>

<TD>The link-request reset-device command causes the receiving device to go through its reset or power-up sequence. </TD>
</TR>

<TR>
<TD>3.5.5.1B</TD>

<TD>The reset-device command does not generate a link-response control symbol.</TD>
</TR>

<TR>
<TD>3.5.5.1C</TD>

<TD>A port receiving a reset-device command in a link-request control symbol shall not perform the reset function unless it has received four reset-device commands in a row without any other intervening packets or control symbols, except status control symbols.</TD>
</TR>

<TR>
<TD>3.5.5.2</TD>

<TD>Input-Status Command</TD>

<TD>Part 6, Sec. 3.5.5.2</TD>
</TR>

<TR>
<TD>3.5.5.2A</TD>

<TD>The input-status command requests the receiving port to return a link-response control symbol containing the ackID value it expects to next receive on its input port and the current input port operational status for informational purposes.</TD>
</TR>

<TR>
<TD>3.5.5.2B</TD>

<TD>link-request/input-status command causes the receiver to flush its output port of all control symbols generated by packets received before the input-status command.</TD>
</TR>

<TR>
<TD>3.5.6</TD>

<TD>Multicast-Event Control Symbol</TD>

<TD>Part 6, Sec. 3.5.6</TD>
</TR>

<TR>
<TD>3.5.6A</TD>

<TD>The multicast-event control symbol formats shall follow Part 6, Figure 3-14.</TD>
</TR>

<TR>
<TD>3.6</TD>

<TD>Control Symbol Protection</TD>

<TD>Part 6, Sec. 3.6</TD>
</TR>

<TR>
<TD>3.6A</TD>

<TD>A 5-bit CRC is used for the short control symbol. It should be generated according to the polynomial specified in Part 6, Sec 3.6.1.</TD>
</TR>

<TR>
<TD>3.6B</TD>

<TD>A 13-bit CRC is used for the long control symbol. It should be generated according to the polynomial specified in Part 6, Sec 3.6.3.</TD>
</TR>

<TR>
<TD>3.6C</TD>

<TD>For both 5-bit CRC and 13-bit CRC, they should be set to all 1's before comptutation.</TD>
</TR>

<TR>
<TD>3.6.1</TD>

<TD>CRC-5 Code</TD>

<TD>Part 6, Sec. 3.6.1</TD>
</TR>

<TR>
<TD>3.6.1A</TD>

<TD>The ITU polynomial X5+X4+X2+1 shall be used to generate the 5-bit CRC for short control symbols.</TD>
</TR>

<TR>
<TD>3.6.1B</TD>

<TD>The 5-bit CRC shall be computed over 20 bits comprised of control symbol bits 0 through 18 plus a 20th bit that is appended after bit 18 of the control symbol. The added bit shall be set to logic 0 (0b0).</TD>
</TR>

<TR>
<TD>3.6.1C</TD>

<TD>The CRC shall be computed beginning with control symbol bit 0.</TD>
</TR>

<TR>
<TD>3.6.1D</TD>

<TD>Before the CRC is computed, the CRC shall be set to all 1&#8217;s (0b11111).</TD>
</TR>

<TR>
<TD>3.6.1E</TD>

<TD>The CRC check bits c[0:4] shall occupy short control symbol bits [19:23] respectively.</TD>
</TR>

<TR>
<TD>3.6.1F</TD>

<TD>The 5-bit CRC shall be generated by each transmitter and verified by each receiver using the short control symbol.</TD>
</TR>

<TR>
<TD>3.6.3</TD>

<TD>CRC-13 Code</TD>

<TD>Part 6, Sec. 3.6.3</TD>
</TR>

<TR>
<TD>3.6.3A</TD>

<TD>The polynomial x13 + x10 + x8 + x5 + x2 + 1 shall be used to generate the 13-bit CRC for long control symbols.</TD>
</TR>

<TR>
<TD>3.6.3B</TD>

<TD>The 13-bit CRC shall be computed over control symbol bits 0 through 34 beginning with control symbol bit 0.</TD>
</TR>

<TR>
<TD>3.6.3C</TD>

<TD>Before the 13-bit CRC is computed, the CRC shall be set to all 0&#8217;s (0b0_0000_0000_0000).</TD>
</TR>

<TR>
<TD>3.6.3D</TD>

<TD>The CRC check bits c[0:12] shall occupy long control symbol bits [35:47] respectively.</TD>
</TR>

<TR>
<TD>3.6.3E</TD>

<TD>The 13-bit CRC shall be generated by each transmitter and verified by each receiver using the long control symbol.</TD>
</TR>
</Table>
</Worksheet>

<Worksheet>
<Table>
<TR>
<TD id="LinkTarget_6190">Item #</TD>

<TD>Compliance Item</TD>

<TD>Specification Reference</TD>

<TD>Optional</TD>

<TD>Interop Item</TD>
</TR>

<TR>
<TD>4</TD>

<TD>PCS and PMA Layers</TD>

<TD>Part 6, Chap. 4</TD>
</TR>

<TR>
<TD>4.5</TD>

<TD>8B/10B Transmission Code </TD>

<TD>Part 6 Sec. 4.5</TD>
</TR>

<TR>
<TD>4.5.2</TD>

<TD>Running Disparity </TD>

<TD>Part 6 Sec. 4.5.2</TD>
</TR>

<TR>
<TD>4.5.2A</TD>

<TD>The encoder and decoder each have a running disparity variable for each lane which are all independent of each other. </TD>
</TR>

<TR>
<TD>4.5.2B</TD>

<TD>The current value of encoder running disparity is used to select which unbalanced code-group will be used when the encoding for a character requires a choice between two unbalanced code-groups. </TD>
</TR>

<TR>
<TD>4.5.3</TD>

<TD>Running Disparity Rules </TD>

<TD>Part 6 Sec. 4.5.3</TD>
</TR>

<TR>
<TD>4.5.3A</TD>

<TD>After power-up and before the port is operational, both the transmitter(encoder) and receiver (decoder) must establish current values of running disparity.</TD>
</TR>

<TR>
<TD>4.5.3B</TD>

<TD>The transmitter shall use a negative value as the initial value for the running disparity for each lane.  The receiver may use either a negative or positive initial value of running disparity for each lane.</TD>
</TR>

<TR>
<TD>4.5.3C</TD>

<TD>The following algorithm shall be used for calculating the running disparity for each lane.</TD>
</TR>

<TR>
<TD>4.5.3D</TD>

<TD>In the encoder, the algorithm operates on the code-group that has just been generated by the encoder. In the receiver, the algorithm operates on the received code-group that has just been decoded by the decoder.</TD>
</TR>

<TR>
<TD>4.5.3E</TD>

<TD>Each code-group is divided to two sub-blocks where the first six bits (abcdei) form one sub-block (6-bit sub-block) and the second four bits (fghj) form a second sub-block (4-bit sub-block). Running disparity at the beginning of the 6-bit sub-block is the running disparity at the end of the preceding code-group. Running disparity at the beginning of the 4-bit sub-block is the running disparity at the end of the preceding 6-bit sub-block. Running disparity at the end of the code-group is the running disparity at the end of the 4-bit sub-block.</TD>
</TR>

<TR>
<TD>4.5.3F</TD>

<TD>The sub-block running disparity shall be calculated as follows:</TD>
</TR>

<TR>
<TD>4.5.3G</TD>

<TD>The running disparity is positive at the end of any sub-block if the sub-block contains more 1s than 0s. It is also positive at the end of a 4-bit sub-block if the sub-block has the value 0b0011 and at the end of a 6-bit sub-block if the sub-block has the value 0b000111.</TD>
</TR>

<TR>
<TD>4.5.3H</TD>

<TD>The running disparity is negative at the end of any sub-block if the sub-block contains more 0s than 1s. It is also negative at the end of a 4-bit sub-block if the sub-block has the value 0b1100 and at the end of a 6-bit sub-block if the sub-block has the value 0b111000.</TD>
</TR>

<TR>
<TD>4.5.3I</TD>

<TD>In all other cases, the value of the running disparity at the end of the sub-block is running disparity at the beginning of the sub-block (the running disparity is unchanged).</TD>
</TR>

<TR>
<TD>4.5.4</TD>

<TD>8B/10B Encoding </TD>

<TD>Part 6 Sec. 4.5.4</TD>
</TR>

<TR>
<TD>4.5.4A</TD>

<TD>When encoding a character, the code-group in the RD- column is selected if the current value of encoder running disparity is negative and the code-group in the RD+ column is selected if the current value of encoder running disparity is positive. </TD>
</TR>

<TR>
<TD>4.5.4B</TD>

<TD>Data characters (Dx.y) shall be encoded according to Table 4-1 and the current value of encoder running disparity. </TD>
</TR>

<TR>
<TD>4.5.4C</TD>

<TD>Special characters (Kx.y) shall be encoded according to Table 4-2 and the current value of encoder running disparity. </TD>
</TR>

<TR>
<TD>4.5.4D</TD>

<TD>After each character is encoded, the resulting code-group shall be used by the encoder to update the running disparity according to the rules in Section 4.5.3, &quot;Running Disparity Rules&quot;.</TD>
</TR>

<TR>
<TD>4.5.5</TD>

<TD>Transmission Order.</TD>

<TD>Part 6 Sec. 4.5.5</TD>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.5.5A</TD>

<TD>The parallel 10-bit code-group output of the encoder shall be serialized and transmitted with bit &#8220;a&#8221; transmitted first and a bit ordering of &#8220;abcdeifghj&#8221;. </TD>
</TR>

<TR>
<TD>4.5.6</TD>

<TD>8B/10B Decoding </TD>

<TD>Part 6 Sec. 4.5.6</TD>
</TR>

<TR>
<TD>4.5.6A</TD>

<TD>The 8B/10B decoding function decodes received 10-bit code-groups into 9-bit characters and detects and reports received code-groups that have no defined decoding due to one or more transmission errors. </TD>
</TR>

<TR>
<TD>4.5.6B</TD>

<TD>The decoding function uses Table 4-1, Table 4-2 and the current value of the decoder running disparity. </TD>
</TR>

<TR>
<TD>4.5.6C</TD>

<TD>To decode a received code-group, the decoder shall select the RD- column of Table 4-1 and Table 4-2 if the current value of the decoder running disparity is negative or shall select the RD+ column if the value is positive. </TD>
</TR>

<TR>
<TD>4.5.6D</TD>

<TD>The decoder shall then compare the received code-group with the code-groups in the selected column of both tables. If a match is found in one of the tables, the code-group is defined to be a &#8220;valid&#8221; code-group and is decoded to the associated character. If no match is found, the code-group is defined to be an &#8220;invalid&#8221; code-group and is decoded to a character that is flagged in some manner as INVALID. </TD>
</TR>

<TR>
<TD>4.5.6E</TD>

<TD>After each code-group is decoded, the decoded code-group shall be used by the decoder to update the decoder running disparity according to the rules in Section 4.5.3, &quot;Running Disparity Rules&quot;.</TD>
</TR>

<TR>
<TD>4.5.6F</TD>

<TD>A comma is a pattern of 7 bits that is used by receivers to acquire code-group boundary alignment. </TD>
</TR>

<TR>
<TD>4.5.6G</TD>

<TD>Two commas patterns are defined, 0b0011111 (comma+) and 0b1100000 (comma-). The pattern occurs in bits abcdeif of the special characters K28.1, K28.5 and K28.7.</TD>
</TR>

<TR>
<TD>4.5.6H</TD>

<TD>Within the code-group set, it is a singular bit pattern, which, in the absence of transmission errors, cannot appear in any other location of a code-group and cannot be generated across the boundaries of any two adjacent code-groups with the following exception.</TD>
</TR>

<TR>
<TD>4.5.6I</TD>

<TD>The /K28.7/ special code-group when followed by any of the data  code-groups /D3.y/, /D11.y/, /D12.y/, /D19.y/, /D20.y/, /D28.y/, or /K28.y/, where y is an integer in the range 0 through 7, may (depending on the value of running disparity) cause a comma to be generated across the boundary of the two code-groups.</TD>
</TR>

<TR>
<TD>4.5.6J</TD>

<TD>A comma that is generated across the boundary between two adjacent code-groups may cause the receiver to change the 10-bit code-group alignment. As a result, the /K28.7/ special code-group may be used for test and diagnostic purposes only.</TD>
</TR>

<TR>
<TD>4.5.7</TD>

<TD>Special Characters and Columns </TD>

<TD>Part 6 Sec. 4.5.7</TD>
</TR>

<TR>
<TD>4.5.7A</TD>

<TD>Table 4-3 defines the special characters and columns of special characters used by LP-Serial links.</TD>
</TR>

<TR>
<TD>4.5.7B</TD>

<TD>A special character and its associated code-group that is defined by the 8B/10B code, but not specified for use by the LP-Serial protocol are declared to be an &#8220;illegal&#8221; character and &#8220;illegal&#8221; code-group respectively. </TD>
</TR>

<TR>
<TD>4.5.7C</TD>

<TD>The special characters K23.7, K28.2, K28.4, K28.6, K28.7 and K30.7 are illegal characters, and if a link is operating with Idle Sequence 1, K28.1 is also an illegal character.</TD>
</TR>

<TR>
<TD>4.5.8</TD>

<TD>Effect of Single Bit Code-Group Errors </TD>

<TD>Part 6 Sec. 4.5.8</TD>
</TR>

<TR>
<TD>4.5.8A</TD>

<TD>Port detects all single bit code group errors as defined in Part 6, Section 4.5.8, Table 4-4.</TD>

<TD/>

<TD>Only required of links operating with the IDLE 1 sequence and short control symbols.</TD>
</TR>

<TR>
<TD>4.6</TD>

<TD>LP-Serial Link Widths</TD>

<TD>Part 6, Sec. 4.6</TD>
</TR>

<TR>
<TD>4.6A</TD>

<TD>All LP-Serial ports shall support operation on links with one lane per direction (1x mode) and may optionally support operation over links with 2, 4, 8 and/or 16 lanes per direction (respectively 2x mode, 4x mode, 8x mode and 16x mode).</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.6B</TD>

<TD>LP-Serial ports that support operation over two or more lanes per direction shall support 1x mode operation over two of those lanes, lane 0 and lane R (the redunancy lane).</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.6C</TD>

<TD>If the port supports operation over two lanes (2x mode), lane R shall be lane 1.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.6D</TD>

<TD>If the port supports operation over more than two lanes, lane R shall be lane 2.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.7</TD>

<TD>Idle Sequence</TD>

<TD>Part 6, Sec. 4.7</TD>
</TR>

<TR>
<TD>4.7A</TD>

<TD>When idle is transmitted by a LP-Serial port, an idle sequence shall be transmitted on each of the port&#8217;s active output lanes.</TD>

<TD/>

<TD/>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>4.7B</TD>

<TD>Ports operating in Nx mode shall not stripe the idle sequence across the active lanes; there is an idle sequence for each of the N lanes.</TD>

<TD/>

<TD/>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>4.7C</TD>

<TD>An uninitialized LP-Serial port (state variable port_initialized not asserted) shall continuously transmit an idle sequence on all active output lanes.</TD>

<TD/>

<TD/>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>4.7D</TD>

<TD>An initialized LP-Serial port (state variable port_initialized asserted) shall transmit an idle sequence on each of its active output lanes when there is nothing else to transmit.</TD>

<TD/>

<TD/>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>4.7E</TD>

<TD>On links operating in 1x mode, the first code-group of the idle sequence shall immediately follow the last code-group of the preceding control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>4.7F</TD>

<TD>When a link is operating in Nx mode, the first column of N idle code-groups shall immediately follow the column containing the last code-groups of the preceding control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>4.7.1</TD>

<TD>Clock Compensation Sequence</TD>

<TD>Part 6, Sec. 4.7.1</TD>
</TR>

<TR>
<TD>4.7.1A</TD>

<TD>The &#8220;clock compensation sequence&#8221; is a four character sequence comprised of a K special character immediately followed by three R special characters (K,R,R,R).</TD>
</TR>

<TR>
<TD>4.7.1B</TD>

<TD>A port shall transmit a clock compensation sequence on each of its active output lanes at least once every 5000 characters transmitted per lane by the port.</TD>
</TR>

<TR>
<TD>4.7.1C</TD>

<TD>When a clock compensation sequence is transmitted, the entire 4 character sequence shall be transmitted.</TD>
</TR>

<TR>
<TD>4.7.1D</TD>

<TD>When transmitted by a port operating in Nx mode, the clock compensation sequence shall be transmitted in parallel on all N lanes resulting in the column sequence ||K||R||R||R||.</TD>
</TR>

<TR>
<TD>4.7.2</TD>

<TD>Idle Sequence 1 (IDLE1)</TD>

<TD>Part 6, Sec. 4.7.2</TD>
</TR>

<TR>
<TD>4.7.2A</TD>

<TD>The IDLE1 sequence shall comply with the following requirements:</TD>
</TR>

<TR>
<TD>4.7.2A1</TD>

<TD>Each instance of an IDLE1 sequence shall begin with the K special character.</TD>
</TR>

<TR>
<TD>4.7.2A2</TD>

<TD>The second, third and fourth characters of each IDLE1 sequence may be the R special character.</TD>
</TR>

<TR>
<TD>4.7.2A3</TD>

<TD>Except when generating the clock compensation sequence, all characters following the first character of an IDLE1 shall be a randomly selected sequence of A, K and R special characters that is based on a pseudo-random sequence generator of 7th degree or greater and subject to minimum and maximum requirements on the spacing of the A special characters.</TD>
</TR>

<TR>
<TD>4.7.2A4</TD>

<TD>The number of non-A special characters between A special characters within an IDLE1 sequence shall be no less than 16 and no more than 31.</TD>
</TR>

<TR>
<TD>4.7.2A5</TD>

<TD>The number shall be pseudo-randomly selected based on a pseudo-random sequence generator of 7th degree of greater.</TD>
</TR>

<TR>
<TD>4.7.2A6</TD>

<TD>The requirement on the number of characters between successive A special characters should be maintained between successive IDLE1 sequences to ensure that two successive A special characters are always separated by at least 16 non-A characters.</TD>
</TR>

<TR>
<TD>4.7.2A7</TD>

<TD>Except when transmitting a clock compensation sequence, an IDLE1 sequence may be of any length and may be terminated after any code-group.</TD>
</TR>

<TR>
<TD>4.7.2A8</TD>

<TD>Each instance of IDLE1 shall be a new IDLE1 sequence that is unrelated to any previous IDLE1 sequence. Once transmission of an IDLE1 sequence has begun, the sequence may only be terminated. It may not be interrupted or stalled and then continued later.</TD>
</TR>

<TR>
<TD>4.7.2A9</TD>

<TD>When a port transmitting IDLE1 is operating in Nx mode, the port shall transmit the identical sequence of A, K and R special characters in parallel on each of the N lanes and the N idle sequences shall be aligned across the lanes such that the initial /K/ of the N sequences shall all occur in the same column and the last code-group of the N sequences shall all occur in the same column.</TD>
</TR>

<TR>
<TD>4.7.4</TD>

<TD>Idle Sequence 2 (IDLE2)</TD>

<TD>Part 6, Sec. 4.7.4</TD>
</TR>

<TR>
<TD>4.7.4A</TD>

<TD>The IDLE sequence 2 shall be comprised of a continuous sequence of idle frames and clock compensation sequences.</TD>
</TR>

<TR>
<TD>4.7.4B</TD>

<TD>The minimum clock compensation sequence density (clock compensation sequences per characters transmitted per lane) shall comply with the requirements specified in Section 4.7.1, &quot;Clock Compensation Sequence&quot;.</TD>
</TR>

<TR>
<TD>4.7.4C</TD>

<TD>Each clock compensation sequence shall be followed by an idle frame.</TD>
</TR>

<TR>
<TD>4.7.4D</TD>

<TD>Each idle frame shall be followed by either a clock compensation sequence or another idle frame.</TD>
</TR>

<TR>
<TD>4.7.4E</TD>

<TD>When a port is operating in Nx mode, the sequence of clock compensation sequences and idle frames shall be the same for all N lanes.</TD>
</TR>

<TR>
<TD>4.7.4F</TD>

<TD>After a port using IDLE2 is initialized (the port initialization state variable port_initialized is asserted), the port may terminate an IDLE2 sequence after any character of an idle frame to transmit a control symbol or a SYNC sequence immediately followed by a link-request control symbol subject to the following requirements:</TD>
</TR>

<TR>
<TD>4.7.4F1</TD>

<TD>Each M special character transmitted that is part of the idle frame random data field shall be followed by a minimum of four (4) random data field random data characters.</TD>
</TR>

<TR>
<TD>4.7.4F2</TD>

<TD>The sequence of four (4) M special characters at the beginning of a CS field marker shall not be truncated.</TD>
</TR>

<TR>
<TD>4.7.4F3</TD>

<TD>A port operating in Nx mode shall terminate an IDLE2 sequence at exactly the same character position in the sequence for each of the N lanes.</TD>
</TR>

<TR>
<TD>4.7.4G</TD>

<TD>Each instance of IDLE2 shall be a new IDLE2 sequence that is unrelated to any previous IDLE2 sequence. Once transmission of an IDLE2 sequence has begun, the sequence may only be terminated. It may not be interrupted or stalled and then continued later.</TD>
</TR>

<TR>
<TD>4.7.4H</TD>

<TD>When a port transmitting IDLE2 is operating in Nx mode, the port shall transmit IDLE2 sequences in parallel on each of the N lanes.</TD>
</TR>

<TR>
<TD>4.7.4I</TD>

<TD>The IDLE2 sequences transmitted on each of the N lanes shall be aligned across the lanes such that the first character of the N idle sequences shall all occur in the same column and the last character of the N idle sequences shall all occur in the same column.</TD>
</TR>

<TR>
<TD>4.7.4.1</TD>

<TD>Idle Frame</TD>

<TD>Part 6, Sec. 4.7.4.1</TD>
</TR>

<TR>
<TD>4.7.4.1A</TD>

<TD>Each idle frame shall be composed of three parts, a random data field, a command and status (CS) field marker and an encoded CS field as shown in Figure 4-5.</TD>
</TR>

<TR>
<TD>4.7.4.1.1</TD>

<TD>Idle Sequence 2 Random Data Field</TD>

<TD>Part 6, Sec. 4.7.4.1.1</TD>
</TR>

<TR>
<TD>4.7.4.1.1A</TD>

<TD>The IDLE2 random data field shall contain pseudo-random data characters and the A and M special characters.</TD>
</TR>

<TR>
<TD>4.7.4.1.1B</TD>

<TD>The total length of the random data field shall be no less than 509 and no more than 515 characters.</TD>
</TR>

<TR>
<TD>4.7.4.1.1C</TD>

<TD>Unless otherwise specified, the characters comprising the random data field shall be pseudo-random data characters.</TD>
</TR>

<TR>
<TD>4.7.4.1.1D</TD>

<TD>The random data field of an idle frame that immediately follows a clock compensation sequence shall begin with a M special character.</TD>
</TR>

<TR>
<TD>4.7.4.1.1E</TD>

<TD>Otherwise, the random data field of an idle frame shall begin with a pseudo-random data character.</TD>
</TR>

<TR>
<TD>4.7.4.1.1F</TD>

<TD>Unless otherwise specified, the pseudo-random data characters in the random data field shall occur in contiguous sequences of not less than 16 and no more than 31 pseudo-random characters. The length of each contiguous sequence shall be pseudo-randomly selected.</TD>
</TR>

<TR>
<TD>4.7.4.1.1G</TD>

<TD>Adjacent contiguous sequences shall be separated by a single A or M special character. Each separator shall be pseudo-randomly selected.</TD>
</TR>

<TR>
<TD>4.7.4.1.1H</TD>

<TD>The last four (4) characters of the random data field shall be pseudo-random data characters.</TD>
</TR>

<TR>
<TD>4.7.4.1.1I</TD>

<TD>The length of the first contiguous sequence of pseudo-random characters in the random data field shall be no less than 16 and no more than 35 characters.</TD>
</TR>

<TR>
<TD>4.7.4.1.1J</TD>

<TD>The length of last contiguous sequence of pseudo-random characters in the random data field shall be no less than 4 and no more than 35 characters.</TD>
</TR>

<TR>
<TD>4.7.4.1.1K</TD>

<TD>Each random data field that is transmitted on a given lane of a link shall be generated by first generating a prototype random data field using the above rules, but with a D0.0 character in the place of each pseudo-random data character, and then scrambling the prototype random data field with the transmit scrambler for that lane.</TD>
</TR>

<TR>
<TD>4.7.4.1.1L</TD>

<TD>The scrambling shall be done in exactly the same manner as packet and control symbol data characters are scrambled.</TD>

<TD>Part 6, Sec. 4.8.1</TD>
</TR>

<TR>
<TD>4.7.4.1.1M</TD>

<TD>When a port is operating in Nx mode, the location A or M special characters in a random data field shall be identical for all N lanes.</TD>
</TR>

<TR>
<TD>4.7.4.1.2</TD>

<TD>Idle Sequence 2 CS Field Marker</TD>

<TD>Part 6, Sec. 4.7.4.1.2</TD>
</TR>

<TR>
<TD>4.7.4.1.2A</TD>

<TD>The CS field marker shall be the 8 character sequence M, M, M, M, D21.5, Dx.y, D21.5, !Dx.y as described in 4.7.4.1.2.</TD>
</TR>

<TR>
<TD>4.7.4.1.2B</TD>

<TD>As shown above, the CS frame marker characters shall be transmitted from left to right. The first character transmitted is M, the last character transmitted is !Dx.y.</TD>
</TR>

<TR>
<TD>4.7.4.1.2C</TD>

<TD>The active_port_width field shall be encoded as specified in Table 4-5.</TD>
</TR>

<TR>
<TD>4.7.4.1.2D</TD>

<TD>The lane_number field shall be encoded as specified in Table 4-6.</TD>
</TR>

<TR>
<TD>4.7.4.1.2E</TD>

<TD>A CS field marker whose first four characters are not all M special characters, fifth and seventh characters are not both D21.5 or D10.2 or sixth and eight character are not the bit wise complements of each other shall be determined to be corrupted.</TD>
</TR>

<TR>
<TD>4.7.4.1.2F</TD>

<TD>A received CS field marker that is determined to be truncated and/or corrupted shall be ignored and discarded.</TD>
</TR>

<TR>
<TD>4.7.4.1.2G</TD>

<TD>Any error detected in a truncated and/or corrupted CS field marker that is determined to be the result of a transmission error and not the result of truncation, such as an &#8220;invalid&#8221; or &#8220;illegal&#8221; character, shall be reported as an input error.</TD>
</TR>

<TR>
<TD>4.7.4.1.3</TD>

<TD>IDLE2 Command and Status Field (CS field)</TD>

<TD>Part 6, Sec. 4.7.4.1.3</TD>
</TR>

<TR>
<TD>4.7.4.1.3A</TD>

<TD>The CS field shall have 32 information bits, cs_field[0-31], and 32 check bits, cs_field[32-63].</TD>
</TR>

<TR>
<TD>4.7.4.1.3B</TD>

<TD>The check bits cs_field[32-63] shall be the bit wise complement of the information bits cs_field[0-31] respectively.</TD>
</TR>

<TR>
<TD>4.7.4.1.3C</TD>

<TD>The CS field shall be encoded as specified in Table 4-7.</TD>
</TR>

<TR>
<TD>4.7.4.1.3D</TD>

<TD>The 64 cs_field bits shall be encoded in pairs as specified in Table 4-8.</TD>
</TR>

<TR>
<TD>4.7.4.1.3E</TD>

<TD>The characters encoding the CS channel shall be transmitted in the order of the bits they encode beginning with the character encoding CS field bits [0,1] and ending with the character encoding bits [62-63].</TD>
</TR>

<TR>
<TD>4.7.4.1.3F</TD>

<TD>A CS field whose bits [32-63] are not the bit wise complement of bits [0-31] respectively shall be determined to be corrupted.</TD>
</TR>

<TR>
<TD>4.7.4.1.3G</TD>

<TD>A received CS field that is determined to be truncated and/or corrupted shall be ignored and discarded.</TD>
</TR>

<TR>
<TD>4.7.4.1.3H</TD>

<TD>Any error detected in a truncated and/or corrupted CS field that is determined to be the result of a transmission error and not the result of truncation, such as an &#8220;invalid&#8221; or &#8220;illegal&#8221; character, shall be reported as an input error.</TD>
</TR>

<TR>
<TD>4.7.4.1.4</TD>

<TD>IDLE2 CS Field Use</TD>

<TD>Part 6, Sec. 4.7.4.1.4</TD>
</TR>

<TR>
<TD>4.7.4.1.4A</TD>

<TD>A receiver may issue the following commands. Only one of these commands may be issued at a time. Reset emphasis; preset emphasis; modify the emphasis provided by tap(-1), if tap(-1) is implemented; and modify the emphasis of tap(+1), if tap(+1) is implemented</TD>
</TR>

<TR>
<TD>4.7.4.1.4B</TD>

<TD>Specific command bits may be changed only when the ACK and NACK bits are both de-asserted and the CMD bit is either de-asserted or transitioning from de-asserted to asserted.</TD>
</TR>

<TR>
<TD>4.7.4.1.4C</TD>

<TD>Once the CMD bit is asserted, the connected port will either assert ACK after accepting and executing the command or assert NACK if the command cannot be executed.</TD>
</TR>

<TR>
<TD>4.7.4.1.4D</TD>

<TD>The assertion of ACK or NACK shall occur no more than 250usec after the assertion of CMD.</TD>
</TR>

<TR>
<TD>4.7.4.1.4E</TD>

<TD>ACK and NACK shall never be asserted at the same time.</TD>
</TR>

<TR>
<TD>4.7.4.1.4F</TD>

<TD>Once ACK or NACK is asserted in a CS field received by the port issuing the command, the CMD bit is de-asserted.</TD>
</TR>

<TR>
<TD>4.7.4.1.4G</TD>

<TD>ACK or NACK, whichever is asserted, shall be de-asserted within 250usec of receipt of a CS field with the CMD bit deasserted.</TD>
</TR>

<TR>
<TD>4.7.4.1.4H</TD>

<TD>If, for any reason, the connected port fails to assert ACK or NACK within 250usec of the assertion of CMD, CMD may be deasserted.</TD>
</TR>

<TR>
<TD>4.7.4.1.4I</TD>

<TD>Once deasserted, CMD shall remain deasserted for at least 250usec before being reasserted.</TD>
</TR>

<TR>
<TD>4.7.4.1.4J</TD>

<TD>A CS field command to increase the emphasis of tap(n) by one step shall cause the tap(n) coefficient to be made more negative by one step.</TD>
</TR>

<TR>
<TD>4.7.4.1.4K</TD>

<TD>A command to decrease the emphasis of tap(n) by one step shall cause the tap(n) coefficient to be made more positive by one step.</TD>
</TR>

<TR>
<TD>4.7.5</TD>

<TD>Idle Sequence Selection</TD>

<TD>Part 6, Sec. 4.7.5</TD>
</TR>

<TR>
<TD>4.7.5A</TD>

<TD>LP-Serial links operating at greater than 5.5 GBaud per lane shall always use the IDLE2 sequence.</TD>
</TR>

<TR>
<TD>4.7.5B</TD>

<TD>LP-Serial links operating a less than 5.5 GBaud per lane shall support use of the IDLE1 sequence and may support use of the IDLE2 sequence.</TD>
</TR>

<TR>
<TD>4.7.5C</TD>

<TD>If a LP-Serial port is operating at less than 5.5 GBaud per lane, supports the IDLE2 sequence and its configuration allows it to use the IDLE2 sequence, the port shall transmit the IDLE2 sequence when it enters the SEEK state of the port initialization process. (The port initialization process is specified in Section 4.12.) Otherwise, a LP-Serial port operating at less than 5.5 GBaud per lane shall transmit the IDLE1 sequence when entering the SEEK state and shall use the IDLE1 on the link until the port reenters the SEEK state.</TD>
</TR>

<TR>
<TD>4.7.5D</TD>

<TD>A LP-Serial port transmitting the IDLE2 sequence shall monitor the idle sequence it is receiving from the connected port. The port shall determine the idle sequence being received from the connected port using a lane for which lane_sync is asserted.</TD>
</TR>

<TR>
<TD>4.7.5E</TD>

<TD>If the LP-Serial port that is transmitting the IDLE2 sequence receives IDLE2 from the connected port, IDLE2 shall be the idle sequence used on the link until the port reenters the SEEK state.</TD>
</TR>

<TR>
<TD>4.7.5F</TD>

<TD>If the port receives IDLE1 from the connected port, the port shall switch to transmitting IDLE1 and IDLE1 shall be the idle sequence used on the link until the port reenters the SEEK state.</TD>
</TR>

<TR>
<TD>4.8</TD>

<TD>Scrambling</TD>

<TD>Part 6, Sec. 4.8</TD>

<TD>This is used only for link operating with IDLE Sequence 2(IDLE2)</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.8.1</TD>

<TD>Scrambling Rules</TD>

<TD>Part 6, Sec. 4.8.1</TD>
</TR>

<TR>
<TD>4.8.1A</TD>

<TD>If the idle sequence selection process specified in Section 4.7.5 has selected idle sequence 1 (IDLE1) for use on the link, no characters shall be scrambled before transmission on the link.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.8.1B</TD>

<TD>If the idle sequence selection process has selected idle sequence 2 (IDLE2), control symbol and packet data characters shall be scrambled by the transmitter before transmission on the link and descrambled in the receiver upon reception.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.8.1C</TD>

<TD>Special characters, CS field marker data characters, and CS field data characters shall not be scrambled before transmission.</TD>
</TR>

<TR>
<TD>4.8.1D</TD>

<TD>Scrambling and descrambling of control symbol and packet data characters shall not be disabled for normal link operation.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.8.1E</TD>

<TD>Setting the Data scrambling disable bit does not disable the use of the lane scramblers for the generation of pseudo-random data characters for the IDLE2 random data field.  (See Section 6.6.10, &quot;Port n Control 2 CSRs (Block Offset 0x54, 74, ... , 234)&quot;).</TD>
</TR>

<TR>
<TD>4.8.1F</TD>

<TD>Scrambling and descrambling shall be done at the lane level.</TD>
</TR>

<TR>
<TD>4.8.1G</TD>

<TD>Nx ports shall have a transmit scrambling and receive descrambling function for each of the N lanes.</TD>
</TR>

<TR>
<TD>4.8.1H</TD>

<TD>In the transmitter, scrambling shall occur before 8B/10B encoding, and if the port is operating in Nx mode, after lane striping.</TD>
</TR>

<TR>
<TD>4.8.1I</TD>

<TD>In the receiver, descrambling shall occur after 8B/10B decoding, and if the port is operating in Nx mode, before lane destriping.</TD>
</TR>

<TR>
<TD>4.8.1J</TD>

<TD>The polynomial x17+x8+1 shall be used to generate the pseudo-random sequences that are used for scrambling and descrambling.</TD>
</TR>

<TR>
<TD>4.8.1K</TD>

<TD>The bit serial output of the pseudo-random sequence generator shall be taken from the output of the register holding x17.</TD>
</TR>

<TR>
<TD>4.8.1L</TD>

<TD>Control symbol and packet data characters shall be scrambled and descrambled by XORing the bits of each character with the output of the pseudo-random sequence generator.</TD>
</TR>

<TR>
<TD>4.8.1M</TD>

<TD>The bits of each data character are scrambled/descrambled in order of decreasing significance. The most significant bit (bit 0) is scrambled/descrambled first, the least significant bit (bit 7) is scrambled/descrambled last.</TD>
</TR>

<TR>
<TD>4.8.1N</TD>

<TD>The transmitter and receiver scrambling sequence generators shall step during all characters except R special characters.</TD>
</TR>

<TR>
<TD>4.8.1O</TD>

<TD>To minimize any correlation between lanes when a port is transmitting on multiple lanes, the scrambling sequence applied to a given output lane of the port shall be offset from the scrambling sequence applied to any other output lane of the port by at least 64 bits.</TD>
</TR>

<TR>
<TD>4.8.2</TD>

<TD>Descrambler Synchronization</TD>

<TD>Part 6, Sec. 4.8.2</TD>
</TR>

<TR>
<TD>4.8.2A</TD>

<TD>Each lane descrambler shall synchronize itself to the scrambled data stream it is receiving by using the scrambling sequence extracted from the pseudo-random data characters received by the lane to re-initialize the state of the descrambler.</TD>
</TR>

<TR>
<TD>4.8.2B</TD>

<TD>After a lane descrambler has been re-initialized, the next two descrambler sync tests, which are defined in Section 4.8.3, shall be used to verify descrambler synchronization. If the result of both lane descrambler sync tests is &#8220;pass&#8221;, the descrambler shall be determined to be &#8220;in sync&#8221;. Otherwise, the lane descrambler shall be determined to be &#8220;out of sync&#8221; and the resynchronization process shall be repeated.</TD>
</TR>

<TR>
<TD>4.8.2C</TD>

<TD>A LP-Serial port that is operating with IDLE2 shall transmit a SYNC sequence (described below) before transmitting any link-request control symbol.</TD>
</TR>

<TR>
<TD>4.8.2C1</TD>

<TD>The SYNC sequence shall be transmitted in parallel on each of the N active lanes of a link operating in Nx mode and shall immediately precede the link-request control symbol.</TD>
</TR>

<TR>
<TD>4.8.2C2</TD>

<TD>If the link is operating in 1x mode, the last character of the SYNC sequence is immediately followed by the first character of the link-request.</TD>
</TR>

<TR>
<TD>4.8.2C3</TD>

<TD>If the link is operating in Nx mode, the last column of the SYNC sequence is immediately followed by the column containing the first characters of the link-request.</TD>
</TR>

<TR>
<TD>4.8.2C4</TD>

<TD>The SYNC sequence shall be comprised of four contiguous repetitions of a five character sequence that begins with a M special character immediately followed by 4 pseudo-random data characters, i.e. the SYNC sequence is MDDDD MDDDD MDDDD MDDDD.</TD>
</TR>

<TR>
<TD>4.8.2C5</TD>

<TD>The pseudo-random data characters shall be generated in the same way as the pseudo-random data characters in the random data field of the IDLE2 idle frame are generated.</TD>
</TR>

<TR>
<TD>4.8.2C6</TD>

<TD>The SYNC sequence will appear as four repetitions of ||M||D||D||D||D|| on a link operating in Nx mode.</TD>
</TR>

<TR>
<TD>4.8.3</TD>

<TD>Descrambler Synchronization Verification</TD>

<TD>Part 6, Sec. 4.8.3</TD>
</TR>

<TR>
<TD>4.8.3A</TD>

<TD>Each active lane of a LP-Serial port that is descrambling received control symbol and packet data characters shall, with the one exception stated below, perform a descrambler synchronization state check (descrambler sync check) whenever a descrambler sync check trigger event is detected in the received character stream of the lane.</TD>
</TR>

<TR>
<TD>4.8.3B</TD>

<TD>A descrambler sync check trigger event is defined as the occurrence of one of the following character sequences in the received character stream of an active lane.</TD>
</TR>

<TR>
<TD>4.8.3B1</TD>

<TD>A single K, M or R special character that is not part of a contiguous sequence of K, M and/or R special characters.</TD>
</TR>

<TR>
<TD>4.8.3B2</TD>

<TD>A contiguous sequence of K and/or R special characters possibly followed by a M special character. </TD>
</TR>

<TR>
<TD>4.8.3C</TD>

<TD>The descrambler sync check shall consist of inspecting the descrambled values of the four contiguous characters following the trigger sequence.   These four characters are defined as the check field.</TD>
</TR>

<TR>
<TD>4.8.3C1</TD>

<TD>The check field for the first type of trigger event shall be the four characters immediately following the K, M or R special character.  See 4.8.3B1 above.</TD>
</TR>

<TR>
<TD>4.8.3C2</TD>

<TD>The check field for the second type of trigger event that does not end with a M special character shall be the four characters immediately following the contiguous sequence of K and/or R special characters.  See 4.8.3B2 above.</TD>
</TR>

<TR>
<TD>4.8.3C3</TD>

<TD>The check field for the second type of trigger event that ends with a M special character shall be the four characters immediately following the M special character.</TD>
</TR>

<TR>
<TD>4.8.3D</TD>

<TD>The exception to the rule stated above in 3.A that each descrambler sync check trigger sequence shall cause the receiving lane to execute a descrambler sync check is when the descrambler check trigger sequence begins in the four character check field of a previous trigger sequence. When this occurs, the trigger sequence shall not trigger a descrambler sync check.</TD>
</TR>

<TR>
<TD>4.8.3E</TD>

<TD>If the descrambled value of each of the four characters in a check field is D0.0, the result of the descrambler sync test shall be &#8220;pass&#8221;. Otherwise, the result of the descrambler sync test shall be &#8220;fail&#8221; and the descrambler shall be determined to be &#8220;out of sync&#8221;.</TD>
</TR>

<TR>
<TD>4.8.3F</TD>

<TD>If a descrambler sync test fails, the port shall immediately enter the Input Error-stopped state if it is not already in that state and resynchronize the descrambler.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.8.3G</TD>

<TD>All control symbols and packet received while a lane descrambler is out of sync shall be ignored and discarded.</TD>
</TR>

<TR>
<TD>4.8.3H</TD>

<TD>The cause field in the packet-not-accepted control symbol issued by the port on entering the Input Error-stopped state due to a sync check failure shall indicate &#8220;loss of descrambler sync&#8221;.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.9</TD>

<TD>1x Mode Transmission Rules</TD>

<TD>Part 6, Sec. 4.9</TD>
</TR>

<TR>
<TD>4.9.1</TD>

<TD>1x Ports</TD>

<TD>Part 6, Sec. 4.9.1</TD>
</TR>

<TR>
<TD>4.9.1A</TD>

<TD>A 1x LP-Serial port shall 8B/10B encode and transmit the character stream of delimited control symbols and packets received from the upper layers in the order the characters were received from the upper layers.</TD>
</TR>

<TR>
<TD>4.9.1B</TD>

<TD>When neither control symbols nor packets are available from the upper layers for transmission, an idle sequence shall be fed to the input of the 8B/10B encoder for encoding and transmission.</TD>
</TR>

<TR>
<TD>4.9.1C</TD>

<TD>On reception, the code-group stream is 8B/10B decoded and the resulting character stream of error free delimited control symbols and packets shall be passed to the upper layers in the order the characters were received from the link.</TD>
</TR>

<TR>
<TD>4.9.1D</TD>

<TD>If the link is operating with idle sequence 2, control symbol and packet data characters shall be scrambled before transmission and descrambled after reception as specified in Section 4.8.</TD>

<TD/>

<TD>Required only when the link is operating with idle sequence 2 (IDLE2).  See Part 6, Sec. 4.8 for more details.</TD>
</TR>

<TR>
<TD>4.9.1E</TD>

<TD>Figure 4-9 shows the encoding and transmission order for a short control symbol transmitted over a LP-Serial link operating in 1x mode.</TD>
</TR>

<TR>
<TD>4.9.1F</TD>

<TD>Figure 4-10 shows the encoding and transmission order for a packet transmitted over a 1x LP-Serial link.</TD>
</TR>

<TR>
<TD>4.9.2</TD>

<TD>Nx Ports Operating in 1x Mode</TD>

<TD>Part 6, Sec. 4.9.2</TD>
</TR>

<TR>
<TD>4.9.2A</TD>

<TD>When a Nx port is operating in 1x mode, the character stream of delimited control symbols and packets received from the upper layers shall be fed in parallel to both lanes 0 and R for encoding and transmission in the order the characters were received from the upper layers.</TD>
</TR>

<TR>
<TD>4.9.2B</TD>

<TD>When neither delimited control symbols nor packets are available from the upper layers for transmission, an idle sequence shall be fed in parallel to both lane 0 and lane R for 8B/10B encoding and transmission on lanes 0 and R.</TD>
</TR>

<TR>
<TD>4.9.2C</TD>

<TD>On reception, the code-group stream from either lane 0 or R shall be selected according to the state of the 1x/Nx_Initialization state machine (Section 4.12.4.5), decoded and the error free delimited control symbols and packets passed to the upper layers.</TD>
</TR>

<TR>
<TD>4.9.2D</TD>

<TD>When a port that optionally supports and is enabled for both 2x mode and a wider Nx mode is operating in 1x, the port shall support both lanes 1 and 2 as redundancy lanes.</TD>
</TR>

<TR>
<TD>4.9.2E</TD>

<TD>The port shall transmit the 1x mode data stream on lanes 0, 1 and 2 and attempt to receive 1x mode data stream on lanes 0, 1 and 2.</TD>
</TR>

<TR>
<TD>4.9.2F</TD>

<TD>The port shall select between using the data received on lane 0 or the data received on the redundancy lane which may be either lane 1 or lane 2 depending on the connected port.</TD>
</TR>

<TR>
<TD>4.9.2G</TD>

<TD>Unless forced to use the redundancy lane, the port shall use the data stream received on lane 0 if it is available.</TD>
</TR>

<TR>
<TD>4.9.2H</TD>

<TD>The 1x/Nx_Initialization state machine specified in Section 4.12.4.6 shall be modified for a port supporting both 2x and a wider Nx mode to comply with the above requirements.</TD>
</TR>

<TR>
<TD>4.9.2I</TD>

<TD>If the link is operating with idle sequence 2, control symbol and packet data characters shall be scrambled before transmission and descrambled after reception as specified in Section 4.8.</TD>

<TD/>

<TD>Required only when the link is operating with idle sequence 2 (IDLE2).  See Part 6, Sec. 4.8 for more details.</TD>
</TR>

<TR>
<TD>4.10</TD>

<TD>Nx Link Striping and Transmission Rules</TD>

<TD>Part 6, Sec. 4.10</TD>
</TR>

<TR>
<TD>4.10A</TD>

<TD>A LP-Serial port operating in Nx mode shall stripe the character stream of delimited control symbols and packets received from the upper layers across the N active output lanes in the order the characters were received from the upper layers.</TD>
</TR>

<TR>
<TD>4.10B</TD>

<TD>Each lane shall then 8B/10B encode and transmit the characters assigned to it.</TD>
</TR>

<TR>
<TD>4.10C</TD>

<TD>When neither control symbols nor packets are available from the upper layers for transmission, an idle sequence shall be fed to each of the N lanes for 8B/10B encoding and transmission.</TD>
</TR>

<TR>
<TD>4.10D</TD>

<TD>Packets and delimited control symbols shall be striped across the N active lanes beginning with lane 0.</TD>
</TR>

<TR>
<TD>4.10E</TD>

<TD>The first character of each packet, or delimited control symbol, shall be placed in lane K, where K modulo 4 = 0.</TD>
</TR>

<TR>
<TD>4.10F</TD>

<TD>The second character shall be placed in lane (K + 1), and the nth character shall be placed in lane (K + (n - 1)) which wraps around to lane 0 when (K + (n - 1)) modulo N = 0.</TD>
</TR>

<TR>
<TD>4.10G</TD>

<TD>When there are not enough delimiting control symbols or packets to fill a column, all remaining characters in the column shall be filled (padded) with pseudo-random data characters.</TD>

<TD/>

<TD>Required only when the link width is greater than 4.</TD>
</TR>

<TR>
<TD>4.10H</TD>

<TD>The first pseudo-random data pad character shall occur in a lane whose lane_number modulo 4 = 0.</TD>

<TD/>

<TD>Required only when the link width is greater than 4.</TD>
</TR>

<TR>
<TD>4.10I</TD>

<TD>The number of pseudo-random data pad characters in a column shall be a positive integer multiple of 4.</TD>

<TD/>

<TD>Required only when the link width is greater than 4.</TD>
</TR>

<TR>
<TD>4.10J</TD>

<TD>Padding characters shall not be inserted between packet delimiting control symbols and the packet(s) they delimit.</TD>

<TD/>

<TD>Required only when the link width is greater than 4.</TD>
</TR>

<TR>
<TD>4.10K</TD>

<TD>After striping, each of the N streams of characters shall be independently 8B/10B encoded and transmitted.</TD>
</TR>

<TR>
<TD>4.10L</TD>

<TD>On reception, each lane shall be 8B/10B decoded.</TD>
</TR>

<TR>
<TD>4.10M</TD>

<TD>If the link is operating with idle sequence 2, control symbol and packet data characters shall be scrambled before transmission and descrambled after reception as specified in Section 4.8.</TD>

<TD/>

<TD>Required only when the link is operating with idle sequence 2 (IDLE2).  See Part 6, Sec. 4.8 for more details.</TD>
</TR>

<TR>
<TD>4.10N</TD>

<TD>After decoding, the N lanes shall be aligned.</TD>
</TR>

<TR>
<TD>4.10O</TD>

<TD>After alignment, the columns are destriped into a single character stream and passed to the upper layers.</TD>
</TR>

<TR>
<TD>4.11</TD>

<TD>Retimers and Repeaters</TD>

<TD>Part 6, Sec. 4.11</TD>

<TD>Only required for retimers or repeaters</TD>
</TR>

<TR>
<TD>4.11.1</TD>

<TD>Retimers</TD>

<TD>Part 6, Sec. 4.11.1</TD>

<TD>Only required for retimers</TD>
</TR>

<TR>
<TD>4.11.1A</TD>

<TD>A retimer shall comply with all applicable AC specifications found in Part 6, Chapters 8-10.</TD>
</TR>

<TR>
<TD>4.11.1B</TD>

<TD>Up to two retimers are allowed between 2 end nodes.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.11.1C</TD>

<TD>A retimer may insert up to one /R/ code-group immediately following a /K/ code-group sequence, or remove one /R/ code-group that immediately follows a /K/ code-group sequence.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.11.1D</TD>

<TD>An N-lane retimer must perform lane synchronization and deskew, in exactly the same way a RapidIO device implementing this physical layer does when synchronizing inputs during initialization and startup.</TD>
</TR>

<TR>
<TD>4.11.1E</TD>

<TD>A Nx mode retimer will synchronize and align all lanes that are driven to it.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.11.1F</TD>

<TD>If any link of a Nx mode retimer drops out, the retimer must merely continue to pass the active links.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.11.1G</TD>

<TD>Any insertion or removal of a /R/ code-group in a N-lane retimer must be done on a full column.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.11.1H</TD>

<TD>A retimer may retime links operating at the same width only (i.e. cannot connect a link operating at 1x to a link operating at 4x).</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.11.1I</TD>

<TD>Retimers do not check for code violations</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>4.11.2</TD>

<TD>Repeaters</TD>

<TD>Part 6, Sec. 4.11.2</TD>

<TD>Only required for repeaters</TD>
</TR>

<TR>
<TD>4.11.2A</TD>

<TD>Repeaters do not compensate for clock rate variation.</TD>
</TR>

<TR>
<TD>4.11.2B</TD>

<TD>Repeaters do not interpret or alter the bit stream in any way.</TD>
</TR>

<TR>
<TD>4.12</TD>

<TD>Port Initialization</TD>

<TD>Part 6, Sec. 4.12</TD>
</TR>

<TR>
<TD>4.12.1</TD>

<TD>1x Mode Initialization</TD>

<TD>Part 6, Sec. 4.12.1</TD>
</TR>

<TR>
<TD>4.12.1A</TD>

<TD>The initialization process for ports that support only 1x mode shall be controlled by two state machines, 1x_Initialization and Lane_Synchronization.</TD>
</TR>

<TR>
<TD>4.12.2</TD>

<TD>1x/Nx Mode Initialization</TD>

<TD>Part 6, Sec. 4.12.2</TD>
</TR>

<TR>
<TD>4.12.2A</TD>

<TD>The initialization process for ports that support both 1x and a Nx mode is controlled by a primary state machine and four or more secondary state machines.</TD>
</TR>

<TR>
<TD>4.12.2B</TD>

<TD>The primary state machine is the 1x/Nx_Initialization state machine.</TD>
</TR>

<TR>
<TD>4.12.2C</TD>

<TD>Lane_Synchronization[0] through Lane_Synchronization[N-1] (one for each of the N lanes). Lane_Alignment (one for each supported Nx mode) and 1x/2x_Mode_Detect are the secondary state machines.</TD>

<TD/>

<TD>1x/2x_Mode_Detect is only used with the 1x/Nx initialization state machine</TD>
</TR>

<TR>
<TD>4.12.3</TD>

<TD>Baud Rate Discovery</TD>

<TD>Part 6, Sec. 4.12.3</TD>

<TD>This functionality is optional.</TD>
</TR>

<TR>
<TD>4.12.3A</TD>

<TD>Baud rate discovery occurs during the SEEK state of the 1x_Initialization and 1x/Nx_Initialization state machines.</TD>
</TR>

<TR>
<TD>4.12.3B</TD>

<TD>Ports that implement baud rate discovery shall use the following algorithm.</TD>
</TR>

<TR>
<TD>4.12.3B1</TD>

<TD>When the port enters the SEEK state, it begins transmitting an idle sequence on lane 0 and, if the port supports a Nx mode, on lane R, the 1x mode redundancy lane.  The idle sequence shall be transmitted at the highest lane baud rate that is supported by the port and that is enabled for use.</TD>
</TR>

<TR>
<TD>4.12.3B2</TD>

<TD>The port shall then look for an inbound signal on lane 0 or lane R of the link from a connected port.</TD>
</TR>

<TR>
<TD>4.12.3B3</TD>

<TD>Once an inbound signal is detected, the port shall determine the baud rate of the signal.</TD>
</TR>

<TR>
<TD>4.12.3B4</TD>

<TD>If the baud rate of the inbound signal is the same as the baud rate at which the port is transmitting, the link shall operate at that per lane baud rate until the port reenters the SEEK state and the baud rate discovery process is complete.</TD>
</TR>

<TR>
<TD>4.12.3B5</TD>

<TD>If the baud rate on the inbound signal is less than the baud rate of the idle sequence transmitted by the port, the port shall reduce the baud rate at which it is transmitting to the next lowest baud rate that it supports and that is enabled for use and go to step 2.</TD>
</TR>

<TR>
<TD>4.12.3B6</TD>

<TD>If the baud rate on the inbound signal is greater than the baud rate of the idle sequence being transmitted by the port, the port shall continue transmitting at the current baud rate and go to step 2.</TD>
</TR>

<TR>
<TD>4.12.4</TD>

<TD>State Machines</TD>

<TD>Part 6, Sec. 4.12.4</TD>
</TR>

<TR>
<TD>4.12.4.1.3</TD>

<TD>State Machine Variables</TD>

<TD>Part 6, Sec. 4.12.4.1.3</TD>
</TR>

<TR>
<TD>4.12.4.1.3A</TD>

<TD>DCounter: DCounter behaves as specified in Table 4-10. The counter is used in the 1x/2x_Mode_Detect state machine</TD>
</TR>

<TR>
<TD>4.12.4.1.3B1</TD>

<TD>disc_tmr_done (discovery timer done): Asserted when disc_tmr_en has been continuously asserted for 28 +/- 4 msec and the state machine is in the DISCOVERY or a RECOVERY state.</TD>
</TR>

<TR>
<TD>4.12.4.1.3B2</TD>

<TD>disc_tmr_done (discovery timer done): The assertion of disc_tmr_done causes disc_tmr_en to be de-asserted.</TD>
</TR>

<TR>
<TD>4.12.4.1.3B3</TD>

<TD>disc_tmr_done (discovery timer done): When the state machine is in a state other than the DISCOVERY or a RECOVERY state, disc_tmr done is de-asserted.</TD>
</TR>

<TR>
<TD>4.12.4.1.3C</TD>

<TD>disc_tmr_en (discovery timer enable): When asserted, the discovery timer (disc_tmr) runs.  When de-asserted, the discovery timer is reset to and maintains its initial value.</TD>
</TR>

<TR>
<TD>4.12.4.1.3D</TD>

<TD>force_1x_mode: Asserted when all Nx (multi-lane) modes are disabled.  When asserted, forces the 1x/Nx_Initialization state machine to use 1x mode.</TD>
</TR>

<TR>
<TD>4.12.4.1.3E1</TD>

<TD>force_laneR: When force_1x_mode is asserted, force_laneR controls whether lane 0 or lane R, the redundancy lane , is preferred for 1x mode reception.  If force_laneR is asserted, lane R is the preferred lane.  If force_laneR is deasserted, lane 0 is the preferred lane.  If the preferred lane is functional, it is selected by the port initialization state machine for 1x mode reception.  If the preferred lane is not functional, the non-preferred lane, if functional, is selected for 1x mode reception.</TD>
</TR>

<TR>
<TD>4.12.4.1.3E2</TD>

<TD>force_laneR: If force_1x_mode is not asserted, the state of force_laneR has no effect on the initialization state machine.</TD>
</TR>

<TR>
<TD>4.12.4.1.3F</TD>

<TD>force_reinit: When asserted, forces the port Initialization state machine to re-initialize.  The signal is set under software control and is cleared by the Initialization state machine.</TD>
</TR>

<TR>
<TD>4.12.4.1.3G</TD>

<TD>Icounter: Counter used in the Lane_Synchronization state machine to count INVALID received code-groups.  There is one Icounter for each lane in a Nx mode receiver.</TD>
</TR>

<TR>
<TD>4.12.4.1.3H</TD>

<TD>Kcounter: Counter used in the Lane_Synchronization state machine to count received code-groups that contain a comma pattern.  There is one Kcounter for each lane in a Nx mode receiver.</TD>
</TR>

<TR>
<TD>4.12.4.1.3I</TD>

<TD>lanes01_drvr_oe: When asserted, the output drivers for lanes 0 and 1 are enabled.</TD>
</TR>

<TR>
<TD>4.12.4.1.3J</TD>

<TD>lanes02_drvr_oe: When asserted, the output drivers for lanes 0 and 2 are enabled.</TD>
</TR>

<TR>
<TD>4.12.4.1.3K</TD>

<TD>lanes13_drvr_oe: When asserted, the output drivers for lanes 1 and 3 are enabled.</TD>
</TR>

<TR>
<TD>4.12.4.1.3L</TD>

<TD>link_drvr_oe: When asserted, the output link driver of a 1x port is enabled.</TD>
</TR>

<TR>
<TD>4.12.4.1.3M</TD>

<TD>receive_lane1: In a 2x port that is initialized and is operating in 1x mode (2x_mode de-asserted), receive_lane1 indicates which lane the port has selected for input.  When asserted, the port input is taken from lane 1.  When de-asserted the port input is taken from lane 0.  When the port is operating in 2x mode (2x_mode asserted), receive_lane1 is undefined and shall be ignored.</TD>
</TR>

<TR>
<TD>4.12.4.1.3N</TD>

<TD>receive_lane2: In a Nx port that is initialized and is operating in 1x mode (Nx_mode de-asserted), receive_lane2 indicates which lane the port has selected for input.  When asserted, the port input is taken from lane 2.  When de-asserted the port input is taken from lane 0.  When the port is operating in Nx mode (some Nx_mode asserted), receive_lane2 is undefined and shall be ignored.</TD>
</TR>

<TR>
<TD>4.12.4.1.3O1</TD>

<TD>silence_timer_done: Asserted when silence_timer_en has been continuously asserted for 120 +/- 40 ms and the state machine is in the SILENT state.  When the state machine is not in the SILENT state, silence_timer_done is de-asserted.</TD>
</TR>

<TR>
<TD>4.12.4.1.3O2</TD>

<TD>silence_timer_done: The assertion of silence_timer_done causes silence_timer_en to be de-asserted.</TD>
</TR>

<TR>
<TD>4.12.4.1.3P</TD>

<TD>silence_timer_en: When asserted, the silence_timer runs.  When de-asserted, the silence_timer is reset to and maintains its initial value.</TD>
</TR>

<TR>
<TD>4.12.4.1.3Q</TD>

<TD>Vcounter: Vcounter is used in the Lane_Synchronization state machine to count VALID received code-groups.  There is one Vcounter for each lane in a Nx mode receiver.</TD>
</TR>

<TR>
<TD>4.12.4.2</TD>

<TD>Lane Synchronization State Machine</TD>

<TD>Part 6, Sec. 4.12.4.2</TD>
</TR>

<TR>
<TD>4.12.4.2A</TD>

<TD>A port that supports only 1x mode (1x port) has one Lane_Synchronization state machine.</TD>
</TR>

<TR>
<TD>4.12.4.2B</TD>

<TD>A port that supports Nx mode has N Lane_Synchronization state machines, one for each lane (Lane_Synchronization[0] through Lane_Synchronization[N-1]).</TD>
</TR>

<TR>
<TD>4.12.4.2C</TD>

<TD>The Lane_Synchronization state machine functions as specified in Figure 4-14.</TD>
</TR>

<TR>
<TD>4.12.4.2D</TD>

<TD>An isolated single-bit or burst error shall not cause the code-group boundary alignment mechanism to change alignment.</TD>
</TR>

<TR>
<TD>4.12.4.2E</TD>

<TD>The state machine starts in the NO_SYNC state and sets the variables Kcounter[n], Vcounter[n], and lane_sync[n] to 0.  In this state it looks for a /COMMA/ code-group.  When it finds one and signal_detect[n] is asserted, the state machine transitions to the NO_SYNC_1 state.</TD>
</TR>

<TR>
<TD>4.12.4.2F</TD>

<TD>The NO_SYNC_1, NO_SYNC_2, and NO_SYNC_3 states look for the reception of 127 /COMMA/ and Vmin /VALID/ code-groups without any intervening /INVALID/ code-groups.  When this condition is achieved, the state machine transitions to the SYNC state.  If an intervening /INVALID/ code-group is detected, the state machine transitions back to the NO_SYNC state.</TD>
</TR>

<TR>
<TD>4.12.4.2G</TD>

<TD>Vmin shall have a minimum value of 0.</TD>
</TR>

<TR>
<TD>4.12.4.2H1</TD>

<TD>When Vmin = 0, the behavior of this Lane_Synchronization state machine is identical to the state machine specified in Rev. 1.3 of this specification.</TD>
</TR>

<TR>
<TD>4.12.4.2H2</TD>

<TD>In the SYNC state, the state machine sets the variables lane_sync[n] to 1 and Icounter[n] to 0.  In this state it looks for /INVALID/ code-groups.  If an /INVALID/ code-group is detected, the state machine transitions to the SYNC_1 state.</TD>
</TR>

<TR>
<TD>4.12.4.2I</TD>

<TD>The SYNC_1, SYNC_2, SYNC_3, and SYNC_4 states look for 255 consecutive /VALID/ code-groups without any /INVALID/ code-groups.  When this condition is achieved, the Icounter[n] is decremented in the transition through the SYNC_4 state.  If an /INVALID/ code-group is detected, the state machine increments Icounter[n].  If Icounter[n] decrements to 0, the state machine transitions back to the SYNC state.  If Icounter[n] increments to Imax, the state machine transitions back to the NO_SYNC state.</TD>
</TR>

<TR>
<TD>4.12.4.2J</TD>

<TD>Imax is an integer and shall have a value of 3 or greater for receivers not using DFE (decision feedback equalization) and a value of 4 or greater for receivers using DFE.</TD>
</TR>

<TR>
<TD>4.12.4.3</TD>

<TD>Lane Alignment State Machine</TD>

<TD>Part 6, Sec. 4.12.4.3</TD>
</TR>

<TR>
<TD>4.12.4.3A</TD>

<TD>A port supporting one or more multi-lane modes has one Lane_Alignment state machine for each supported Nx mode.</TD>
</TR>

<TR>
<TD>4.12.4.3B</TD>

<TD>A port supporting only 1x mode does not have a Lane_Alignment state machine.</TD>
</TR>

<TR>
<TD>4.12.4.3C</TD>

<TD>The Lane_Alignment state machine functions as specified in Figure 4-15.</TD>
</TR>

<TR>
<TD>4.12.4.3D</TD>

<TD>Isolated single bit or burst errors shall not cause the lane alignment mechanism to change lane alignment.</TD>
</TR>

<TR>
<TD>4.12.4.3E</TD>

<TD>The state machine starts in the NOT_ALIGNED state and sets the variables Acounter and N_lanes_aligned to 0.  In this state it waits for all N lanes to achieve code-group boundary alignment and the reception of an ||A||.  When this occurs, the state machine transitions to the NOT_ALIGNED_1 state.</TD>
</TR>

<TR>
<TD>4.12.4.3F</TD>

<TD>The NOT_ALIGNED_1 and NOT_ALIGNED_2 states look for the reception of 4 ||A||s without the intervening reception of a misaligned column.  When this occurs, the state machine transitions to the ALIGNED state.  If an intervening misaligned column is received, the state machine transitions back to the NOT_ALIGNED state.</TD>
</TR>

<TR>
<TD>4.12.4.3G</TD>

<TD>In the ALIGNED state, the state machine sets the variables N_lanes_aligned to 1 and Mcounter to 0 and looks for a misaligned column.  If a misaligned column is detected, the state machine transitions to the ALIGNED_1 state.</TD>
</TR>

<TR>
<TD>4.12.4.3H</TD>

<TD>The ALIGNED_1, ALIGNED_2, and ALIGNED_3 states look for the reception of 4 ||A||s without the intervening reception of more than Mmax - 1 additional misaligned columns.  If this condition occurs, the state machine transitions back to the ALIGNED state.  If Mmax - 1 additional intervening misaligned columns occurs, the state machine transitions back to the NOT_ALIGNED state.</TD>
</TR>

<TR>
<TD>4.12.4.3I</TD>

<TD>Mmax is an integer and shall have a value of 2 or greater for receivers not using DFE and a value of 3 or greater for receivers using DFE.</TD>
</TR>

<TR>
<TD>4.12.4.4</TD>

<TD>1x/2x Mode Detect State Machine</TD>

<TD>Part 6, Sec. 4.12.4.4</TD>
</TR>

<TR>
<TD>4.12.4.4A</TD>

<TD>A port that supports 2x mode shall have one 1x/2x_Mode_Detect state machine.</TD>
</TR>

<TR>
<TD>4.12.4.4B</TD>

<TD>The 1x/2x_Mode_Detect state machine functions as specified in Figure 4-16.</TD>
</TR>

<TR>
<TD>4.12.4.4C</TD>

<TD>The 1x/2x_Mode_Detect state machine enters the INITIALIZE state whenever the port is reset or the state of 2_lanes_aligned changes state.  The state machine initializes the variables 1x_mode_detected and Dcounter and waits for the lanes to become aligned.  Once this occurs, the state machine transitions to the GET_COLUMN state.</TD>
</TR>

<TR>
<TD>4.12.4.4D</TD>

<TD>In the GET_COLUMN state, each column is examined as it becomes available to determine whether it contains any control symbol delimiter special characters (SC or PD characters).  If the column contains a single SC or PD special character, the state machine transitions to the 2X_DELIMITER state.  If the column contains two SC or two PD special characters, the state machine transitions to the 1X_DELIMITER state.</TD>
</TR>

<TR>
<TD>4.12.4.4E</TD>

<TD>In the 1X_DELIMITER state, Dcounter is decremented by 1 and its value is tested.  If Dcounter is greater than 0, the state machine transitions back to the GET_COLUMN state.  If Dcounter is 0, the state machine transitions to the SET_1X_MODE state, sets the variable 1x_mode_detected to 1, and then transitions back to the GET_COLUMN state.</TD>
</TR>

<TR>
<TD>4.12.4.4F</TD>

<TD>In the 2X_DELIMITER state, Dcounter is incremented by 1 and its value is tested.  If Dcounter is less than 3, the state machine transitions back to the GET_COLUMN state.  If Dcounter is 3, the state machine transitions to the SET_2X_MODE state, sets the variable 1x_mode_detected to 0, and then transitions back to the GET_COLUMN state.</TD>
</TR>

<TR>
<TD>4.12.4.5</TD>

<TD>1x Mode Initialization State Machine</TD>

<TD>Part 6, Sec. 4.12.4.5</TD>
</TR>

<TR>
<TD>4.12.4.5A</TD>

<TD>The 1x_Initialization state machine shall be used by ports that support only 1x mode (1x ports).</TD>
</TR>

<TR>
<TD>4.12.4.5B</TD>

<TD>The 1x_Initialization state machine functions as specified in Figure 4-17.</TD>
</TR>

<TR>
<TD>4.12.4.5C</TD>

<TD>The state machine starts in the SILENT state and disables the link output driver.  When the silence_timer expires, the state machine transitions to the SEEK state.</TD>
</TR>

<TR>
<TD>4.12.4.5D</TD>

<TD>In the SEEK state, the link output driver is enabled, and an idle sequence is transmitted.  When lane_ready and idle_selected are both asserted, the state machine transitions to the 1X_MODE state.</TD>
</TR>

<TR>
<TD>4.12.4.5E</TD>

<TD>The input signal force_reinit allows the port to force link re-initialization at any time.</TD>
</TR>

<TR>
<TD>4.12.4.5F</TD>

<TD>The variable port_initialized is asserted only in the 1X_MODE state.</TD>
</TR>

<TR>
<TD>4.12.4.6</TD>

<TD>1x/Nx Mode Initialization State Machine for N = 4, 8, or 16</TD>

<TD>Part 6, Sec. 4.12.4.6</TD>
</TR>

<TR>
<TD>4.12.4.6A</TD>

<TD>The 1x/Nx_Initialization state machine shall be used by ports that support both 1x mode and an Nx mode (1x/Nx ports) for N = 4, 8, or 16.</TD>
</TR>

<TR>
<TD>4.12.4.6B</TD>

<TD>1x/8x and 1x/16x ports shall use the 1x/Nx_Initialization state machine specified in Figure 4-18.</TD>
</TR>

<TR>
<TD>4.12.4.6C</TD>

<TD>1x/4x ports should use the 1x/Nx_Initialization state machine specified in Figure 4-18.  The 1x/4x_Initialization state machine of Figure 4-19 shall not be used in new designs.</TD>
</TR>

<TR>
<TD>4.12.4.6D1</TD>

<TD>The 1x/Nx_Initialization state machine starts in SILENT state.  All N lane output drivers are disabled to force the link partner to re-initialize regardless of its current state.  When the silent interval is complete, the state machine enters the SEEK state.</TD>
</TR>

<TR>
<TD>4.12.4.6D2</TD>

<TD>The duration of the SILENT state is controlled by the silence_timer.  The duration must be long enough to ensure that the link partner detects the silence (as a loss of lane_sync) and is forced to re-initialize.</TD>
</TR>

<TR>
<TD>4.12.4.6E1</TD>

<TD>In the SEEK state, a 1x/Nx port transmits an idle sequence on lanes 0 and 2 (the other output drivers remain disabled to save power) and waits for an indication that a link partner is present.</TD>
</TR>

<TR>
<TD>4.12.4.6E2</TD>

<TD>While lane_sync as defined indicates the bit and code-group boundary alignment state of a lane receiver, it is used by the state machine to indicate the presence of a link partner.  A link partner is declared to be present when either lane_sync[0] or lane_sync[2] is asserted.  The assertion of idle_selected and either lane_sync[0] or lane_sync[2] causes the state machine to enter the DISCOVERY state.</TD>
</TR>

<TR>
<TD>4.12.4.6F1</TD>

<TD>In the DISCOVERY state, the port enables the output drivers for all N lanes and transmits an idle sequence on all N lanes if Nx mode is enabled.  The discovery timer (disc_tmr) is started.</TD>
</TR>

<TR>
<TD>4.12.4.6F2</TD>

<TD>While waiting for the end of the discovery period (disc_tmr_en asserted but disc_tmr_done de-asserted), if Nx mode is enabled, all N lanes become ready and lane alignment  is achieved (N_lanes_ready asserted), the machine enters the Nx_MODE state.</TD>
</TR>

<TR>
<TD>4.12.4.6F3</TD>

<TD>If force_1x_mode is asserted (Nx_mode_enabled is de-asserted), force laneR is not asserted and lane 0 becomes ready (lane_ready[0] asserted), the state machine transitions to the 1x_MODE_LANE0 state.</TD>
</TR>

<TR>
<TD>4.12.4.6F4</TD>

<TD>If both force_1x_mode and force_laneR are asserted and lane 2 becomes ready (lane_ready[2] asserted), the state machine enters the 1x_MODE_LANE2 state.</TD>
</TR>

<TR>
<TD>4.12.4.6F5</TD>

<TD>At the end of the discovery period (disc_tmr_done asserted), if the state machine has not entered the Nx_mode or one of the 1x modes and lane 0 is ready and either force_1x_mode and force_laneR are asserted but lane 2 is not ready or Nx mode is enabled but N_lanes_ready is de-asserted, the state machine will transition to the 1x_MODE_LANE0 state.</TD>
</TR>

<TR>
<TD>4.12.4.6F6</TD>

<TD>At the end of the discovery period (disc_tmr_done asserted), if the state machine has not entered the Nx_mode or one of the 1x modes and lane 2 is ready, lane 0 is not ready and either force_1x_mode is asserted and force_laneR is not asserted or neither force_1x_mode nor N_lanes_ready are asserted, the state machine will transition to the 1x_MODE_LANE2 state.</TD>
</TR>

<TR>
<TD>4.12.4.6F7</TD>

<TD>At the end of the discovery period (disc_tmr_done asserted), if the state machine has not entered the Nx_mode or one of the 1x modes and neither lane_ready[0] nor lane_ready[2] is asserted, the state machine will transition to the SILENT state and restart the port initialization process.</TD>
</TR>

<TR>
<TD>4.12.4.6F8</TD>

<TD>If lane synchronization for both lane 0 and lane R is lost (both lane_sync[0] and lane_sync[2] de-asserted) during the DISCOVERY state, the state machine enters the SILENT state and restarts the port initialization process.</TD>
</TR>

<TR>
<TD>4.12.4.6G1</TD>

<TD>When in the Nx_MODE state, port_initialized is asserted.</TD>
</TR>

<TR>
<TD>4.12.4.6G2</TD>

<TD>If N_lanes_ready is de-asserted, the state machine will transition to either the SILENT state if both lane_sync[0] and lane_sync[2] are de-asserted or the DISCOVERY state if either lane_sync[0] or lane_sync[2] is asserted.</TD>
</TR>

<TR>
<TD>4.12.4.6H1</TD>

<TD>When in the 1x_MODE_LANE0 state, port_initialized is asserted.</TD>
</TR>

<TR>
<TD>4.12.4.6H2</TD>

<TD>If lane_ready[0] is de-asserted but lane_sync[0] is still asserted, the state machine will transition to the 1x_RECOVERY state.</TD>
</TR>

<TR>
<TD>4.12.4.6H3</TD>

<TD>If lane_sync[0] is de-asserted the state machine enters the SILENT state.</TD>
</TR>

<TR>
<TD>4.12.4.6I1</TD>

<TD>When in the 1x_MODE_LANE2 state, port_initialized is asserted.</TD>
</TR>

<TR>
<TD>4.12.4.6I2</TD>

<TD>If lane_ready[2] is de-asserted but lane_sync[2] is still asserted, the state machine will transition to the 1x_RECOVERY state.</TD>
</TR>

<TR>
<TD>4.12.4.6I3</TD>

<TD>If lane_sync[2] is de-asserted the state machine enters the SILENT state.</TD>
</TR>

<TR>
<TD>4.12.4.6J1</TD>

<TD>When the 1x_RECOVERY state is entered, the discovery timer (disc_tmr_en asserted) is started.</TD>
</TR>

<TR>
<TD>4.12.4.6J2</TD>

<TD>The port transitions back to the 1x_MODE_LANE0 state if lane_ready[0] is re-asserted and the port was in the 1x_MODE_LANE0 state immediately before entering this state.</TD>
</TR>

<TR>
<TD>4.12.4.6J3</TD>

<TD>The port transitions back to the 1x_MODE_LANE2 state if lane_ready[2] is re-asserted and the port was in the 1x_MODE_LANE2 state immediately before entering this state.</TD>
</TR>

<TR>
<TD>4.12.4.6J4</TD>

<TD>If both lane_sync[0] and lane_sync[2] are lost (both lane_sync[0] and lane_sync[2] de-asserted), the state machine will transition to the SILENT state.</TD>
</TR>

<TR>
<TD>4.12.4.6J5</TD>

<TD>If the appropriate lane_ready[] is not asserted before the discovery timer is up (disc_tmr_done asserted), the state machine will transition to the SILENT state.</TD>
</TR>

<TR>
<TD>4.12.4.6K</TD>

<TD>The input signals force_1x_mode and force_laneR allow the state machine to be forced during initialization into 1x mode, and in 1x mode to be forced to receive on lane 2.</TD>
</TR>

<TR>
<TD>4.12.4.6L</TD>

<TD>The input signal force_reinit allows the port to force port n link re-initialization at any time.</TD>
</TR>

<TR>
<TD>4.12.4.6M</TD>

<TD>The variable port_initialized is asserted only in the 1X_MODE_LANE0, 1x_MODE_LANE2, and Nx_MODE states.</TD>
</TR>

<TR>
<TD>4.12.4.7</TD>

<TD>1x/2x Mode Initialization State Machine</TD>

<TD>Part 6, Sec. 4.12.4.7</TD>
</TR>

<TR>
<TD>4.12.4.7A</TD>

<TD>The 1x/2x_Initialization state machine specified in Figure 4-20 shall be used by 1x/2x ports.</TD>
</TR>

<TR>
<TD>4.12.4.7B</TD>

<TD>Except for the method it uses to decide whether to operate in 1x or 2x mode and the use of lane 1 as the redundancy lane, this state machine is identical to the 1x/Nx_Initialization state machine specified in Figure 4-18 with N = 2.</TD>
</TR>

<TR>
<TD>4.12.4.7C</TD>

<TD>Ports that support more than 2 lanes disable all lanes except lanes 0 and R when operating in 1x mode.</TD>
</TR>

<TR>
<TD>4.12.4.7D</TD>

<TD>1x/2x ports transmit on both lanes 0 and R regardless of whether they are operating in 1x or 2x mode.</TD>
</TR>

<TR>
<TD>4.12.4.7E</TD>

<TD>The 1x/2x_Mode_Detect state machine specified in Section 4.12.4.4 provides the mechanism to determine whether to operate in 1x or 2x mode.</TD>
</TR>

<TR>
<TD>4.12.4.8</TD>

<TD>1x/Mx/Nx Mode Initialization State Machines</TD>

<TD>Part 6, Sec. 4.12.4.8</TD>
</TR>

<TR>
<TD>4.12.4.8A1</TD>

<TD>The negotiation algorithm implemented by the state machine attempts to select the greatest link width supported by both ports of a connected port pair.</TD>
</TR>

<TR>
<TD>4.12.4.8A2</TD>

<TD>Once a link width is selected, a wider link width can be selected only if the state machine enters the SILENT state which restarts the selection algorithm.</TD>
</TR>

<TR>
<TD>4.12.4.8.1</TD>

<TD>1x/2x/Nx Initialization State Machine</TD>

<TD>Part 6, Sec. 4.12.4.8.1</TD>
</TR>

<TR>
<TD>4.12.4.8.1A</TD>

<TD>The 1x/2x/Nx_Initialization state machine is specified in Figure 4-21 and shall be used by 1x/2x/Nx ports.</TD>
</TR>

<TR>
<TD>4.12.4.8.1B</TD>

<TD>The 1x/2x/Nx_Initialization state machine has three more states than a 1x/Nx_Initialization state machine: the 2x_MODE, 2x_RECOVERY, and 1x_MODE_LANE1 states.</TD>
</TR>

<TR>
<TD>4.12.4.8.1C</TD>

<TD>The operation of the 1x/2x/Nx_Initialization state machine is essentially the same as that of a 1x/2x_Initialization state machine for the 1x and 2x modes operation and that of a 1x/Nx_Initialization state machine for the Nx mode operation.  The differences between the 1x/2x/Nx_Initialization state machine and the others (1x/2x_Initialization and 1x/Nx_Initialization) are as follows.</TD>
</TR>

<TR>
<TD>4.12.4.8.1C1</TD>

<TD>In the SEEK state, the lanes whose drivers are output enabled depend on the modes that are enabled.  Lanes 0 and 1 are output enabled if the 2x mode is enabled.  Lanes 0 and 2 are output enabled if the Nx mode is enabled or the 2x mode is disabled.  And if both modes are enabled, lanes 0, 1, and 2 are output enabled.</TD>
</TR>

<TR>
<TD>4.12.4.8.1C2</TD>

<TD>The state machine enters the DISCOVERY state when lane_sync is asserted for lanes 0, 1, or 2.</TD>
</TR>

<TR>
<TD>4.12.4.8.1C3</TD>

<TD>In the DISCOVERY state, the lane selection priority for 1x mode is lane 0 first, lane 2 second, and lane 1 third.</TD>
</TR>

<TR>
<TD>4.12.4.8.1C4</TD>

<TD>In the 2x_MODE state, the state machine transitions to the 2x_RECOVERY state if 1x_mode_detected is asserted.</TD>
</TR>

<TR>
<TD>4.12.4.8.1C5</TD>

<TD>In the 2x_RECOVERY state, the state machine then transitions to the 1x_MODE_LANE0 state if both 2_lanes_ready and 1x_mode_detected are still asserted.</TD>
</TR>

<TR>
<TD>4.12.4.8.2</TD>

<TD>1x/Mx/Nx Initialization State Machine (N &gt; M &gt; 2)</TD>
</TR>

<TR>
<TD>4.12.4.8.2A</TD>

<TD>The 1x/Mx/Nx_Initialization state machine for N &gt; M &gt; 2 is specified in Figure 4-22 and shall be used by 1x/Mx/Nx ports.</TD>
</TR>

<TR>
<TD>4.12.4.8.2B</TD>

<TD>The 1x/Mx/Nx_Initialization state machine has two more states than a 1x/Nx_Initialization state machine: the Mx_MODE and Mx_RECOVERY states, but one less state than the 1x/2x/Nx_Initialization state machine: the 1x_MODE_LANE1 state.</TD>
</TR>

<TR>
<TD>4.12.4.8.2C</TD>

<TD>Its operation is most similar to that of the 1x/2x/Nx_Initialization state machine, but is less complex as the redundancy lane R is the same for all N and M &gt; 2.</TD>
</TR>
</Table>
</Worksheet>

<Worksheet>
<Table>
<TR>
<TD id="LinkTarget_4158">Item #</TD>

<TD>Compliance Item</TD>

<TD>Specification Reference</TD>

<TD>Optional</TD>

<TD>Interop Item</TD>
</TR>

<TR>
<TD>5</TD>

<TD>LP-Serial Protocol</TD>

<TD>Part 6, Chap. 5</TD>
</TR>

<TR>
<TD>5.4</TD>

<TD>Virtual Channels</TD>

<TD>Part 6, Sec. 5.4</TD>
</TR>

<TR>
<TD>5.4.1</TD>

<TD>Virtual Channel 0 (VC0)</TD>

<TD>Part 6, Sec. 5.4.1</TD>
</TR>

<TR>
<TD>5.4.1A</TD>

<TD>VC0 shall be supported by all LP-Serial ports.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.4.1B</TD>

<TD>VC0 shall always be active, operate in RT mode and support packet priority rules.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.4.2</TD>

<TD>Virtual Channels 1-8 (VC1-8)</TD>

<TD>Part 6, Sec. 5.4.2</TD>

<TD>Optional</TD>
</TR>

<TR>
<TD>5.4.2A</TD>

<TD>Any of VC1 through VC8 that are implemented shall support operation in RT mode and may optionally support and be configured for operation in CT mode.</TD>

<TD/>

<TD>Required in multi-VC mode</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.4.2B</TD>

<TD>CT VCs operate independent of each other.</TD>
</TR>

<TR>
<TD>5.4.2C</TD>

<TD>RT VCs operate as a &#8220;RT Group&#8221;. That is to say, when the error recovery protocol is used to recover a damaged packet, the unacknowledged packets for all VCs in RT mode are retransmitted.</TD>
</TR>

<TR>
<TD>5.4.2D</TD>

<TD>Implementations with fewer than the full number of VCs should ignore, but must not modify, any ignored VC bits.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.4.2E</TD>

<TD>The number of channels for VCs 1-8 may be 0, 1, 2, 4, or 8. The hierarchy for combining VCs shall follow Part 6 Table 5-1.</TD>

<TD/>

<TD>Required in multi-VC mode</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.4.3</TD>

<TD>Virtual Channel Utilization</TD>

<TD>Part 6, Sec. 5.4.3</TD>

<TD>Required in multi-VC mode</TD>
</TR>

<TR>
<TD>5.4.3A</TD>

<TD>Packets are transmitted from one or more virtual channels according to the weighted distribution of bandwidth for each channel. The weighting is such that under demand for full utilization of the link&#8217;s bandwidth, each active VC is guaranteed a certain portion of that bandwidth.</TD>
</TR>

<TR>
<TD>5.4.3B</TD>

<TD>There are no packet ordering guarantees between VCs.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.4.3C</TD>

<TD>Packets within a VC in VCs 1 - 8 are equally weighted and must be kept in order.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5</TD>

<TD>Control Symbols</TD>

<TD>Part 6, Sec. 5.5</TD>
</TR>

<TR>
<TD>5.5A</TD>

<TD>Control symbol field and format shall be implemented according to Part 6, Chapter 3.</TD>
</TR>

<TR>
<TD>5.5.1</TD>

<TD>Control Symbol Selection</TD>

<TD>Part 6, Sec. 5.5.1</TD>
</TR>

<TR>
<TD>5.5.1A</TD>

<TD>The control symbol used on a LP-Serial link is determined by the idle sequence.being used on the link. Idle sequence selection occurs during the port initialization process</TD>
</TR>

<TR>
<TD>5.5.1B</TD>

<TD>If the link is operating with idle sequence 1 (IDLE1), the short control symbol shall be used.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.1C</TD>

<TD> If the link is operating with idle sequence 2 (IDLE2), the long control symbol shall be used.</TD>

<TD/>

<TD>Required for idle2</TD>
</TR>

<TR>
<TD>5.5.2</TD>

<TD>Control Symbol Delimiting</TD>

<TD>Part 6, Sec. 5.5.2</TD>
</TR>

<TR>
<TD>5.5.2A</TD>

<TD>Short control symbols are delimited by a single 8B/10B special character  that marks the beginning of the control symbol and immediately precedes the first character of the control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.2B</TD>

<TD>Long control symbols are delimited by two 8B/10B special characters. The first special character marks the beginning of the control symbol (the start delimiter) and immediately precedes the first character of the control symbol. The second special character marks the end of the control symbol (the end delimiter) and immediately follows the last character of the control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.2C</TD>

<TD>The end delimiter special character replicates the value of the start delimiter special character.</TD>
</TR>

<TR>
<TD>5.5.2D</TD>

<TD>One of two special characters is used to delimit a control symbol. If the control symbol contains a packet delimiter, the special character PD (K28.3) is used. If the control symbol does not contain a packet delimiter, the special character SC (K28.0) is used.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.2E</TD>

<TD>The control symbol delimiting special character(s) shall be added to the control symbol before the control symbol is passed to the PCS sublayer for 8B/10B encoding and, if applicable, lane striping.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3</TD>

<TD>Control Symbol Use</TD>

<TD>Part 6, Sec. 5.5.3</TD>
</TR>

<TR>
<TD>5.5.3.1</TD>

<TD> Link Initialization </TD>

<TD>Part 6, Sec. 5.5.3.1</TD>
</TR>

<TR>
<TD>5.5.3.1A</TD>

<TD>An LP-Serial port that is not initialized only transmits an idle sequence.</TD>
</TR>

<TR>
<TD>5.5.3.1B</TD>

<TD>When a port is in the port_initialized state, but not in the link_initialized state, the port shall transmit only a idle sequences, status, VC-status, link-request and link-response control symbols and, if IDLE2 is the idle sequence in use on the link, SYNC sequences.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.1C</TD>

<TD>After a LP-Serial port is initialized, the port shall complete the following sequence of actions to enter the link_initialized state.</TD>
</TR>

<TR>
<TD>5.5.3.1C1</TD>

<TD>The initialized port shall transmit idle and at least one status control symbol per 1024 code-groups transmitted per lane until the port has received an error free status control symbol from the connected port.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.1C2</TD>

<TD>After the initialized port has received an error free status control symbol from the connected port, the port shall transmit idle and at least 15 additional status control symbols.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.1C3</TD>

<TD>After the initialized port has received an error free status control symbol, the port shall wait until it has received a total of seven error free status control symbols with no intervening errors.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.1C4</TD>

<TD>If any VC other than VC0 is implemented and enabled, the port shall transmit a single VC_Status control symbol for each such VC.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.1D</TD>

<TD>Once a port is in the link_initialized state, loss of port initialization shall cause the port to exit the link_initialized state.</TD>
</TR>

<TR>
<TD>5.5.3.1E</TD>

<TD>Once the port has exited the link_initialized state, the port shall not resume the normal transmission of packets and control symbols until the port has re-entered both the port_initialized and link_initialized states.</TD>
</TR>

<TR>
<TD>5.5.3.1F</TD>

<TD>A port that is not in the port_initialized state shall ignore and discard any packet or control symbol that it receives from the connected port.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.1G</TD>

<TD>A port that is in the port_initialized state but not in the link_initialized state shall ignore and discard any packet or any control symbol, other than status, VC-status, link-request or link-response control symbols, that it receives from the connected port.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.1H</TD>

<TD>A LP-Serial port shall not enter the Input error-stopped state or the Output error-stopped state unless the port is in the link_initialized state.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.1I</TD>

<TD> The loss of link initialization shall not cause a port already in the Input error-stopped state or the Output error-stopped state to exit either of those states.</TD>
</TR>

<TR>
<TD>5.5.3.2</TD>

<TD>Buffer Status Maintenance</TD>

<TD>Part 6, Sec. 5.5.3.2</TD>
</TR>

<TR>
<TD>5.5.3.2A</TD>

<TD>When a LP-Serial port is in the normal operational state, it shall transmit a control symbol containing the buf_status field for VC0 at least once every 1024 code-groups transmitted per lane.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.2B</TD>

<TD>When a LP-Serial port is in the normal operational state and any VC other than VC0 is active (VCs 1-8), the port shall transmit a control symbol containing the buf_status field for each active VC at least once every VC refresh period.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.2C</TD>

<TD>The VC refresh period can be configured through the VC Refresh Interval register field defined in Chapter 6, &quot;LP-Serial Registers&quot;.</TD>
</TR>

<TR>
<TD>5.5.3.2D</TD>

<TD>The shortest VC refresh period is 1024 code-groups and the longest required VC refreshing period is 1024 x 16 = 16K code groups. The VC refresh period must be implemented supporting 16K code groups.</TD>
</TR>

<TR>
<TD>5.5.3.2E</TD>

<TD>The VC Refresh Interval register field contains space for up to 8 bits to be used, so based on implementation, the maximum refresh period may be 256K code groups.</TD>

<TD/>

<TD>Optional</TD>
</TR>

<TR>
<TD>5.5.3.3</TD>

<TD>Embeded Control Symbols</TD>

<TD>Part 6, Sec. 5.5.3.3</TD>
</TR>

<TR>
<TD>5.5.3.3A</TD>

<TD>Any control symbol that does not contain a packet delimiter may be embedded in a packet.</TD>
</TR>

<TR>
<TD>5.5.3.3B</TD>

<TD>When a control symbol is embedded in a packet, the delimited control symbol shall begin on a 4-character boundary of the packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.4</TD>

<TD>Multicast-Event Control Symbols</TD>

<TD>Part 6, Sec 5.5.3.4</TD>
</TR>

<TR>
<TD>5.5.3.4A</TD>

<TD>When a switch processing element receives a Multicast-Event control symbol, the switch shall forward the Multicast-Event by issuing a Multicast-Event control symbol from each port that is designated in the port's CSR as a Multicast-Event output port.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.4B</TD>

<TD>A switch port shall never forward a Multicast-Event control symbol back to the device from which it received a Multicast-Event control symbol regardless of whether the port is designated a Multicast-Event output or not.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.5.3.4C</TD>

<TD>In the event that two or more Multicast-Event control symbols are received by a switch processing element close enough in time that more than one is present in the switch at the same time, at least one of the Multicast-Event control symbols shall be forwarded. The others may be forwarded or discarded .</TD>
</TR>

<TR>
<TD>5.5.3.4D</TD>

<TD>Multicast-Event control symbols have the highest priority for transmission on a link and can be embedded in packets.</TD>
</TR>

<TR>
<TD>5.5.3.4E</TD>

<TD>The maximum value of Multicast-Event forwarding delay and delay variation shall be defined in switch device specification. </TD>

<TD/>

<TD>Required for switch</TD>
</TR>

<TR>
<TD>5.6</TD>

<TD>Packets</TD>

<TD>Part 6, Sec. 5.6</TD>
</TR>

<TR>
<TD>5.6.1</TD>

<TD>Packet Delimiting</TD>

<TD>Part 6, Sec. 5.6.1</TD>
</TR>

<TR>
<TD>5.6.1A</TD>

<TD>LP-Serial packets are delimited for transmission by control symbols. Since packet length is variable, both start-of-packet and end-of-packet delimiters are required.</TD>
</TR>

<TR>
<TD>5.6.1B</TD>

<TD>The start-of-packet delimiter immediately precedes the first character of the packet or an embedded delimited control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.1C</TD>

<TD>The control symbol marking the end of a packet (packet termination) immediately follows the last character of the packet or the end of an embedded delimited control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.1D</TD>

<TD>The following control symbols are used to delimit packets: Start-of-packet, End-of-packet, Stomp, Restart-from-retry and any Link-request.</TD>
</TR>

<TR>
<TD>5.6.1.1</TD>

<TD>Packet Start</TD>

<TD>Part 6, Sec. 5.6.1.1</TD>
</TR>

<TR>
<TD>5.6.1.1A</TD>

<TD>The beginning of a packet shall be marked by a start-of-packet control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.1.2</TD>

<TD>Packet Termination</TD>

<TD>Part 6, Sec. 5.6.1.2</TD>
</TR>

<TR>
<TD>5.6.1.2A</TD>

<TD>A packet shall be terminated in one of the following three ways:  </TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.1.2A1</TD>

<TD>The end of a packet is marked with an end-of-packet control symbol.</TD>
</TR>

<TR>
<TD>5.6.1.2A2</TD>

<TD>The end of a packet is marked with a start-of-packet control symbol that also marks the beginning of a new packet. </TD>
</TR>

<TR>
<TD>5.6.1.2A3</TD>

<TD>The packet is canceled by a restart-from-retry, stomp, or any link-request control symbol.</TD>
</TR>

<TR>
<TD>5.6.2</TD>

<TD>Acknowledgment Identifier</TD>

<TD>Part 6, Sec. 5.6.2</TD>
</TR>

<TR>
<TD>5.6.2A</TD>

<TD>Each packet requires an identifier to uniquely identify its acknowledgment control symbol. The acknowledge ID (ackID) is 5 bits long when using short control symbols and 6 bits long when using long control symbols.</TD>

<TD/>

<TD>Long control symbol is required when IDLE2 is used</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.2B</TD>

<TD>A maximum of 2N-1 outstanding unacknowledged packets shall be allowed at any one time(N is the number of bits in the ackID field).</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.2C</TD>

<TD>The value of ackID assigned to the first packet transmitted after a reset shall be 0. </TD>
</TR>

<TR>
<TD>5.6.2D</TD>

<TD>The values of ackID assigned to subsequent packets shall be in increasing numerical order, wrapping back to 0 on overflow.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.2E</TD>

<TD>The ackID assigned to a packet indicates the order of the packet transmission and is independent of the virtual channel assignment of the packet. When acknowledgement control symbols are received containing VC specific information (e.g., buf_status), the transmitter side of the port must reassociate that information with the correct VC based on the returned ackID.</TD>

<TD/>

<TD>Required when multiple VCs are enabled</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.3</TD>

<TD>Packet Priority and Transaction Request Flows</TD>

<TD>Part 6, Sec. 5.6.3</TD>
</TR>

<TR>
<TD>5.6.3A</TD>

<TD>Within VC0 each packet has a priority. The priority is carried in the prio field of the packet and has four possible values: 0, 1, 2, or 3.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.3B</TD>

<TD>Packet priority increases with the priority value with 0 being the lowest priority and 3 being the highest.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.3C</TD>

<TD>Within VC0 each packet has optionally a critical request flow. The critical request flow is carried in the CRF bit.</TD>

<TD/>

<TD>Optional</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.3D</TD>

<TD>Devices that do not support the CRF bit treat it as reserved, setting it to logic 0 on transmit and ignoring it on receive.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.3E</TD>

<TD>Packets with the same priority level and CRF bit setting cannot pass each other. Packets with the CRF bit set at a given priority are allowed to pass packets with the CRF bit clear at the same priority.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.3F</TD>

<TD>When a transaction is encapsulated in a packet for transmission, the transaction request flow indicator (flowID) of the transaction is mapped into the prio field (and optionally the CRF bit) of the packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.3G</TD>

<TD>If the CRF bit is not supported, VC0 transaction request flows are mapped according to Part 6, Table 5-2.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.3H</TD>

<TD>If the CRF bit is supported, the VC0 transaction request flows are mapped according to Part 6, Table 5-3.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.3I</TD>

<TD>Flows for VCs 1-8 (A and higher) are mapped according to Part 6, Table 5-4.</TD>

<TD/>

<TD>Optional</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.6.3J</TD>

<TD>Transaction requests that require responses, and their corresponding responses, must use VC0 with the appropriate priority.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.7</TD>

<TD>Link Maintenance Protocol</TD>

<TD>Part 6, Sec. 5.7</TD>
</TR>

<TR>
<TD>5.7A</TD>

<TD>For software management, the request is generated through ports in the configuration space of the sending device.  An external host write of a command to the link-request register with an I/O logical specification maintenance write transaction causes a link-request control symbol to be issued onto the output port of the device.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.7B</TD>

<TD>Only one link-request can be outstanding on a link at a time.</TD>
</TR>

<TR>
<TD>5.7C</TD>

<TD>The device that is linked to the sending device shall respond with a link-response control symbol if the link-request command required it to do so. </TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.7D</TD>

<TD>The external host retrieves the link-response by polling the link-response register with I/O logical maintenance read transactions.</TD>
</TR>

<TR>
<TD>5.7E</TD>

<TD>A device with multiple RapidIO interfaces has a link-request and a link-response register pair for each corresponding RapidIO interface.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.7F</TD>

<TD>The automatic error recovery mechanism relies on the hardware generating link-request/input-status control symbols under the transmission error conditions described in Section 5.13.2.1, &quot;Recoverable Errors&quot; and using the corresponding link-response information to attempt recovery.</TD>
</TR>

<TR>
<TD>5.7G</TD>

<TD>A device receiving a link-request/reset-device control symbol shall not perform the reset function unless it has received four link-request/reset-device control symbols in a row without any intervening packets or other control symbols, except status control symbols.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.7H</TD>

<TD>The link-request/reset-device control symbol does not require a response.</TD>
</TR>

<TR>
<TD>5.7I</TD>

<TD>The input-status command of the link-request/input-status control symbol is used by the hardware to recover from transmission errors.</TD>
</TR>

<TR>
<TD>5.7J</TD>

<TD>If the input port had stopped due to a transmission error that generated a packet-not-accepted control symbol back to the sender, the link-request/input-status control symbol acts as a link-request/restart-from-error control symbol, and the receiver is re-enabled to receive new packets after generating the link-response control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.7K</TD>

<TD>The link-request/input-status control symbol may also be used to restart the receiving device if it is waiting for a restart-from-retry control symbol after retrying a packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.7L</TD>

<TD>The link-request/input-status control symbol requires a response. </TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.7L1</TD>

<TD>A port receiving a link-request/input-status control symbol returns a link-response control symbol which contains the &#8220;port_status&#8221; and &#8220;ackID_status&#8221;. </TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.7L2</TD>

<TD>The status indications are limited to the definitions which are described in Table 3-6.</TD>
</TR>

<TR>
<TD>5.7M</TD>

<TD>The retry-stopped state indicates that the port has retried a packet and is waiting to be restarted. This state is cleared when a restart-from-retry (or a link-request/input-status) control symbol is received. </TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.7N</TD>

<TD>The error-stopped state indicates that the port has encountered a transmission error and is waiting to be restarted. This state is cleared when a link-request/input-status control symbol is received.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.8</TD>

<TD>Packet Transmission Protocol</TD>

<TD>Part 6, Sec. 5.8</TD>
</TR>

<TR>
<TD>5.8A</TD>

<TD>Each packet transmitted across a LP-Serial link shall be acknowledged by the receiving port with a packet acknowledgment control symbol with one exception as stated in 5.8C.</TD>
</TR>

<TR>
<TD>5.8B</TD>

<TD>Packets shall be acknowledged in the order in which they were transmitted (ackID order) with exception stated in 5.8C.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.8C</TD>

<TD>The exception is when an event has occurred that caused a port to enter the Input Error-stopped state. CT mode packets accepted by a port after the port entered the Input Error-stopped state and before the port receives a link-request/input-status control symbol shall not be acknowledged.</TD>

<TD/>

<TD>Required when CT mode is enabled</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.8D</TD>

<TD>To associate packet acknowledgment control symbols with transmitted packets, each packet shall be assigned an ackID value according to the rules of Section 5.6.2, &quot;Acknowledgment Identifier&quot; that is carried in the ackID field of the packet and the packet_ackID field of the associated acknowledgment control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.8E</TD>

<TD>The LP-Serial link RT protocol uses retransmission to recover from packet transmission errors or a lack of receive buffer resources. To enable packet retransmission, a copy of each RT packet transmitted across a LP-Serial link shall be kept by the sending port until either a packet-accepted control symbol is received for the packet or the sending port determines that the packet has encountered an unrecoverable error condition.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.8F</TD>

<TD>The LP-Serial link CT protocol does not use packet retransmission. CT mode packets that are corrupted by transmission errors or that are not accepted because of a lack of receive buffer resources are discarded and lost. Therefore, a port need not retain a copy of a CT mode packet whose transmission has been completed.</TD>

<TD/>

<TD>Required when CT mode is enabled</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.8G</TD>

<TD>The LP-Serial link protocol uses the ackID value carried in each packet to ensure that no RT mode packets are lost due to transmission errors. A port shall accept packets from a LP-Serial link only in sequential ackID order with one exception as stated in 5.8H and 5.8I.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.8H</TD>

<TD>The exception is when an event has occurred that caused a port to enter the Input Error-stopped state. A CT mode packet received by a port after the port entered the Input Error-stopped state and before the port receives a link-request/input-status control symbol shall be accepted by the port without regard to the value of the packet&#8217;s ackID field if the packet is otherwise error free and there are adequate receive buffer resources to accept the packet.</TD>

<TD/>

<TD>Required when CT mode is enabled</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.8I</TD>

<TD>The value that is maintained by the port of the ackID expected in the next packet shall not be changed by the acceptance of CT packets after the port entered the Input Error-stopped state and before the port receives a link-request/input-status control symbol.</TD>

<TD/>

<TD>Required when CT mode is enabled</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.8J</TD>

<TD>In order to prevent switch processing element internal errors, such as SRAM soft bit errors, from silently corrupting a packet and the system,switch processing elements shall maintain packet error detection coverage while a packet is passing through the switch.</TD>

<TD/>

<TD>Required only for switches</TD>
</TR>

<TR>
<TD>5.9</TD>

<TD>Flow Control</TD>

<TD>Part 6, Sec. 5.9</TD>
</TR>

<TR>
<TD>5.9A</TD>

<TD>Every RapidIO LP-Serial port shall support receiver-controlled flow control as implemented according to Section 5.9.1</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1</TD>

<TD>Receiver-Controlled Flow Control</TD>

<TD>Part 6, Sec. 5.9.1</TD>
</TR>

<TR>
<TD>5.9.1A</TD>

<TD>A port signals its link partner that it is operating in receiver-controlled flow control mode by setting the buf_status field to all 1&#8217;s in every control symbol containing the field that the port transmits.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1B</TD>

<TD>A port operating in receiver-controlled flow control mode accepts or rejects each inbound error free packet based on whether the receiving port has enough buffer space available for the VC and the priority level of the packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1.1</TD>

<TD>Reliable Traffic VC Receivers</TD>

<TD>Part 6, Sec. 5.9.1.1</TD>
</TR>

<TR>
<TD>5.9.1.1A</TD>

<TD>If buffer space is not available, the port rejects the packet.</TD>
</TR>

<TR>
<TD>5.9.1.1B</TD>

<TD>If multiple VCs are active, and the VC is in reliable traffic mode, the rejected packet shall be acknowledged with the packet-not-accepted control symbol.</TD>

<TD/>

<TD>Only applicable if multiple VCs are supported</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1.2</TD>

<TD>Continuous Traffic VC Receivers</TD>

<TD>Part 6, Sec. 5.9.1.2</TD>
</TR>

<TR>
<TD>5.9.1.2A</TD>

<TD>If buffer space is not available, and the VC is in CT mode, the packet is acknowledged as accepted, and the packet is discarded.</TD>
</TR>

<TR>
<TD>5.9.1.3</TD>

<TD>Single VC Retry Protocol</TD>

<TD>Part 6, Sec. 5.9.1.3</TD>
</TR>

<TR>
<TD>5.9.1.3A</TD>

<TD>It is a requirement that implementers include this functionality (retry protocol) in the channel design to be backward compatible with existing RapidIO interfaces.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1.3B</TD>

<TD>When a port rejects a packet, it immediately enters the Input Retry-stopped state and follows the Input Retry-stopped recovery process specified in Section 5.9.1.4, &quot;Input Retry-Stopped Recovery Process&quot;.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1.3C</TD>

<TD>A port that receives a packet-retry control symbol immediately enters the Output Retry-stopped state and follows the Output Retry-stopped recovery process specified in Section 5.9.1.5, &quot;Output Retry-Stopped Recovery Process&quot;.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1.4</TD>

<TD>Input Retry-Stopped Recovery Process</TD>

<TD>Part 6, Sec. 5.9.1.4</TD>
</TR>

<TR>
<TD>5.9.1.4A</TD>

<TD>When the input side of a port operating with only VC0 active (single VC mode) retries a packet, it immediately enters the Input Retry-stopped state.  To recover from this state, the input side of the port takes the following actions.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1.4B</TD>

<TD>Discards the rejected or canceled packet without reporting a packet error and ignores all subsequently received packets while the port is in the Input Retry-stopped state.</TD>
</TR>

<TR>
<TD>5.9.1.4C</TD>

<TD>Causes the output side of the port to issue a packet-retry control symbol containing the ackID value of the retried packet in the packet_ackID field of the control symbol.</TD>
</TR>

<TR>
<TD>5.9.1.4D</TD>

<TD>When a restart-from-retry control symbol is received, exit the Input Retry-stopped state and resume packet reception.</TD>
</TR>

<TR>
<TD>5.9.1.5</TD>

<TD>Output Retry-Stopped Recovery Process</TD>

<TD>Part 6, Sec. 5.9.1.5</TD>
</TR>

<TR>
<TD> 5.9.1.5A</TD>

<TD>To recover from the Output Retry-stopped state, the output side of a port takes the following actions.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1.5B</TD>

<TD>Immediately stops transmitting new packets.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1.5C</TD>

<TD>Resets the link packet acknowledgment timers for all transmitted but unacknowledged packets.</TD>
</TR>

<TR>
<TD>5.9.1.5D</TD>

<TD>Transmits a restart-from-retry control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1.5E</TD>

<TD>Backs up to the first unaccepted packet (the retried packet) which is the packet whose ackID value is specified by the packet_ackID value contained in the packet-retry control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.1.5F</TD>

<TD>Exits the Output Retry-stopped state and resumes transmission with either the retried packet or a higher priority packet which is assigned the ackID value contained in the packet_ackID field of the packet-retry control symbol.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.2</TD>

<TD>Transmitter-Controlled Flow Control</TD>

<TD>Part 6, Sec. 5.9.2</TD>

<TD>Only required if port is supporting Transmitter-Controlled Flow control</TD>
</TR>

<TR>
<TD>5.9.2A</TD>

<TD>A port signals its link partner that it is operating in transmitter-controlled flow control mode by setting the buf_status field to a value different from all 1&#8217;s in every control symbol containing the field that the port transmits.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.2B</TD>

<TD>The value conveyed by the buf_status field is the number of maximum length packet buffers currently available for packet reception up to the limit that can be reported in the field.</TD>
</TR>

<TR>
<TD>5.9.2C</TD>

<TD>A port informs its link partner when the number of free buffers available for packet reception changes. </TD>
</TR>

<TR>
<TD>5.9.2D</TD>

<TD>A port shall send a control symbol containing the buf_status field to its link partner no less often than the minimum rate specified in Section 5.5.3.2, &quot;Buffer Status Maintenance&quot;.</TD>
</TR>

<TR>
<TD>5.9.2E</TD>

<TD>When a port implements more than VC0, the value of buf_status is kept on a per VC basis by the receiving port.</TD>

<TD/>

<TD>Only required if port is supporting Transmitter-Controlled Flow control and if multiple VCs are supported</TD>
</TR>

<TR>
<TD>5.9.2F</TD>

<TD>When a packet-accepted symbol is returned, the buf_status field is filled with the status for the specific VC that the packet was sent to.</TD>

<TD/>

<TD>Only required if port is supporting Transmitter-Controlled Flow control and if multiple VCs are supported</TD>
</TR>

<TR>
<TD>5.9.2G</TD>

<TD>When sending buf_status asynchronously (not in response to any specific packet), the status control symbol is used for VC0, and the VC_status control symbol is used for VC&#8217;s 1-8.</TD>

<TD/>

<TD>Only required if port is supporting Transmitter-Controlled Flow control and if multiple VCs are supported</TD>
</TR>

<TR>
<TD>5.9.2H</TD>

<TD>A port whose link partner is operating in transmitter-control flow control mode should never receive a packet-not-accepted (or packet-retry control symbol if operating in single VC mode) from its link partner unless the port has transmitted more packets than its link partner has receive buffers, has violated the rules that all input buffers may not be filled with low priority packets or there is some fault condition.</TD>
</TR>

<TR>
<TD>5.9.2I</TD>

<TD>If a port, operating in single VC mode, for whose link partner is operating in transmitter-control flow control mode, receives a packet-retry control symbol, the output side of the port immediately enters the Output Retry-stopped state and follows the Output Retry-stopped recovery process specified in Section 5.9.1.5, &quot;Output Retry-Stopped Recovery Process&quot;.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.9.2.1</TD>

<TD>Receive Buffer Management</TD>

<TD>Part 6, Sec. 5.9.2.1</TD>
</TR>

<TR>
<TD>5.9.2.1A</TD>

<TD>In transmitter-controlled flow control, the transmitter manages the packet receive buffers in the receiver and shall not violate the rules in Section 5.12, &quot;Deadlock Avoidance&quot; concerning the acceptance of packets by ports.</TD>
</TR>

<TR>
<TD>5.9.2.1B</TD>

<TD>For VCs 1-8, packets within the same VC are equal in priority and always kept in order. The only requirement is that once a given amount of buffers is reported by the receiver to the transmitter those buffers shall remain available for packets for that VC.</TD>

<TD/>

<TD>Only applicable if multiple VCs are supported</TD>
</TR>

<TR>
<TD>5.9.2.2</TD>

<TD>Effective Number of Free Receive Buffers</TD>

<TD>Part 6, Sec. 5.9.2.2</TD>
</TR>

<TR>
<TD>5.9.2.2A</TD>

<TD>The value in the buf_status field does not account for packets that have been transmitted by the VC but not acknowledged by its link partner.</TD>
</TR>

<TR>
<TD>5.9.2.3</TD>

<TD>Speculative Packet Transmission</TD>

<TD>Part 6, Sec. 5.9.2.3</TD>
</TR>

<TR>
<TD>5.9.2.3A</TD>

<TD>The link partner accepts or rejects these (speculatively) packets on a packet by packet basis in exactly the same way it would if operating in receiver-controlled flow control mode.</TD>
</TR>

<TR>
<TD>5.9.3</TD>

<TD>Flow Control Mode Negotiation</TD>

<TD>Part 6, Sec. 5.9.3</TD>
</TR>

<TR>
<TD>5.9.3A</TD>

<TD>Immediately following the initialization of a link, each port begins sending status control symbols to its link partner. The value of the buf_status field in these control symbols indicates to the link partner the flow control mode supported by the sending port.</TD>
</TR>

<TR>
<TD>5.9.3B</TD>

<TD>If the port and its link partner both support transmitter-controlled flow control, then both ports shall use transmitter-controlled flow control. Otherwise, both ports shall use receiver-controlled flow control.</TD>
</TR>

<TR>
<TD>5.9.3C</TD>

<TD>If multiple VCs are used, then a port shall have either all channels in receiver based flow control or all channels in transmitter based flow control. All status and VC_status control symbols shall be consistent in their buf_status reporting in this regard.</TD>

<TD/>

<TD>Only applicable if multiple VCs are supported</TD>
</TR>

<TR>
<TD>5.10</TD>

<TD>Canceling Packets</TD>

<TD>Part 6, Sec 5.10</TD>
</TR>

<TR>
<TD>5.10A</TD>

<TD>The sending device shall use the stomp control symbol, the restart-from-retry control symbol (in response to a packet-retry control symbol), or any link request control symbol to cancel a packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.10B</TD>

<TD>A port receiving a canceled packet shall drop the packet. The cancellation of a packet shall not result in the generation or report of any errors.</TD>
</TR>

<TR>
<TD>5.10C</TD>

<TD>If the packet was canceled because the sender received a packet-not-accepted control symbol, the error that caused the packet-not-accepted to be sent shall be reported in the normal manner.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.10D</TD>

<TD>A port that is not in an input stopped state (Retry-stopped or Error-stopped) while receiving the canceled packet and has not previously acknowledged the packet shall have the following behavior.</TD>
</TR>

<TR>
<TD>5.10E</TD>

<TD>If the packet is canceled by a link-request/input-status control symbol, the port shall drop the packet without reporting a packet error.</TD>
</TR>

<TR>
<TD>5.10F</TD>

<TD>If the packet is canceled by a restart-from-retry control symbol a protocol error has occurred and the port shall immediately enter the Input Error-stopped state and follows the Input Error-stopped recovery process specified in Section 5.13.2.6, &quot;Input Error-Stopped Recovery Process&quot;.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.10G</TD>

<TD>If the packet was canceled by other than a restart-from-retry or link-request/input-status control symbol and the port is operating in single VC mode (only VC0 is active), the port shall immediately enter the Input Retry-Stopped state and follow the Input Retry-Stopped recovery process specified in Section 5.9.1.4, &quot;Input Retry-Stopped Recovery Process&quot;.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.10H</TD>

<TD>If the packet was canceled before the packet ackID field was received by the port, the packet_ackID field of the associated packet-retry control symbol acknowledging the packet shall be set to the ackID the port expected in the canceled packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.10I</TD>

<TD>If the packet was canceled by other than a restart-from-retry or link-request/input-status control symbol and the port is operating in multiple VC mode (at least one of VC1-8 is active), the port shall immediately enter the Input Error-Stopped state and follow the Input Error-Stopped recovery process specified in Section 5.13.2.6, &quot;Input Error-Stopped Recovery Process&quot;.</TD>

<TD/>

<TD>Only applicable if multiple VCs are suppported</TD>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.10J</TD>

<TD>A packet whose transmission is canceled shall be considered to be an untransmitted packet.</TD>
</TR>

<TR>
<TD>5.11</TD>

<TD>Transaction and Packet Delivery Ordering Rules</TD>

<TD>Part 6, Sec. 5.11</TD>
</TR>

<TR>
<TD>5.11A</TD>

<TD>The device is compliant to transaction delivery ordering rules</TD>
</TR>

<TR>
<TD>5.11A1</TD>

<TD>The physical layer of an end point processing element port shall encapsulate in packets and forward to the RapidIO fabric transactions comprising a given transaction request flow in the same order that the transactions were received from the transport layer of the processing element.</TD>
</TR>

<TR>
<TD>5.11A2</TD>

<TD>The physical layer of an end point processing element port shall ensure that a higher priority request transaction that it receives from the transport layer of the processing element before a lower priority request transaction with the same sourceID and the same destinationID is forwarded to the fabric before the lower priority transaction.</TD>
</TR>

<TR>
<TD>5.11A3</TD>

<TD>The physical layer of an end point processing element port shall deliver transactions to the transport layer of the processing element in the same order that the packetized transactions were received by the port.</TD>
</TR>

<TR>
<TD>5.11B</TD>

<TD>The device is compliant to packet delivery ordering rules</TD>
</TR>

<TR>
<TD>5.11B1</TD>

<TD>A packet initiated by a processing element shall not be considered committed to the RapidIO fabric and does not participate in the packet delivery ordering rules until the packet has been accepted by the device at the other end of the link.</TD>
</TR>

<TR>
<TD>5.11B2</TD>

<TD>A switch shall not alter the priority, critical request flow or VC of a packet.</TD>

<TD/>

<TD>Only applicable to switches</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.11B3</TD>

<TD>Packet forwarding decisions made by a switch processing element shall provide a consistent output port selection which is based solely on the value of the destinationID field carried in the packet.</TD>

<TD/>

<TD>Only applicable to switches</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.11B4</TD>

<TD>A switch processing element shall not change the order of packets comprising a transaction request flow (packets with the same sourceID, the same destinationID, the same priority, same critical request flow, same VC bit, and ftype != 8) as the packets pass through the switch.</TD>

<TD/>

<TD>Only applicable to switches</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.11B5</TD>

<TD>A switch processing element shall not allow lower priority non-maintenance packets (ftype != 8) to pass higher priority non-maintenance packets with the same sourceID and destinationID as the packets pass through the switch.</TD>

<TD/>

<TD>Only applicable to switches</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.11B6</TD>

<TD>A switch processing element shall not allow a priority N maintenance packet (ftype = 8) to pass another maintenance packet of priority N or greater that takes the same path through the switch (same switch input port and same switch output port).</TD>

<TD/>

<TD>Only applicable to switches</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.11C</TD>

<TD>The device is compliant to rules for scheduling among VCs. </TD>

<TD/>

<TD>Only applicable if a device supports multiple VCs</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.11C1</TD>

<TD>Each VC is configured to have guaranteed bandwidth. </TD>

<TD/>

<TD>Only applicable if a device supports multiple VCs</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.11C1A</TD>

<TD>If the total guaranteed bandwidth for all the supported VCs is less than or equal to 100%, demand for more than its guaranteed bandwidth shall not cause any other VCs to receive less than their guaranteed bandwidth.</TD>

<TD/>

<TD>Only applicable if a device supports multiple VCs</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.11C2</TD>

<TD>If VC0 participates in the bandwidth reservation process, then all VCs will receive their expected minimum bandwidth.</TD>

<TD/>

<TD>Only applicable if a device supports multiple VCs and VC0 participates in the bandwidth reservation process.</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.11C3</TD>

<TD>If VC0 is treated with strict priority, getting whatever bandwidth is required when it has traffic to transport, the remaining VCs will divide up whatever portion of bandwidth remains.</TD>

<TD/>

<TD>Only applicable if a device supports multiple VCs and VC0 is treated as strict priority</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.11C4</TD>

<TD>Chapter 6, &quot;LP-Serial Registers&quot; defines a standard control register should the implementer decide to make the VC0 bandwidth allocation scheme a programmable feature.</TD>

<TD/>

<TD>Only applicable if a device supports multiple VCs and VC0 bandwidth control is programmable</TD>

<TD>Inter-Op</TD>
</TR>

<TR>
<TD>5.12</TD>

<TD>Deadlock Avoidance</TD>

<TD>Part 6, Section 5.12</TD>
</TR>

<TR>
<TD>5.12A</TD>

<TD>Request transactions requiring responses shall only use VC0.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.12B</TD>

<TD>The response packet shall only use VC0.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.12C</TD>

<TD>The following requirements apply to prioritized traffic within VC0.</TD>
</TR>

<TR>
<TD>5.12C1</TD>

<TD>Switch processing elements are not required, with the sole exception of ftype 8 maintenance transactions, to discern between packet types, their functions or their interdependencies.</TD>
</TR>

<TR>
<TD>5.12C2</TD>

<TD>A response packet (a packet carrying a response transaction) is always assigned an initial priority, one priority level greater than the priority of the associated request packet.  This requirement is specified in Table 5-2 and Table 5-3.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.12C3</TD>

<TD>The end point processing element that is the source of the response packet may additionally raise the priority of the response packet to a priority higher than the minimum required by Table 5-2 and Table 5-3 if necessary for the packet to be accepted by the connected device.</TD>
</TR>

<TR>
<TD>5.12C4</TD>

<TD>An end point processing element may promote a response packet only to the degree necessary for the packet to be accepted by the connected device.</TD>
</TR>

<TR>
<TD>5.12D</TD>

<TD>A RapidIO fabric shall be dependency cycle free for all operations that do not require a response.</TD>
</TR>

<TR>
<TD>5.12E</TD>

<TD>A packet carrying a request transaction that requires a response shall not be issued at the highest priority.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.12F</TD>

<TD>A packet carrying a response shall have a priority at least one priority level higher than the priority of the associated request.</TD>
</TR>

<TR>
<TD>5.12G</TD>

<TD>A switch processing element port shall accept an error-free packet of priority N if there is no packet of priority greater than or equal to N that was previously received by the port and is still waiting in the switch to be forwarded.</TD>
</TR>

<TR>
<TD>5.12G1</TD>

<TD>A switch processing element port must have at least as many maximum length packet input buffers as there are priority levels.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.12G2</TD>

<TD>A minimum of one maximum length packet input buffer must be reserved for each priority level.   An input buffer reserved for priority N might be restricted to only priority N packets or might be allowed to hold packets of priority greater than or equal to N, either approach complies with the rule.</TD>
</TR>

<TR>
<TD>5.12H</TD>

<TD>A switch processing element port that transmits a priority N packet that is forced to retry by the connected device shall select a packet of priority greater than N, if one is available, for transmission.</TD>
</TR>

<TR>
<TD>5.12I</TD>

<TD>An end point processing element port shall accept an error-free packet of priority N if the port has enough space for the packet in the input buffer space of the port allocated for packets of priority N.</TD>
</TR>

<TR>
<TD>5.12J</TD>

<TD>Lack of input buffer space is the only reason an end point may retry a packet.</TD>

<TD/>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.12K</TD>

<TD>The decision of an end point processing element to accept or retry an error-free packet of priority N shall not depend on the ability of the end point to issue request packets of priority less than or equal to N from any of its ports.</TD>
</TR>

<TR>
<TD>5.12K1</TD>

<TD>A port may not fill all of its buffers that can be used to hold packets awaiting transmission with packets carrying request transactions.</TD>
</TR>

<TR>
<TD>5.12K2</TD>

<TD>A port must have a way of preventing output blockage at priority less than or equal to N, due to congestion in the connected device, from resulting in a lack of input buffer space for inbound packets of priority greater than or equal to N.</TD>
</TR>

<TR>
<TD>5.13</TD>

<TD>Error Detection and Recovery</TD>

<TD>Part 6, Sec. 5.13</TD>
</TR>

<TR>
<TD>5.13A</TD>

<TD>The CRC carried in a maintenance packet must be regenerated at each switch as the hop count changes.</TD>

<TD/>

<TD>Switches only</TD>
</TR>

<TR>
<TD>5.13.1</TD>

<TD>Lost Packet Detection</TD>

<TD>Part 6, Sec. 5.13.1</TD>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.13.1A</TD>

<TD>The RapidIO specifications require timeout counters for the physical layer, the port link timeout counters. The physical layer timeout occurs between the transmission of a packet and the receipt of an acknowledgment control symbol.</TD>
</TR>

<TR>
<TD>5.13.1B</TD>

<TD>The RapidIO specifications require timeout counters for the logical layer, the port response timeout counters. The logical layer timeout occurs between the issuance of a request packet that requires a response packet and the receipt of that response packet. This timeout is counted from the time that the logical layer issues the packet to the physical layer to the time that the associated response packet is delivered from the physical layer to the logical layer.</TD>
</TR>

<TR>
<TD>5.13.1C</TD>

<TD>Certain GSM operations may require two response transactions, and both must be received for the operation to be considered complete. In the case of a device implementation with multiple links, one response packet may be returned on the same link where the operation was initiated and the other response packet may be returned on a different link. If this behavior is supported by the issuing processing element, the port response timeout implementation must look for both responses, regardless on which links they are returned. </TD>

<TD/>

<TD>Globally shared memory support only</TD>
</TR>

<TR>
<TD>5.13.2</TD>

<TD>Link Behavior Under Error</TD>

<TD>Part 6, Sec. 5.13.2</TD>
</TR>

<TR>
<TD>5.13.2A</TD>

<TD>The packet transmission protocol requires that each RT packet transmitted by a port be acknowledged by the receiving port and that a port retain a copy of each RT packet that it transmits until the port receives a packet-accepted control symbol acknowledgment for the packet or the sending port determines that the packet has encountered an unrecoverable error.</TD>
</TR>

<TR>
<TD>5.13.2B</TD>

<TD>If the receiving port detects a transmission error in a packet, the port sends a packet-not-accepted control symbol acknowledgment back to the sender indicating that the packet was corrupted as received.</TD>
</TR>

<TR>
<TD>5.13.2C</TD>

<TD>After a link-request/input-status and link-response control symbol exchange, the sender begins retransmission with the next packet according to the priority/bandwidth scheduling rules.</TD>
</TR>

<TR>
<TD>5.13.2D</TD>

<TD>The RT VCs retransmit all packets that were unacknowledged at the time of the error. CT VCs continue with the next untransmitted packet.</TD>

<TD/>

<TD>Multiple VCs only</TD>
</TR>

<TR>
<TD>5.13.2E</TD>

<TD>All RT packets corrupted in transmission are retransmitted.</TD>
</TR>

<TR>
<TD>5.13.2.1</TD>

<TD>Recoverable Errors</TD>

<TD>Part 6, Sec. 5.13.2.1</TD>
</TR>

<TR>
<TD>5.13.2.1A</TD>

<TD>The following five basic types of errors are detected by a LP-Serial port:</TD>
</TR>

<TR>
<TD>5.13.2.1A1</TD>

<TD>An Idle sequence error</TD>
</TR>

<TR>
<TD>5.13.2.1A2</TD>

<TD>A control symbol error</TD>
</TR>

<TR>
<TD>5.13.2.1A3</TD>

<TD>A packet error</TD>
</TR>

<TR>
<TD>5.13.2.1A4</TD>

<TD>A column padding error</TD>
</TR>

<TR>
<TD>5.13.2.1A5</TD>

<TD>A timeout waiting for an acknowledgement or link-response control symbol</TD>
</TR>

<TR>
<TD>5.13.2.2</TD>

<TD>Idle Sequence Errors</TD>

<TD>Part 6, Sec. 5.13.2.2</TD>
</TR>

<TR>
<TD>5.13.2.2.1</TD>

<TD>IDLE1 Sequence Errors</TD>

<TD>Part 6, Sec. 5.13.2.2.1</TD>
</TR>

<TR>
<TD>5.13.2.2.1A</TD>

<TD>If an input port detects an invalid character or any valid character other then A, K, or R in an IDLE1 sequence and the port is not in the Input Error-stopped state, the port shall immediately enter the Input Error-stopped state and follow the Input Error-stopped recovery process specified in Section 5.13.2.6, &quot;Input Error-Stopped Recovery Process&quot;.</TD>
</TR>

<TR>
<TD>5.13.2.2.2</TD>

<TD>IDLE2 Sequence Errors</TD>

<TD>Part 6, Sec. 5.13.2.2.2</TD>
</TR>

<TR>
<TD>5.13.2.2.2A</TD>

<TD>If an input port detects any of the following errors in an IDLE2 sequence and the port is not in the Input Error-stopped state, the port shall immediately enter the Input Error-stopped state and follow the Input Error-stopped recovery process specified in Section 5.13.2.6, &quot;Input Error-Stopped Recovery Process&quot;.</TD>
</TR>

<TR>
<TD>5.13.2.2.2A1</TD>

<TD>An invalid character or any special character other than A, K, M or R</TD>
</TR>

<TR>
<TD>5.13.2.2.2A2</TD>

<TD>After lane alignment is achieved, a column that contains an A, but is not all As.</TD>
</TR>

<TR>
<TD>5.13.2.2.2A3</TD>

<TD>After lane alignment is achieved, a column that contains a K, but is not all Ks.</TD>
</TR>

<TR>
<TD>5.13.2.2.2A4</TD>

<TD>After lane alignment is achieved, a column that contains a M, but is not all Ms.</TD>

<TD/>

<TD>IDLE2 support only</TD>
</TR>

<TR>
<TD>5.13.2.2.2A5</TD>

<TD>After lane alignment is achieved, a column that contains a R, but is not all Rs.</TD>
</TR>

<TR>
<TD>5.13.2.2.2A6</TD>

<TD>After lane alignment is achieved, a column that contains a data character, but is not all data characters.</TD>
</TR>

<TR>
<TD>5.13.2.3</TD>

<TD>Control Symbol Errors</TD>

<TD>Part 6, Sec. 5.13.2.3</TD>
</TR>

<TR>
<TD>5.13.2.3.1</TD>

<TD>Link Protocol Violations</TD>

<TD>Part 6, Sec. 5.13.2.3.1</TD>
</TR>

<TR>
<TD>5.13.2.3.1A</TD>

<TD>The reception of a control symbol with no detected corruption that violates the link protocol shall cause the receiving port to immediately enter the appropriate Error-stopped state.</TD>
</TR>

<TR>
<TD>5.13.2.3.1B</TD>

<TD>Stype1 control symbol protocol errors shall cause the receiving port to immediately enter the Input Error-stopped state if not already in the Input Error-stopped state and follow the Input Error-stopped recovery process specified in Section 5.13.2.6, &quot;Input Error-Stopped Recovery Process&quot;.</TD>
</TR>

<TR>
<TD>5.13.2.3.1C</TD>

<TD>Stype0 control symbol protocol errors shall cause the receiving port to immediately enter the Output Error-stopped state if not already in the Output Error-stopped state and follow the Output Error-stopped recovery process specified in Section 5.13.2.7, &quot;Output Error-Stopped Recovery Process&quot;.</TD>
</TR>

<TR>
<TD>5.13.2.3.1D</TD>

<TD>If both stype0 and stype1 control symbols contain protocol errors, then the receiving port shall enter both Error-stopped states and follow both error recovery processes.</TD>
</TR>

<TR>
<TD>5.13.2.3.1E</TD>

<TD>Link protocol violations include the following:</TD>
</TR>

<TR>
<TD>5.13.2.3.1E1</TD>

<TD>Unexpected packet-accepted, packet-retry, or packet-not-accepted control symbol.</TD>
</TR>

<TR>
<TD>5.13.2.3.1E2</TD>

<TD>Packet acknowledgment control symbol with an unexpected packet_ackID value.</TD>
</TR>

<TR>
<TD>5.13.2.3.1E3</TD>

<TD>Link timeout while waiting for an acknowledgment or link-response control symbol.</TD>
</TR>

<TR>
<TD>5.13.2.3.1E4</TD>

<TD>Receipt of a packet-retry symbol when operating in multi-VC mode.</TD>
</TR>

<TR>
<TD>5.13.2.3.1F</TD>

<TD>The following does not constitute a protocol violation:&#8226; Receipt of a VC_status symbol when operating in single VC mode. Unexpected VC_status symbols are discarded.</TD>
</TR>

<TR>
<TD>5.13.2.3.2</TD>

<TD>Corrupted Control Symbols</TD>

<TD>Part 6, Sec. 5.13.2.3.2</TD>
</TR>

<TR>
<TD>5.13.2.3.2A</TD>

<TD>The reception of a control symbol with detected corruption shall cause the receiving port to immediately enter the Input Error-stopped state if not already in the Input Error-stopped state and follow the Input Error-stopped recovery process specified in Section 5.13.2.6, &quot;Input Error-Stopped Recovery Process&quot;.</TD>
</TR>

<TR>
<TD>5.13.2.3.2B</TD>

<TD>Input ports detect the following types of control symbol corruption.</TD>
</TR>

<TR>
<TD>5.13.2.3.2B1</TD>

<TD>A control symbol containing invalid characters or valid but non-data characters.</TD>
</TR>

<TR>
<TD>5.13.2.3.2B2</TD>

<TD>A control symbol with an incorrect CRC value.</TD>
</TR>

<TR>
<TD>5.13.2.3.2B3</TD>

<TD>A control symbol whose start delimiter (SC or PD) occurs in a lane whose lane_number mod4 != 0.</TD>
</TR>

<TR>
<TD>5.13.2.3.2B4</TD>

<TD>A long control symbol that does not have an end delimiter in the seventh character position after its start delimiter and with the same value as the start delimiter.</TD>
</TR>

<TR>
<TD>5.13.2.4</TD>

<TD>Packet Errors</TD>

<TD>Part 6, Sec. 5.13.2.4</TD>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.13.2.4A</TD>

<TD>Each packet received by a port shall be checked for the following types of errors:</TD>
</TR>

<TR>
<TD>5.13.2.4A1</TD>

<TD>Packet with an unexpected ackID value.</TD>
</TR>

<TR>
<TD>5.13.2.4A2</TD>

<TD>Packet with an incorrect CRC value.</TD>
</TR>

<TR>
<TD>5.13.2.4A3</TD>

<TD>Packet containing invalid characters or valid non-data characters.</TD>
</TR>

<TR>
<TD>5.13.2.4A4</TD>

<TD>Packet that exceeds the maximum packet size (276 bytes).</TD>
</TR>

<TR>
<TD>5.13.2.4B</TD>

<TD>With one exception, the reception of a packet with any of the above errors shall cause the receiving port to immediately enter the Input Error-stopped state if not already in the Input Error-stopped state and follow the Input Error-stopped recovery process specified in Section 5.13.2.6, &quot;Input Error-Stopped Recovery Process&quot;.</TD>
</TR>

<TR>
<TD>5.13.2.4c</TD>

<TD>The exception occurs when the link to which the port is connected is operating with the IDLE2 idle sequence, the packet in which one or more errors were detected was canceled by a link-request control symbol, and the only errors detected in the packet were the presence of one or more M special characters and may cause excessive packet length. In this case, the errors detected in the packet shall be ignored and the packet handled as a canceled packet as specified in Section 5.10, &quot;Canceling Packets&quot;.</TD>
</TR>

<TR>
<TD>5.13.2.5</TD>

<TD>Link Timeout</TD>

<TD>Part 6, Sec. 5.13.2.5</TD>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.13.2.5A</TD>

<TD>A link timeout while waiting for an acknowledgment or link-response control symbol is handled as a link protocol violation as described in Section 5.13.2.3.1, &quot;Link Protocol Violations&quot;.</TD>
</TR>

<TR>
<TD>5.13.2.6</TD>

<TD>Input Error-Stopped Recovery Process</TD>

<TD>Part 6, Sec. 5.13.2.6</TD>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.13.2.6A</TD>

<TD>When the input side of a port detects a transmission error, it immediately enters the Input Error-stopped state.</TD>
</TR>

<TR>
<TD>5.13.2.6B</TD>

<TD>To recover from this state, the input side of the port takes the following actions.</TD>
</TR>

<TR>
<TD>5.13.2.6B1</TD>

<TD>Record the condition(s) that caused the port to enter the Input Error-stopped state.</TD>
</TR>

<TR>
<TD>5.13.2.6B2</TD>

<TD>If an error(s) was detected in a control symbol or packet, ignore and discard the corrupted control symbol or packet.</TD>
</TR>

<TR>
<TD>5.13.2.6B3</TD>

<TD>Cause the output side of the port to issue a packet-not-accepted control symbol.</TD>
</TR>

<TR>
<TD>5.13.2.6B4</TD>

<TD>Subsequent to the event that caused the port to enter the Input Error-stopped state and prior to the reception of a link-request/input-status control symbol, discard without acknowledgement or error report all packets that are received for VCs operating in RT mode.</TD>
</TR>

<TR>
<TD>5.13.2.6B5</TD>

<TD>Subsequent to the event that caused the port to enter the Input Error-stopped state and prior to the reception of a link-request/input-status control symbol, accept without acknowledgement (accept silently) all error free packets that are received for VCs operating in CT mode for which the VC specified in the packet has buffer space available.</TD>

<TD/>

<TD>Multiple VCs with CT support only</TD>
</TR>

<TR>
<TD>5.13.2.6B6</TD>

<TD>Subsequent to the event that caused the port to enter the Input Error-stopped state and prior to the reception of a link-request/input-status control symbol, discard without acknowledgement all packets that are received for VCs operating in CT mode which are not error free or for which the VC specified in the packet does not have buffer space available.</TD>
</TR>

<TR>
<TD>5.13.2.6B7</TD>

<TD>When a link-request/input-status control symbol is received from the connected port, cause the output side of the port to transmit a link-response control symbol and if the transmitter-controlled flow control is in use on the link, to also transmit a VC_Status control symbol for each of VC1-8 that is active. The transmission of a VC_Status control symbol for each of VC1-8 that is active is optional if receiver-controlled flow control in use on the link.</TD>
</TR>

<TR>
<TD>5.13.2.6B8</TD>

<TD>The input side of the port should also cause the output side of the port to transmit a status control symbol (for VC0).</TD>
</TR>

<TR>
<TD>5.13.2.6B9</TD>

<TD>The input side of the port then exits the Input Error-stopped state and resumes normal packet reception.</TD>
</TR>

<TR>
<TD>5.13.2.6C</TD>

<TD>The transmission of the link-response, status and VC-status control symbols is subject to the following requirements.</TD>
</TR>

<TR>
<TD>5.13.2.6C1</TD>

<TD>The link-response control symbol shall be transmitted either before any of the status and VC-status control symbols are transmitted or after all of the status and VC-status control symbols are transmitted.</TD>
</TR>

<TR>
<TD>5.13.2.6C2</TD>

<TD>The status and VC-status control symbols that are transmitted shall be transmitted in the following order. If a status control symbol is transmitted it shall be transmitted first before any of the VC-status control symbols. Any VC-status control symbols that are transmitted shall be transmitted after the status control symbol and in order of increasing VCID.</TD>
</TR>

<TR>
<TD>5.13.2.6C3</TD>

<TD>The link-response control symbol shall not be transmitted until the input side of the port is ready to resume packet reception and either the buffer consumption of all packets received by the port before the link-request/input-status control symbol has been determined or the port is able to maintain the distinction after packet reception resumes between packets received before the reception of the link-request/input-status control symbol and packets received after the reception of the link-request/input-status control symbol.</TD>
</TR>

<TR>
<TD>5.13.2.6C4</TD>

<TD>The status or VC-status control symbol for a VC operating in RT mode shall indicate the number of receive buffers available for that VC inclusive of the buffer consumption of all packets received and accepted by the port for that VC before the event that caused the port to enter the Input Error-stopped state.</TD>
</TR>

<TR>
<TD>5.13.2.6C5</TD>

<TD>The VC-status control symbol for a VC operating in CT mode shall indicate the number of receive buffers available for that VC inclusive of the buffer consumption of all packets received and accepted by the port for that VC before the link-request/input-status control symbol was received.</TD>

<TD/>

<TD>Multiple VCs with CT support only</TD>
</TR>

<TR>
<TD>5.13.2.6C6</TD>

<TD>The status and VC-status control symbols shall be transmitted before any packet acknowledgment control symbols are transmitted for packets received after the link-request/input-status control symbol was received.</TD>
</TR>

<TR>
<TD>5.13.2.7</TD>

<TD>Output Error-Stopped Recovery Process</TD>

<TD>Part 6, Sec. 5.13.2.7</TD>

<TD/>

<TD>Inter-op</TD>
</TR>

<TR>
<TD>5.13.2.7A</TD>

<TD>To recover from the Output Error-stopped state, the output side of a port takes the following actions.</TD>
</TR>

<TR>
<TD>5.13.2.7A1</TD>

<TD>Immediately stops transmitting new packets.</TD>
</TR>

<TR>
<TD>5.13.2.7A2</TD>

<TD>Resets the link packet acknowledgment timers for all transmitted but unacknowledged packets.</TD>
</TR>

<TR>
<TD>5.13.2.7A3</TD>

<TD>Transmits an input-status link-request/input-status (restart-from-error) control symbol.</TD>
</TR>

<TR>
<TD>5.13.2.7A4</TD>

<TD>When the link-response is received, VCs operating in RT mode back up to the first unaccepted packet in each VC.</TD>
</TR>

<TR>
<TD>5.13.2.7A5</TD>

<TD>VCs operating in CT mode silently assume the unacknowledged packets were accepted and adjust their state accordingly.</TD>

<TD/>

<TD>Multiple VCs with CT support only</TD>
</TR>

<TR>
<TD>5.13.2.7A6</TD>

<TD>The port exits the Output Error-stopped state and resumes transmission with the next RT or CT packet according to the bandwidth allocation algorithm using the ackID value contained in the link-response control symbol.</TD>
</TR>
</Table>
</Worksheet>

<Worksheet>
<Table>
<TR>
<TD id="LinkTarget_2083">Item #</TD>

<TD>Compliance Item</TD>

<TD>Specification Reference</TD>

<TD>Optional</TD>

<TD>Interop Item</TD>
</TR>

<TR>
<TD>6</TD>

<TD>LP-Serial Registers</TD>

<TD>Part 6, Chap. 6</TD>
</TR>

<TR>
<TD>6.2</TD>

<TD>Register Map</TD>

<TD>Part 6, Sec. 6.2</TD>
</TR>

<TR>
<TD>6.2A</TD>

<TD>LP-Serial registers utilize the Extended Features blocks and can be accessed using RapidIO Part 1: Input/Output Logical Specification maintenance operations.</TD>
</TR>

<TR>
<TD>6.2B</TD>

<TD>Read and write accesses to reserved register offsets shall terminate normally and not cause an error condition in the target device.</TD>
</TR>

<TR>
<TD>6.2C</TD>

<TD>LP-Serial registers shall be mapped according to Table 6-1.</TD>
</TR>

<TR>
<TD>6.2D</TD>

<TD>All register maps described in this session can be extended or shortened if more or less port definitions are required for a device.</TD>
</TR>

<TR>
<TD>6.2E</TD>

<TD>If less than 16 ports are defined, remaining register map offset can be used for another Extended Features block.</TD>
</TR>

<TR>
<TD>6.2F</TD>

<TD>Port Maintenance Block Header CSR is read-only.</TD>
</TR>

<TR>
<TD>6.2G</TD>

<TD>Port Maintenance Block Header CSR has the proper Extended Features block ID in the EF_ID field.</TD>
</TR>

<TR>
<TD>6.3</TD>

<TD>Reserved Register and Bit Behavior</TD>

<TD>Part 6, Sec. 6.3</TD>
</TR>

<TR>
<TD>6.3A</TD>

<TD>Accesses to reserved registers and register bits shall follow Table 6-2 , this applies to all registers specified in Chapter 6.</TD>
</TR>

<TR>
<TD>6.4</TD>

<TD>Capability Registers (CARs)</TD>

<TD>Part 6, Sec. 6.4</TD>
</TR>

<TR>
<TD>6.4A</TD>

<TD>Every processing element shall contain a set of registers that allows an external processing element to determine its capabilities using the I/O logical maintenance read operation.</TD>
</TR>

<TR>
<TD>6.4B</TD>

<TD>All registers are 32 bits wide and are organized and accessed in 32-bit (4 byte) quantities, although some processing elements may optionally allow larger accesses.</TD>
</TR>

<TR>
<TD>6.4C</TD>

<TD>CARs are read-only.</TD>
</TR>

<TR>
<TD>6.4D</TD>

<TD>CARs are big-endian with bit 0 the most significant bit.</TD>
</TR>

<TR>
<TD>6.4.1</TD>

<TD>Processing Element Features CAR</TD>

<TD>Part 6, Sec. 6.4.1</TD>
</TR>

<TR>
<TD>6.4.1A</TD>

<TD>Bit Settings of Processing Element Features CAR shall be mapped as in  table 6-3.</TD>
</TR>

<TR>
<TD>6.4.1B</TD>

<TD>The multiport bit shall be implemented by devices that support the LP-Serial IDLE2 sequence, but is optional for devices that do not support the LP-Serial IDLE2 sequence. If this bit is not implemented it is Reserved.</TD>

<TD/>

<TD>Required if idle2 is supported</TD>
</TR>

<TR>
<TD>6.4.1C</TD>

<TD>If the multiport bit is implemented, the Switch Port Information CAR at Configuration Space Offset 0x14 shall be implemented regardless of the state of bit 3 of the Processing Element Features CAR.</TD>

<TD/>

<TD>Required if idle2 is supported</TD>
</TR>

<TR>
<TD>6.4.1D</TD>

<TD>The CRF bit should be set to 1 if PE supports CRF, otherwise set it to 0.</TD>
</TR>

<TR>
<TD>6.5</TD>

<TD>LP-Serial Extended Feature Blocks</TD>

<TD>Part 6, Sec. 6.5</TD>
</TR>

<TR>
<TD>6.5A</TD>

<TD>All registers in the LP-Serial Extended Feature Blocks are 32 bits in length and aligned to 32 bit boundaries.</TD>
</TR>

<TR>
<TD>6.5B</TD>

<TD>All registers in the 1x/4x/LP-Serial Physical Layer Specification Extended Features data structure can be read and/or written, as per constraints specified in Part 6, Chapter 6. The Extended Features Space is located at bytes offsets 0x0100 through 0xFFFC of the device configuration space.</TD>

<TD>Part 6, Sec. 6.2</TD>
</TR>

<TR>
<TD>6.5.1</TD>

<TD>Generic End Point Devices</TD>

<TD>Part 6, Sec. 6.5.1</TD>

<TD>Required for generic end point device</TD>
</TR>

<TR>
<TD>6.5.1A</TD>

<TD>All register maps described in this session can be extended or shortened if more or less port definitions are required for a device.</TD>
</TR>

<TR>
<TD>6.5.1B</TD>

<TD>This Extended Features register block is assigned Extended Features block ID=0x0001.</TD>
</TR>

<TR>
<TD>6.5.1C</TD>

<TD>Registers of the RapidIO LP-Serial Extended Features Block for generic end point devices shall be mapped according to Table 6-4.</TD>
</TR>

<TR>
<TD>6.5.1D</TD>

<TD>If less than 16 ports are defined, remaining register map offset can be used for another Extended Features block.</TD>
</TR>

<TR>
<TD>6.5.1E</TD>

<TD>The Block Offset is the offset relative to the 16-bit Extended Features Pointer (EF_PTR) that points to the beginning of the block. The address of a byte in the block is calculated by adding the block byte offset to EF_PTR that points to the beginning of the block.</TD>
</TR>

<TR>
<TD>6.5.2</TD>

<TD>Generic End Point Devices, software assisted error recovery option</TD>

<TD>Part 6, Sec. 6.5.2</TD>

<TD>Required for end point device with software assisted error recovery option</TD>
</TR>

<TR>
<TD>6.5.2A</TD>

<TD>This Extended Features register block is assigned Extended Features block ID=0x0002.</TD>
</TR>

<TR>
<TD>6.5.2B</TD>

<TD>Registers generic RapidIO LP-Serial end point devices with software assisted error recovery shall be mapped according to Table 6-5.</TD>
</TR>

<TR>
<TD>6.5.2C</TD>

<TD>All register maps described in this session can be extended or shortened if more or less port definitions are required for a device.</TD>
</TR>

<TR>
<TD>6.5.2D</TD>

<TD>If less than 16 ports are defined, remaining register map offset can be used for another Extended Features block.</TD>
</TR>

<TR>
<TD>6.5.3</TD>

<TD>Generic End Point Free Devices</TD>

<TD>Part 6, Sec. 6.5.3</TD>

<TD>Required for generic end point free device </TD>
</TR>

<TR>
<TD>6.5.3A</TD>

<TD>This Extended Features register block uses extended features block ID=0x0003.</TD>
</TR>

<TR>
<TD>6.5.3B</TD>

<TD>Registers of generic RapidIO LP-Serial end point-free devices shall be mapped according to Table 6-6.</TD>
</TR>

<TR>
<TD>6.5.3C</TD>

<TD>The Block Offset is the offset relative to the 16-bit Extended Features Pointer (EF_PTR) that points to the beginning of the block. The address of a byte in the block is calculated by adding the block byte offset to EF_PTR that points to the beginning of the block.</TD>
</TR>

<TR>
<TD>6.5.3D</TD>

<TD>All register maps described in this session can be extended or shortened if more or less port definitions are required for a device.</TD>
</TR>

<TR>
<TD>6.5.3E</TD>

<TD>If less than 16 ports are defined, remaining register map offset can be used for another Extended Features block.</TD>
</TR>

<TR>
<TD>6.5.4</TD>

<TD>Generic End Point Free Devices, software assisted error recovery option</TD>

<TD>Part 6, Sec. 6.5.4</TD>

<TD>Required for end point free device with software assisted error recovery option</TD>
</TR>

<TR>
<TD>6.5.4A</TD>

<TD>This Extended Features register block is assigned Extended Features block ID=0x0009.</TD>
</TR>

<TR>
<TD>6.5.4B</TD>

<TD>Registers of generic RapidIO LP-Serial end point-free devices with software assisted error recovery shall be mapped according to Table 6-7.</TD>
</TR>

<TR>
<TD>6.5.4C</TD>

<TD>The Block Offset is the offset relative to the 16-bit Extended Features Pointer (EF_PTR) that points to the beginning of the block. The address of a byte in the block is calculated by adding the block byte offset to EF_PTR that points to the beginning of the block.</TD>
</TR>

<TR>
<TD>6.5.4D</TD>

<TD>All register maps described in this session can be extended or shortened if more or less port definitions are required for a device.</TD>
</TR>

<TR>
<TD>6.5.4E</TD>

<TD>If less than 16 ports are defined, remaining register map offset can be used for another Extended Features block.</TD>
</TR>

<TR>
<TD>6.6</TD>

<TD>LP-Serial Command and Status Registers (CSRs)</TD>

<TD>Part 6, Sec. 6.6</TD>
</TR>

<TR>
<TD>6.6A</TD>

<TD>All Command and Status registers are 32 bits in length and are aligned to 32 bit boundaries. All CSRs are accessed as 4 byte entities.</TD>
</TR>

<TR>
<TD>6.6B</TD>

<TD>CSRs are big endian with bit 0 the most significant bit.</TD>
</TR>

<TR>
<TD>6.6.1</TD>

<TD>LP-Serial Register Block Header</TD>

<TD>Part 6, Sec. 6.6.1</TD>
</TR>

<TR>
<TD>6.6.1A</TD>

<TD>Block offset for LP-Serial Register Block Header is 0x0.</TD>
</TR>

<TR>
<TD>6.6.1B</TD>

<TD>The LP-Serial register block header register contains the EF_PTR to the next extended features block and the EF_ID that identifies LP-Serial Extended Feature Block for which this is the register block header.</TD>
</TR>

<TR>
<TD>6.6.1C</TD>

<TD>Bit Settings of LP-Serial Register Block Header shall be implemented according to Part 6, Table 6-8.</TD>
</TR>

<TR>
<TD>6.6.2</TD>

<TD>Port Link Timeout Control CSR</TD>

<TD>Part 6, Sec. 6.6.2</TD>
</TR>

<TR>
<TD>6.6.2A</TD>

<TD>Block offset for Port Link Timeout Control CSR is 0x20.</TD>
</TR>

<TR>
<TD>6.6.2B</TD>

<TD>The port link timeout control register contains the timeout timer value for all ports on a device.</TD>
</TR>

<TR>
<TD>6.6.2C</TD>

<TD>The port link timeout is for link events such as sending a packet to receiving the corresponding acknowledge and sending a link-request to receiving the corresponding link-response.</TD>
</TR>

<TR>
<TD>6.6.2D</TD>

<TD>The port link timeout control register reset value is the maximum timeout interval (all 1s), and represents between 3 and 6 seconds.</TD>
</TR>

<TR>
<TD>6.6.2E</TD>

<TD>Bit Settings of Port Link Timeout Control CSR shall be implemented according to Part 6, Table 6-9.</TD>
</TR>

<TR>
<TD>6.6.3</TD>

<TD>Port Response Timeout Control CSR</TD>

<TD>Part 6, Sec. 6.6.3</TD>

<TD>Required for end point device</TD>
</TR>

<TR>
<TD>6.6.3A</TD>

<TD>Block offset for Port Response Timeout Control CSR is 0x24.</TD>
</TR>

<TR>
<TD>6.6.3B</TD>

<TD>The port response timeout control register contains the timeout timer count for all ports on a device.</TD>
</TR>

<TR>
<TD>6.6.3C</TD>

<TD>Port Response Timeout is for sending a request packet to receiving the corresponding response packet.</TD>
</TR>

<TR>
<TD>6.6.3D</TD>

<TD>The port response timeout control register reset value is the maximum timeout interval (all 1s), and represents between 3 and 6 seconds.</TD>
</TR>

<TR>
<TD>6.6.3E</TD>

<TD>Bit Settings of Port Response Timeout Control CSR shall be implemented according to Part 6, Table 6-10.</TD>
</TR>

<TR>
<TD>6.6.4</TD>

<TD>Port General Control CSR</TD>

<TD>Part 6, Sec. 6.6.4</TD>
</TR>

<TR>
<TD>6.6.4A</TD>

<TD>Block offset for Port General Control CSR is 0x3C.</TD>
</TR>

<TR>
<TD>6.6.4B</TD>

<TD>The bits accessible through the Port General Control CSR are bits that apply to all ports in a device.</TD>
</TR>

<TR>
<TD>6.6.4C</TD>

<TD>Bit settings of Port General Control CSR for generic end point device shall be implemneted according to Part 6, Table 6-11.</TD>
</TR>

<TR>
<TD>6.6.4D</TD>

<TD>Bit settings for General Port Control CSR For generic end point free device shall be implemented according to Part 6, Table 6-12.</TD>
</TR>

<TR>
<TD>6.6.4E</TD>

<TD>Discovered field shall set to 1 as soon as a maintenance write request is received to this register bit and Discovered bit shall be  0 after reset for this device.</TD>

<TD>sRIO1.3 checklist</TD>
</TR>

<TR>
<TD>6.6.5</TD>

<TD>Port n Link Maintenance Request CSRs</TD>

<TD>Part 6, Sec. 6.6.5</TD>

<TD>Required if software assisted error recovery is supported</TD>
</TR>

<TR>
<TD>6.6.5A</TD>

<TD>A write to one of these registers generates a link-request control symbol on the corresponding RapidIO port interface.</TD>
</TR>

<TR>
<TD>6.6.5B</TD>

<TD>Bit settings of Port n Link Maintenance Request CSRs shall follow Part 6, Table 6-13.</TD>
</TR>

<TR>
<TD>6.6.5C</TD>

<TD>The reset value of the command field is 3'b000.</TD>
</TR>

<TR>
<TD>6.6.5D</TD>

<TD>If the field is read, it returns the last written value.</TD>
</TR>

<TR>
<TD>6.6.5E</TD>

<TD>The reset value of the Port n Link Maintenance Request CSR is 0.</TD>
</TR>

<TR>
<TD>6.6.6</TD>

<TD>Port n Link Maintenance Response CSRs.</TD>

<TD>Part 6, Sec. 6.6.6</TD>

<TD>Required if software assisted error recovery is supported</TD>
</TR>

<TR>
<TD>6.6.6A</TD>

<TD>A read to Port n Link Maintenance Response CSRs returns the status received in a link-response control symbol.</TD>
</TR>

<TR>
<TD>6.6.6B</TD>

<TD>Port n Link Maintenance Response CSR is read-only.</TD>
</TR>

<TR>
<TD>6.6.6C</TD>

<TD>Bit settings of Port n Link Maintenance Response CSRs shall follow Part 6, Table 6-14.</TD>
</TR>

<TR>
<TD>6.6.6D</TD>

<TD>Response_valid field indicates that the link-response has been received and the status fields are valid. If the link-request does not cause a link-response, this bit indicates that the link-request has been transmitted.</TD>
</TR>

<TR>
<TD>6.6.6E</TD>

<TD>Response_valid field clears on read.</TD>
</TR>

<TR>
<TD>6.6.6F</TD>

<TD>The reset value of the Port n Link Maintenance Response CSR register is 0.</TD>
</TR>

<TR>
<TD>6.6.7</TD>

<TD>Port n Local ackID CSRs</TD>

<TD>Part 6, Sec. 6.6.7</TD>

<TD>Required if software assisted error recovery is supported</TD>
</TR>

<TR>
<TD>6.6.7A</TD>

<TD>Block offset for Port n Local ackID CSRs starts from 0x48, add 0x20 for each additional port.</TD>
</TR>

<TR>
<TD>6.6.7B</TD>

<TD>A read to Port n Local ackID CSRs returns the local ackID status for both the output and input sides of the ports.</TD>
</TR>

<TR>
<TD>6.6.7C</TD>

<TD>Bit settings for Port n Local ackID Status CSRs shall follow Part 6, Table 6-15.</TD>
</TR>

<TR>
<TD>6.6.7D</TD>

<TD>Writing 0b1 to Clr_outstanding_ackIDs bit causes all outstanding unacknowledged packets to be discarded.</TD>
</TR>

<TR>
<TD>6.6.7E</TD>

<TD>The Clr_outstanding_ackIDs  bit is always logic 0 when read.</TD>
</TR>

<TR>
<TD>6.6.7F</TD>

<TD>Outstanding_ackID field indicates the ackID value expected in the next received acknowledge control symbol.</TD>
</TR>

<TR>
<TD>6.6.7G</TD>

<TD>Outbound_ackID field indicates output port next transmitted ackID value. Software writing this field can force retransmission of outstanding unacknowledged packets in order to manually implement error recovery.</TD>
</TR>

<TR>
<TD>6.6.7H</TD>

<TD>Port n Local ackID CSRs reset value is 0x0</TD>
</TR>

<TR>
<TD>6.6.8</TD>

<TD>Port n Error and Status CSRs</TD>

<TD>Part 6, Sec. 6.6.8</TD>
</TR>

<TR>
<TD>6.6.8A</TD>

<TD>Block offset of Port n Error and Status CSRs starts from 0x58, add 0x20 for each additional port.</TD>
</TR>

<TR>
<TD>6.6.8B</TD>

<TD> Bit settings of Port n Error and Status CSRs shall follow Part 6, Table 6-16.</TD>
</TR>

<TR>
<TD>6.6.8C</TD>

<TD>&quot;Idle Sequence 2 Enable&quot; bit should reset to &quot;1&quot; if  &quot;idle Sequence2 Support&quot; bit is set, otherwise reset to &quot;0&quot;.</TD>
</TR>

<TR>
<TD>6.6.8D</TD>

<TD>The port shall not allow the &quot;Idle Sequence 2 Enable&quot; bit to be set unless idle sequence 2 is supported and shall not allow this bit to be cleared if only idle sequence 2 is supported.</TD>
</TR>

<TR>
<TD>6.6.8E</TD>

<TD>All fields defined in this register are read only except the &quot;Idle Sequence 2 Enable&quot; bit which is R/W.</TD>
</TR>

<TR>
<TD>6.6.8F</TD>

<TD>&quot;Output Retry-encountered&quot; bit is set when &quot;output retry-stopped&quot; bit is set. Once set, remains set until written with a logic 1 to clear.</TD>
</TR>

<TR>
<TD>6.6.8G</TD>

<TD>&quot;Output Retried&quot; bit is set when &quot;output retry-stopped&quot; bit is set and is cleared when a packet-accepted or a packet-not-accepted control symbol is received.</TD>
</TR>

<TR>
<TD>6.6.8H</TD>

<TD>&quot;Output Error-encountered&quot; bit is set when &quot;Output Error-stopped&quot; bit  is set. Once set, remains set until written with a logic 1 to clear.</TD>
</TR>

<TR>
<TD>6.6.8I</TD>

<TD>&quot;Input Error-encountered&quot; bit is set when &quot;Input Error-stopped&quot; bit is set. Once set, remains set until written with a logic 1 to clear.</TD>
</TR>

<TR>
<TD>6.6.8J</TD>

<TD>&quot;Port-write Pending&quot;  bit is only valid if the device is capable of issuing a maintenance port-write transaction. Once set remains set until written with a logic 1 to clear.</TD>
</TR>

<TR>
<TD>6.6.8K</TD>

<TD>&quot;Port Error&quot; bit indicates Input or output port has encountered an error from which hardware was unable to recover. Once set, remains set until written with a logic 1 to clear.</TD>
</TR>

<TR>
<TD>6.6.9</TD>

<TD>Port n Control CSRs</TD>

<TD>Part 6, Sec. 6.6.9</TD>
</TR>

<TR>
<TD>6.6.9A</TD>

<TD>Block offset of Port n Control CSRs starts from 0x5C, add 0x20 for each additional port.</TD>
</TR>

<TR>
<TD>6.6.9B</TD>

<TD>Bit settings of Port n Control CSRs shall follow Part 6, Table 6-17.</TD>
</TR>

<TR>
<TD>6.6.9C</TD>

<TD>&quot;Port Width Support&quot; field is read-only field. It indicates port width modes supported by the port.</TD>
</TR>

<TR>
<TD>6.6.9D</TD>

<TD>&quot;Initialized Port Width&quot; indicates width of the ports after initialized. It is read-only.</TD>
</TR>

<TR>
<TD>6.6.9E</TD>

<TD>The port shall not allow the enabling of a width mode that is not supported by the port.</TD>
</TR>

<TR>
<TD>6.6.9F</TD>

<TD>A change in the value of the &quot;Port Width Override&quot; and &quot;Extended port width override&quot; field shall cause the port to re-initialize using the new field value.</TD>
</TR>

<TR>
<TD>6.6.9G</TD>

<TD>If output port enable bit is not set, port is stopped and not enabled to issue any packets except to route or respond to I/O logical MAINTENANCE packets.Control symbols are not affected and are sent normally.</TD>
</TR>

<TR>
<TD>6.6.9H</TD>

<TD>If input port enable bit is not set, port is stopped and only enabled to route or respond I/O logical MAINTENANCE packets. Control symbols are not affected and are sent normally.</TD>
</TR>

<TR>
<TD>6.6.9I</TD>

<TD>If input port enable bit is not set, the port generates packet-not-accepted control symbols to all received non-maintenance packets.</TD>
</TR>

<TR>
<TD>6.6.9J</TD>

<TD>An enumeration boundary aware system enumeration algorithm shall honor the &quot;Enumeration Boundary&quot; flag. The algorithm, on either the ingress or the egress port, shall not enumerate past a port with this bit set.</TD>
</TR>

<TR>
<TD>6.6.9K</TD>

<TD>&quot;Extended Port Width Override&quot; is used and defined in conjunction with the bits in the Port Width Override field.</TD>
</TR>

<TR>
<TD>6.6.9L</TD>

<TD>&quot;Extended Port Width Support&quot; field indicates additional port width modes supported by the port (read-only).</TD>
</TR>

<TR>
<TD>6.6.9M</TD>

<TD>The Enumeration Boundary reset value is implementation dependent; provision shall be made to allow the reset value to be configurable if this feature is supported.</TD>
</TR>

<TR>
<TD>6.6.10</TD>

<TD>Port n Control 2 CSRs</TD>

<TD>Part 6, Sec. 6.6.10</TD>
</TR>

<TR>
<TD>6.6.10A</TD>

<TD>Block offset of Port n Control CSRs starts from 0x54, add 0x20 for each additional port.</TD>
</TR>

<TR>
<TD>6.6.10B</TD>

<TD>Bit settings of Port n Control 2 CSRs shall follow Part 6, Table 6-18.</TD>
</TR>

<TR>
<TD>6.6.10C</TD>

<TD>The port shall not allow &quot;Baudrate Discovery Enable&quot; bit to be set unless it supports baudrate discovery.</TD>
</TR>

<TR>
<TD>6.6.10D</TD>

<TD>The port shall not allow the &quot;BAUD Enable&quot; bits to be set unless it supports the specified Baud.</TD>
</TR>

<TR>
<TD>6.6.10E</TD>

<TD>Enable Inactive Lanes bit</TD>

<TD/>

<TD>Optional</TD>
</TR>

<TR>
<TD>6.6.10E1</TD>

<TD>The implementation of this bit is optional. When implemented, this bit allows software to force the lanes of the port that are not currently being used to carry traffic, the &#8220;inactive lanes&#8221;, to be enabled for testing while the &#8220;active lanes&#8221; continue to carry traffic. If this bit is not implemented itis reserved.</TD>
</TR>

<TR>
<TD>6.6.10E2</TD>

<TD>When a 1x/Nx or 1x/Mx/Nx port is operating in 1x mode where 1&lt;M&lt;N and N = 4, 8 or 16, lanes 0 and 2 are the active lanes and lane 1 and lanes 3 through N-1 are the inactive lanes.</TD>
</TR>

<TR>
<TD>6.6.10E3</TD>

<TD>When a 1x/Mx/Nx port is operating in Mx mode where 1&lt;M&lt;N and N = 4, 8 or 16, lanes 0 through M-1 are the active lanes and lanes M through N-1 are the inactive lanes.</TD>
</TR>

<TR>
<TD>6.6.10E4</TD>

<TD>Use of the test mode enabled by the implementation of the &quot;Enable Inactive Lanes&quot; bit to monitor the behavior of the inactive lanes requires that this bit must be set in both ports and that all link width modes wider than the desired Mx mode must be disabled in the Port n Control CSR of both ports.</TD>

<TD/>

<TD>Optional</TD>
</TR>

<TR>
<TD>6.6.10E5</TD>

<TD>If implemented, this bit shall not be asserted when the port is connected to a link that includes retimers as defined in Section 4.11.1, &quot;Retimers&quot;.</TD>

<TD/>

<TD>Optional</TD>
</TR>

<TR>
<TD>6.6.10E6</TD>

<TD>The port&#8217;s drivers for the inactive lanes are output enabled if and only if the port&#8217;s Initialization state machine is not in the SILENT or SEEK state.</TD>

<TD/>

<TD>Optional</TD>
</TR>

<TR>
<TD>6.6.10E7</TD>

<TD>A continuous IDLE sequence of the same type as is in use on the active lanes shall be transmitted on the inactive lanes when their transmitters are output enabled.</TD>

<TD/>

<TD>Optional</TD>
</TR>

<TR>
<TD>6.6.10E8</TD>

<TD>The IDLE sequences transmitted on the inactive lanes shall comply with all rules for that type of IDLE sequence including alignment across the inactive lanes, but they are not required to use the same bit sequences or be aligned in any way relative to the IDLE sequences transmitted on the active lanes.</TD>

<TD/>

<TD>Optional</TD>
</TR>

<TR>
<TD>6.6.10E9</TD>

<TD>If IDLE2 is being used on the active lanes of the port, the inactive lanes of the port shall report their lane number and port width in the CS Field Marker and handle commands carried in the CS Field as if they were active lanes.</TD>

<TD/>

<TD>Optional</TD>
</TR>

<TR>
<TD>6.6.10F</TD>

<TD>When the &quot;Data scrambling disable&quot; bit is set, the transmit scrambler and receive descrambler are disabled for control symbol and packet data characters, but the transmit scrambler remains enabled for the generation of pseudo-random data characters for the IDLE2 random data field.</TD>

<TD/>

<TD>Optional</TD>
</TR>

<TR>
<TD>6.6.10G</TD>

<TD>The port shall not let the &quot;Remote Transmit Emphasis Control Enable&quot;  bit be set unless remote transmit emphasis control is supported and the link to which the port is connect is using idle sequence 2 (IDLE2).</TD>
</TR>

<TR>
<TD>6.6.10H</TD>

<TD>The &quot;1.25G/2.5G/3.125G/5.0G/6.25 G Baud Enable&quot; bits shall reset to &quot;1&quot; if its corresponding &quot;Baud Support&quot; bits are set, otherwise reset to 0.</TD>
</TR>

<TR>
<TD>6.7</TD>

<TD>LP-Serial Lane Extended Features Block</TD>

<TD>Part 6, Sec. 6.7</TD>
</TR>

<TR>
<TD>6.7A</TD>

<TD>All registers in this block are 32 bits in length, aligned to a 32-bit (4-byte) boundary and accessed as 4 byte entities, although some processing elements may optionally allow larger accesses.</TD>
</TR>

<TR>
<TD>6.7B</TD>

<TD>This Extended Features register block is assigned Extended Features block ID=0x000D.</TD>
</TR>

<TR>
<TD>6.7.1</TD>

<TD>Register Map</TD>

<TD>Part 6, Sec. 6.7.1</TD>
</TR>

<TR>
<TD>6.7.1A</TD>

<TD>Registers of the RapidIO LP-Serial Lane Extended Features Block shall be mapped according to Part 6, Table 6-19.</TD>
</TR>

<TR>
<TD>6.7.1B</TD>

<TD>The Block Offset is the offset relative to the 16-bit Extended Features Pointer (EF_PTR) that points to the beginning of the block. The address of a byte in the block is calculated by adding the block byte offset to EF_PTR that points to the beginning of the block.</TD>
</TR>

<TR>
<TD>6.7.1C</TD>

<TD>All register maps described in this session can be extended or shortened if more or less port definitions are required for a device.</TD>
</TR>

<TR>
<TD>6.7.1D</TD>

<TD>If less than 16 ports are defined, remaining register map offset can be used for another Extended Features block.</TD>
</TR>

<TR>
<TD>6.7.2</TD>

<TD>LP-Serial Lane Command and Status Registers (CSRs)</TD>

<TD>Part 6, Sec. 6.7.2</TD>
</TR>

<TR>
<TD>6.7.2.1</TD>

<TD>LP-Serial Register Block Header</TD>

<TD>Part 6, Sec. 6.7.2.1</TD>
</TR>

<TR>
<TD>6.7.2.1A</TD>

<TD>The LP-Serial register block header register contains the EF_PTR to the next extended features block and the EF_ID that identifies LP-Serial Lane Extended Feature Block for which this is the register block header.</TD>
</TR>

<TR>
<TD>6.7.2.1B</TD>

<TD>Bit settings for LP-Serial Register Block Header shall follow Part 6, Table 6-20.</TD>
</TR>

<TR>
<TD>6.7.2.2</TD>

<TD>Lane n Status 0 CSRs</TD>

<TD>Part 6, Sec. 6.7.2.2</TD>
</TR>

<TR>
<TD>6.7.2.2A</TD>

<TD>Block offset of Lane n Status 0 CSRs starts from 0x10, add 0x20 for each lane increment.</TD>
</TR>

<TR>
<TD>6.7.2.2B</TD>

<TD>Bit settings of Lane n Status 0 CSRs shall follow Part 6, Table 6-21.</TD>
</TR>

<TR>
<TD>6.7.2.2C</TD>

<TD>Unless otherwise specified, all bits in this register are read-only (RO).</TD>
</TR>

<TR>
<TD>6.7.2.2D</TD>

<TD>If the lane supports the IDLE2 sequence, the value of the &quot;Receiver trained&quot;  bit shall be the same as the value in the &#8220;Receiver trained&#8221; bit in the CS Field transmitted by the lane.</TD>
</TR>

<TR>
<TD>6.7.2.2E</TD>

<TD>The &quot;8B/10B decoding errors&quot;  field indicates the number of 8B/10B decoding errors that have beendetected for this lane since this register was last read. The field is reset to 0x0 when the register is read.</TD>
</TR>

<TR>
<TD>6.7.2.2F</TD>

<TD>The &quot;Lane_sync state change&quot; bit indicates whether the lane_sync signal for this lane has changed state since the bit was last read. This bit is reset to 0b0 when the register is read.</TD>
</TR>

<TR>
<TD>6.7.2.2G</TD>

<TD>The &quot;Rcvr_trained state change&quot; indicates whether the rcvr_trained signal for this lane has changed state since the bit was last read. This bit is reset to 0b0 when the register is read.</TD>
</TR>

<TR>
<TD>6.7.2.3</TD>

<TD>Lane n Status 1 CSRs</TD>

<TD>Part 6, Sec. 6.7.2.3</TD>

<TD>Required if IDLE2 supported</TD>
</TR>

<TR>
<TD>6.7.2.3A</TD>

<TD>Block offset of Lane n Status 1 CSRs starts from 0x14, add 0x20 for each lane increment.</TD>
</TR>

<TR>
<TD>6.7.2.3B</TD>

<TD>This register shall be implemented if and only if the lane supports the IDLE2 sequence.</TD>
</TR>

<TR>
<TD>6.7.2.3C</TD>

<TD>Only information from error free CS markers and CS fields shall be reported in this register.</TD>
</TR>

<TR>
<TD>6.7.2.3D</TD>

<TD>Unless otherwise specified, all bits in this register are read-only (RO).</TD>
</TR>

<TR>
<TD>6.7.2.3E</TD>

<TD>Bit settings of Lane n Status 1 CSRs shall follow Part 6, Table 6-22.</TD>
</TR>

<TR>
<TD>6.7.2.3F</TD>

<TD>The&quot;IDLE2 received&quot; bit is R/W. This bit can be reset by writing the bit with the value 0b1. Writing the bit with the value 0b0 does not change the value of the bit. </TD>
</TR>

<TR>
<TD>6.7.2.3G</TD>

<TD>When the &quot;IDLE2 information current&quot; bit is asserted, it indicates that the information is from the last IDLE2 CS Marker and CS Field that were received by the lane without detected errors, and that the lane&#8217;s lane_sync signal has remained asserted since the last CS Marker and CS Field were received.</TD>
</TR>

<TR>
<TD>6.7.2.3H</TD>

<TD>The &quot;Values changed&quot; bit is reset when the register is read.</TD>
</TR>

<TR>
<TD>6.7.2.4</TD>

<TD>Implementation Specific CSRs</TD>

<TD>Part 6, Sec. 6.7.2.4</TD>

<TD>Optional</TD>
</TR>

<TR>
<TD>6.7.2.4A</TD>

<TD>The registers shall be implemented in increasing numerical order beginning with the Lane n Status 2 CSR.</TD>

<TD/>

<TD>Required if implementation specific CSRs are implemented</TD>
</TR>

<TR>
<TD>6.7.2.4.1A</TD>

<TD>Block offset of Lane n Status 2 CSRs starts from 0x18, add 0x20 for each lane increment.</TD>
</TR>

<TR>
<TD>6.7.2.4.2A</TD>

<TD>Block offset of Lane n Status 3 CSRs starts from 0x1C, add 0x20 for each lane increment.</TD>
</TR>

<TR>
<TD>6.7.2.4.3A</TD>

<TD>Block offset of Lane n Status 4 CSRs starts from 0x20, add 0x20 for each lane increment.</TD>
</TR>

<TR>
<TD>6.7.2.4.4A</TD>

<TD>Block offset of Lane n Status 5 CSRs starts from 0x24, add 0x20 for each lane increment.</TD>
</TR>

<TR>
<TD>6.7.2.4.5A</TD>

<TD>Block offset of Lane n Status 6 CSRs starts from 0x28, add 0x20 for each lane increment.</TD>
</TR>

<TR>
<TD>6.7.2.4.6A</TD>

<TD>Block offset of Lane n Status 7 CSRs starts from 0x2c, add 0x20 for each lane increment.</TD>
</TR>

<TR>
<TD>6.8</TD>

<TD>Virtual Channel Extended Features </TD>

<TD>Part 6, Sec. 6.8</TD>

<TD>Required if VCs are supported</TD>
</TR>

<TR>
<TD>6.8A</TD>

<TD>This Extended Features register block is assigned Extended Features block EF_ID=0x000A.</TD>
</TR>

<TR>
<TD>6.8.1</TD>

<TD>Register Map</TD>

<TD>Part 6, Sec. 6.8.1</TD>
</TR>

<TR>
<TD>6.8.1A</TD>

<TD>The virtual channel registers for RapidIO LP-Serial devices shall be mapped according to Part 6, Table 6-23.</TD>
</TR>

<TR>
<TD>6.8.1.B</TD>

<TD>The default method is to configure VC operation when the channel is quiescent either by protocol, or by holding the master enable in the disabled state.</TD>
</TR>

<TR>
<TD>6.8.2</TD>

<TD>Virtual Channel Control Block Registers</TD>

<TD>Part 6, Sec. 6.8.2</TD>

<TD>Required if VCs are supported</TD>
</TR>

<TR>
<TD>6.8.2.1</TD>

<TD>VC Register Block Header</TD>

<TD>Part 6, Sec. 6.8.2.1</TD>
</TR>

<TR>
<TD>6.8.2.1A</TD>

<TD>Block offset of the &quot;VC Register Block Header&quot; register is 0x0.</TD>
</TR>

<TR>
<TD>6.8.2.1B</TD>

<TD>The LP-Serial VC register block header register contains the EF_PTR to the next extended features block and the EF_ID that identifies this as the Virtual Channel Extended Features Block.</TD>
</TR>

<TR>
<TD>6.8.2.1C</TD>

<TD>Bit settings of VC Register Block Header shall follow Part 6, Table 6-24.</TD>
</TR>

<TR>
<TD>6.8.2.2</TD>

<TD>Port n VC Control and Status Registers</TD>

<TD>Part 6, Sec. 6.8.2.2</TD>
</TR>

<TR>
<TD>6.8.2.2A</TD>

<TD>Block Offset of the &quot;Port n VC Control and Status Registers&quot; starts from 0x20, add 0x20 for each port increment.</TD>
</TR>

<TR>
<TD>6.8.2.2B</TD>

<TD>Bit settings of  Port n VC Control and Status Registers shall follow Part 6, Table 6-25.</TD>
</TR>

<TR>
<TD>6.8.2.2C</TD>

<TD>Implementers are required to support a maximum VC refreshing period of at least 1024 x 16 = 16K code groups in size.</TD>
</TR>

<TR>
<TD>6.8.2.2D</TD>

<TD>The maximum possible VC refreshing period that can be supported is 1024 x 256 = 256K code groups. Writing to this field with a value greater than the maximum supported value by the port will set the field to the maximum value supported by the port.</TD>
</TR>

<TR>
<TD>6.8.2.2E</TD>

<TD>CT mode must be implemented in the highest VCs first to allow this simplified programming model.</TD>
</TR>

<TR>
<TD>6.8.2.2F</TD>

<TD>VCs not supporting CT operation are indicated by not allowing the &quot;CT Mode&quot; bits to set.</TD>
</TR>

<TR>
<TD>6.8.2.2G</TD>

<TD>&quot;VCs Enable&quot; Bits 24-27, and any bits associated with unimplemented VCs need not be writable, but must return 0 when read.</TD>
</TR>

<TR>
<TD>6.8.2.2H</TD>

<TD>Setting the &quot;VCs Enable&quot; field to a value larger than the number of VCs supported as indicated in &quot;VCs Support&quot; field. Will result in only VC0 being enabled.</TD>
</TR>

<TR>
<TD>6.8.2.3</TD>

<TD>Port n VC0 BW Allocation Registers</TD>

<TD>Part 6, Sec. 6.8.2.3</TD>
</TR>

<TR>
<TD>6.8.2.3A</TD>

<TD>Block Offset of the &quot;Port n VC0 BW Allocation Registers&quot; starts from 0x24, add 0x20 for each port increament.</TD>
</TR>

<TR>
<TD>6.8.2.3B</TD>

<TD>Bit settings of Port n VC0 BW Allocation CSR shall follow Part 6, Table 6-26.</TD>
</TR>

<TR>
<TD>6.8.2.3C</TD>

<TD>The &quot;VC0 Bandwidth Reservation Capable&quot; bit indicates whether the device supports VC0 bandwidth reservation scheduling.  This bit is read only.</TD>
</TR>

<TR>
<TD>6.8.2.3D</TD>

<TD>The bandwidth allocation value is left justified based on precision. Bits are ignored based on the precision value.</TD>
</TR>

<TR>
<TD>6.8.2.3E</TD>

<TD>When VC0 in strict priority mode (default mode),traffic on VC0 is serviced before any of the other VCs. The remaining bandwidth is then divided according to the percentages in the bandwidth allocations.</TD>
</TR>

<TR>
<TD>6.8.2.3F</TD>

<TD>Optionally, VC0 may be included in the bandwidth reservation scheduling. In this case, the priorities within VC0 are serviced when VC0 is allocated bandwidth on the link. VC0 activity cannot cause the other VCs to receive less than their allocation of bandwidth in this mode.</TD>
</TR>

<TR>
<TD>6.8.2.3H</TD>

<TD>The Bandwidth Reservation Precision field is used to indicate the granularity of bandwidth scheduling for the port. The value in this register applies to the subsequent BW Allocation Registers as well.</TD>
</TR>

<TR>
<TD>6.8.2.3I</TD>

<TD>The value programmed in the BW Allocation Registers is a binary fraction based on the percentage of the overall total bandwidth. 100% bandwidth is represented by a value of 1.000.</TD>
</TR>

<TR>
<TD>6.8.2.3J</TD>

<TD>if the percentage results in a value smaller than the precision, a value of 0 could result in a VC getting no service. The precision value allows the bandwidth allocation algorithm to round up or down based on the dividing point, and to detect and round up a zero value to allocate at least a minimal increment of bandwidth.</TD>
</TR>

<TR>
<TD>6.8.2.3K</TD>

<TD>The total of all the  allocations should not exceed 100%.</TD>
</TR>

<TR>
<TD>6.8.2.4</TD>

<TD>Port n VCx BW Allocation Registers</TD>

<TD>Part 6, Sec. 6.8.2.4</TD>
</TR>

<TR>
<TD>6.8.2.4A</TD>

<TD>Block Offset of the &quot;Port n VCx BW Allocation Registers&quot; is based on VC number, it shall be mapped according to table 6-23.</TD>
</TR>

<TR>
<TD>6.8.2.4B</TD>

<TD>Each Port n VCx BW Allocation CSR register supports 2 VCs. Bit settings of the register  shall follow Part 6, Table 6-28.</TD>
</TR>

<TR>
<TD>6.8.2.4C</TD>

<TD>The bandwidth allocation value is left justified based on precision. Bits are ignored based on the precision value.</TD>
</TR>

<TR>
<TD>6.8.2.4D</TD>

<TD>If the VC is not enabled, its bandwidth allocation bits are treated as reserved.</TD>
</TR>

<TR>
<TD>6.8.2.4E</TD>

<TD>A value of &#8216;0&#8217; for bandwidth allocation results in no service being given to that VC.</TD>
</TR>

<TR>
<TD>6.8.2.4F</TD>

<TD>VCs initialize with a value of zero and remain inactive until allocated bandwidth.</TD>
</TR>
</Table>
</Worksheet>

<Worksheet>
<Table>
<TR>
<TD id="LinkTarget_864">Item #</TD>

<TD>Compliance Item</TD>

<TD>Specification Reference</TD>

<TD>Optional</TD>

<TD>Interop Item</TD>
</TR>

<TR>
<TD>7</TD>

<TD>Signal Descriptions</TD>

<TD>Part 6, Chap. 7</TD>
</TR>

<TR>
<TD>7.1A</TD>

<TD>The interface is defined either as a 1x, 2x, 4x, 8x, or 16x lane, full duplex, point-to-point interface using differential signaling. A lane implementation consists of Nx4 wires with two for the egress and two for the ingress direction.</TD>

<TD>Part 6, Sec. 7.1</TD>
</TR>

<TR>
<TD>7.2A</TD>

<TD>See Table 7-1. LP-Serial Signal Description</TD>

<TD>Part 6, Sec. 7.2</TD>
</TR>
</Table>
</Worksheet>

<Worksheet>
<Table>
<TR>
<TD id="LinkTarget_736">Item #</TD>

<TD>Compliance Item</TD>

<TD>Specification Reference</TD>

<TD>Optional</TD>

<TD>Interop Item</TD>
</TR>

<TR>
<TD>8</TD>

<TD>Common Electrical Specifications</TD>

<TD>Part 6, Chap. 9</TD>
</TR>

<TR>
<TD>8.1</TD>

<TD>Introduction</TD>

<TD>Part 6, Sec. 8.1</TD>
</TR>

<TR>
<TD>8.1A</TD>

<TD>A Level I link shall meet the Level I requirements listed in Section 8.1.</TD>

<TD/>

<TD>Required only for Level I links</TD>
</TR>

<TR>
<TD>8.1B</TD>

<TD>A Level II link shall meet the Level II requirements listed in Section 8.1.</TD>

<TD/>

<TD>Required only for Level II links</TD>
</TR>

<TR>
<TD>8.5.2A</TD>

<TD>Links shall meet the data pattern requirements specified in Section 8.5.2.</TD>

<TD>Part 6, Sec. 8.5.2</TD>
</TR>

<TR>
<TD>8.5.3A</TD>

<TD>Links shall meet the signal level requirements specified in Section 8.5.3.</TD>

<TD>Part 6, Sec. 8.5.3</TD>
</TR>

<TR>
<TD>8.5.4A</TD>

<TD>Links shall meet the bit error ratio requirements specified in Section 8.5.4.</TD>

<TD>Part 6, Sec. 8.5.4</TD>
</TR>

<TR>
<TD>8.5.5A</TD>

<TD>Links shall meet the ground differences requirements specified in Section 8.5.5.</TD>

<TD>Part 6, Sec. 8.5.5</TD>
</TR>

<TR>
<TD>8.5.6A</TD>

<TD>Links shall meet the cross talk requirements specified in Section 8.5.6.</TD>

<TD>Part 6, Sec. 8.5.6</TD>
</TR>

<TR>
<TD>8.5.7A</TD>

<TD>Links shall meet the transmitter test load requirements specified in Section 8.5.7.</TD>

<TD>Part 6, Sec. 8.5.7</TD>
</TR>

<TR>
<TD>8.5.8A</TD>

<TD>Links shall meet the transmitter lane-to-lane skew requirements specified in Section 8.5.8.</TD>

<TD>Part 6, Sec. 8.5.8</TD>
</TR>

<TR>
<TD>8.5.9A</TD>

<TD>Links shall meet the receiver input lane-to-lane skew requirements specified in Section 8.5.9.</TD>

<TD>Part 6, Sec. 8.5.9</TD>
</TR>

<TR>
<TD>8.5.10A</TD>

<TD>Links shall meet the transmitter short circuit current requirements specified in Section 8.5.10.</TD>

<TD>Part 6, Sec. 8.5.10</TD>
</TR>

<TR>
<TD>8.5.11A</TD>

<TD>Links shall meet the differential resistance and return loss requirements specified in Section 8.5.11.</TD>

<TD>Part 6, Sec. 8.5.11</TD>
</TR>

<TR>
<TD>8.5.12A</TD>

<TD>Links shall meet the baud rate tolerance requirements specified in Section 8.5.12.</TD>

<TD>Part 6, Sec. 8.5.12</TD>
</TR>

<TR>
<TD>8.5.13A</TD>

<TD>Links shall meet the termination and DC blocking requirements specified in Section 8.5.13.</TD>

<TD>Part 6, Sec. 8.5.13</TD>
</TR>
</Table>
</Worksheet>

<Worksheet>
<Table>
<TR>
<TD id="LinkTarget_634">Item #</TD>

<TD>Compliance Item</TD>

<TD>Specification Reference</TD>

<TD>Optional</TD>

<TD>Interop Item</TD>
</TR>

<TR>
<TD>9</TD>

<TD>1.25Gbaud, 2.5Gbaud, and 3.125Gbaud LP-Serial Links</TD>

<TD>Part 6, Chap. 9</TD>

<TD>Required only for Level I links</TD>
</TR>

<TR>
<TD>9.1A</TD>

<TD>Level I short run and long run electrical interfaces operating at 1.25Gbaud, 2.5Gbaud, and 3.125Gbaud shall meet the Level I application goals detailed in Section 9.1.</TD>

<TD>Part 6, Sec. 9.1</TD>
</TR>

<TR>
<TD>9.2A</TD>

<TD>The types of equalizers and, if the equalizers are adaptive, the adaptive equalizer training algorithms that may be used in Level I transmitter or receiver are subject to the restrictions detailed in Section 9.2.</TD>

<TD>Part 6, Sec. 9.2</TD>
</TR>

<TR>
<TD>9.4</TD>

<TD>Level I Electrical Specification</TD>

<TD>Part 6, Sec. 9.4</TD>
</TR>

<TR>
<TD>9.4.1</TD>

<TD>Level I Short Run Transmitter Characteristics</TD>

<TD>Part 6, Sec. 9.4.1</TD>
</TR>

<TR>
<TD>9.4.1A</TD>

<TD>Level I short run transmitter must meet the AC timing specifications specified in Table 9-1 and detailed in Section 9.4.1.</TD>
</TR>

<TR>
<TD>9.4.1B</TD>

<TD>Level I short run transmitter must meet the output jitter specifications specified in Table 9-2 and detailed in Section 9.4.1.</TD>
</TR>

<TR>
<TD>9.4.2</TD>

<TD>Level I Long Run Transmitter Characteristics</TD>

<TD>Part 6, Sec. 9.4.2</TD>
</TR>

<TR>
<TD>9.4.2A</TD>

<TD>Level I long run transmitter must meet the AC timing specifications specified in Table 9-5 and detailed in Section 9.4.2.</TD>
</TR>

<TR>
<TD>9.4.2B</TD>

<TD>Level I long run transmitter must meet the output jitter specifications specified in Table 9-6 and detailed in Section 9.4.2.</TD>
</TR>

<TR>
<TD>9.4.3</TD>

<TD>Level I Receiver Specifications</TD>

<TD>Part 6, Sec. 9.4.3</TD>
</TR>

<TR>
<TD>9.4.3A</TD>

<TD>Level I receiver must meet the electrical input specifications specified in Table 9-9 and detailed in Section 9.4.3.</TD>
</TR>

<TR>
<TD>9.4.3B</TD>

<TD>Level I receiver must meet the input jitter tolerance specifications specified in Table 9-10 and detailed in Section 9.4.3.</TD>
</TR>

<TR>
<TD>9.5A</TD>

<TD>Level I measurement and test requirements must be followed according to Section 9.5.</TD>

<TD>Part 6, Sec. 9.5</TD>
</TR>
</Table>
</Worksheet>

<Worksheet>
<Table>
<TR>
<TD id="LinkTarget_618">Item #</TD>

<TD>Compliance Item</TD>

<TD>Specification Reference</TD>

<TD>Optional</TD>

<TD>Interop Item</TD>
</TR>

<TR>
<TD>10</TD>

<TD>5Gbaud and 6.25Gbaud LP-Serial Links</TD>

<TD>Part 6, Chap. 10</TD>

<TD>Required only for Level II links</TD>
</TR>

<TR>
<TD>10.1A</TD>

<TD>Level II short run, medium run, and long run electrical interfaces operating at 5Gbaud and 6.25Gbaud shall meet the Level II application goals detailed in Section 10.1.</TD>

<TD>Part 6, Sec. 9.1</TD>
</TR>

<TR>
<TD>10.2A</TD>

<TD>The types of equalizers and, if the equalizers are adaptive, the adaptive equalizer training algorithms that may be used in Level II 5Gbaud transmitter or receiver are subject to the restrictions detailed in Section 10.2.</TD>

<TD>Part 6, Sec. 9.2</TD>

<TD>5Gbaud only</TD>
</TR>

<TR>
<TD>10.4</TD>

<TD>Level II Short Run Interface General Requirements</TD>

<TD>Part 6, Sec. 10.4</TD>

<TD>Short run only</TD>
</TR>

<TR>
<TD>10.4.1A</TD>

<TD>Jitter and Inter-operability Methodology</TD>

<TD>Part 6, Sec. 10.4.1</TD>
</TR>

<TR>
<TD>10.4.1.1A</TD>

<TD>Level II short run link must meet the defined test patterns requirements specified in Section 10.4.1.1.</TD>

<TD>Part 6, Sec. 10.4.1.1</TD>
</TR>

<TR>
<TD>10.4.1.2A</TD>

<TD>Level II short run link must meet the channel compliance requirements specified in Section 10.4.1.2</TD>

<TD>Part 6, Sec. 10.4.1.2</TD>
</TR>

<TR>
<TD>10.4.1.3A</TD>

<TD>Level II short run transmitter must meet the inter-operability requirements specified in Section 10.4.1.3.</TD>

<TD>Part 6, Sec. 10.4.1.3</TD>
</TR>

<TR>
<TD>10.4.1.4A</TD>

<TD>Level II short run receiver must meet the inter-operability requirements specified in Section 10.4.1.4.</TD>

<TD>Part 6, Sec. 10.4.1.4</TD>
</TR>

<TR>
<TD>10.4.2</TD>

<TD>Level II Short Run Electrical Characteristics</TD>

<TD>Part 6, Sec. 10.4.2</TD>
</TR>

<TR>
<TD>10.4.2.1</TD>

<TD>Level II Short Run Transmitter Characteristics</TD>

<TD>Part 6, Sec. 10.4.2.1</TD>
</TR>

<TR>
<TD>10.4.2.1A</TD>

<TD>Level II short run transmitter must meet the output electrical specifications specified in Table 10-2 and detailed in Section 10.4.2.1.</TD>
</TR>

<TR>
<TD>10.4.2.1B</TD>

<TD>Level II short run transmitter must meet the output jitter specifications specified in Table 10-3 and detailed in Section 10.4.2.1.</TD>
</TR>

<TR>
<TD>10.4.2.2</TD>

<TD>Level II Short Run Receiver Characteristics</TD>

<TD>Part 6, Sec. 10.4.2.2</TD>
</TR>

<TR>
<TD>10.4.2.2A</TD>

<TD>Level II short run receiver must meet the electrical input specifications specified in Table 10-6 and detailed in Section 10.4.2.2.</TD>
</TR>

<TR>
<TD>10.4.2.2B</TD>

<TD>Level II short run receiver must meet the input jitter tolerance specifications specified in Table 10-7 and detailed in Section 10.4.2.2.</TD>
</TR>

<TR>
<TD>10.4.2.3</TD>

<TD>Level II Short Run Link and Jitter Budgets</TD>

<TD>Part 6, Sec. 10.4.2.3</TD>
</TR>

<TR>
<TD>10.4.2.3A</TD>

<TD>Level II short run link must meet the informative loss, skew and jitter budget specifications specified in Table 10-10.</TD>
</TR>

<TR>
<TD>10.4.2.3B</TD>

<TD>Level II short run link must meet the high frequency jitter budget specifications specified in Table 10-11.</TD>
</TR>

<TR>
<TD>10.5</TD>

<TD>Level II Long Run Interface General Requirements</TD>

<TD>Part 6, Sec. 10.5</TD>

<TD>Long run only</TD>
</TR>

<TR>
<TD>10.5.1</TD>

<TD>Long Run Jitter and Inter-operability Methodology</TD>

<TD>Part 6, Sec. 10.5.1</TD>
</TR>

<TR>
<TD>10.5.1.1A</TD>

<TD>Level II long run link must meet the channel compliance specifications specified in section 10.5.1.1.</TD>

<TD>Part 6, Sec. 10.5.1.1</TD>
</TR>

<TR>
<TD>10.5.1.2A</TD>

<TD>Level II long run transmitter must meet the inter-operability requirements specified in Section 10.5.1.2.</TD>

<TD>Part 6, Sec. 10.5.1.2</TD>
</TR>

<TR>
<TD>10.5.1.3A</TD>

<TD>Level II long run receiver must meet the inter-operability requirements specified in Section 10.5.1.3.</TD>

<TD>Part 6, Sec. 10.5.1.3</TD>
</TR>

<TR>
<TD>10.5.2</TD>

<TD>Level II Long Run Electrical Characteristics</TD>

<TD>Part 6, Sec. 10.5.2</TD>
</TR>

<TR>
<TD>10.5.2.1</TD>

<TD>Level II Long Run Transmitter Characteristics</TD>

<TD>Part 6, Sec. 10.5.2.1</TD>
</TR>

<TR>
<TD>10.5.2.1A</TD>

<TD>Level II long run transmitter must meet the output electrical specifications specified in Table 10-13 and detailed in Section 10.5.2.1.</TD>
</TR>

<TR>
<TD>10.5.2.1B</TD>

<TD>Level II long run transmitter must meet the output jitter specifications specified in Table 10-14 and detailed in Section 10.5.2.1.</TD>
</TR>

<TR>
<TD>10.5.2.2</TD>

<TD>Level II Long Run Receiver Characteristics</TD>

<TD>Part 6, Sec. 10.5.2.2</TD>
</TR>

<TR>
<TD>10.5.2.2A</TD>

<TD>Level II long run receiver must meet the electrical input specifications specified in Table 10-17 and detailed in Section 10.5.2.2.</TD>
</TR>

<TR>
<TD>10.5.2.2.8A</TD>

<TD>Level II long run receiver must meet the receiver jitter tolerance requirements specified in Section 10.5.2.2.8.</TD>
</TR>

<TR>
<TD>10.5.3</TD>

<TD>Level II Long Run Link and Jitter Budgets</TD>

<TD>Part 6, Sec. 10.5.3</TD>
</TR>

<TR>
<TD>10.5.3A</TD>

<TD>Level II long run link must meet the informative loss, skew and jitter budget specifications specified in Table 10-19.</TD>
</TR>

<TR>
<TD>10.5.3B</TD>

<TD>Level II long run link must meet the high frequency jitter budget specifications specified in Table 10-20.</TD>
</TR>

<TR>
<TD>10.6</TD>

<TD>Level II Medium Run Interface General Requirements</TD>

<TD>Part 6, Sec. 10.6</TD>

<TD>Medium run only</TD>
</TR>

<TR>
<TD>10.6.1</TD>

<TD>Medium Run Jitter and Inter-operability Methodology</TD>

<TD>Part 6, Sec. 10.6.1</TD>
</TR>

<TR>
<TD>10.6.1.1A</TD>

<TD>Level II medium run link must meet the channel compliance specifications specified in section 10.6.1.1.</TD>

<TD>Part 6, Sec. 10.6.1.1</TD>
</TR>

<TR>
<TD>10.6.1.2A</TD>

<TD>Level II medium run transmitter must meet the inter-operability requirements specified in Section 10.6.1.2.</TD>

<TD>Part 6, Sec. 10.6.1.2</TD>
</TR>

<TR>
<TD>10.6.1.3A</TD>

<TD>Level II medium run receiver must meet the inter-operability requirements specified in Section 10.6.1.3.</TD>

<TD>Part 6, Sec. 10.6.1.3</TD>
</TR>

<TR>
<TD>10.6.2</TD>

<TD>Level II Medium Run Interface Electrical Characteristics</TD>

<TD>Part 6, Sec. 10.6.2</TD>
</TR>

<TR>
<TD>10.6.2.1</TD>

<TD>Level II Medium Run Transmitter Characteristics</TD>

<TD>Part 6, Sec. 10.6.2.1</TD>
</TR>

<TR>
<TD>10.6.2.1A</TD>

<TD>Level II medium run transmitter must meet the output electrical specifications specified in Table 10-22 and detailed in Section 10.6.2.1.</TD>
</TR>

<TR>
<TD>10.6.2.1B</TD>

<TD>Level II medium run transmitter must meet the output jitter specifications specified in Table 10-23 and detailed in Section 10.6.2.1.</TD>
</TR>

<TR>
<TD>10.6.2.2</TD>

<TD>Level II Medium Run Receiver Characteristics</TD>

<TD>Part 6, Sec. 10.6.2.2</TD>
</TR>

<TR>
<TD>10.6.2.2A</TD>

<TD>Level II medium run receiver must meet the electrical input specifications specified in Table 10-26 and detailed in Section 10.6.2.2.</TD>
</TR>

<TR>
<TD>10.6.2.2.8A</TD>

<TD>Level II medium run receiver must meet the receiver jitter tolerance requirements specified in Section 10.6.2.2.8.</TD>
</TR>

<TR>
<TD>10.6.3</TD>

<TD>Level II Medium Run Link and Jitter Budgets</TD>

<TD>Part 6, Sec. 10.6.3</TD>
</TR>

<TR>
<TD>10.6.3A</TD>

<TD>Level II medium run link must meet the informative loss, skew and jitter budget specifications specified in Table 10-28.</TD>
</TR>

<TR>
<TD>10.6.3B</TD>

<TD>Level II medium run link must meet the high frequency jitter budget specifications specified in Table 10-29.</TD>
</TR>
</Table>
</Worksheet>
</Workbook>
</TaggedPDF-doc>
